# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class HardwareType(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The type of the hardware to run on (CPU/GPU Names)
    """


    class MetaOapg:
        enum_value_to_name = {
            "K80": "K80",
            "V100": "V100",
            "T4": "T4",
            "A10G": "A10G",
            "g4dn.xlarge": "G4DN_XLARGE",
            "g5.xlarge": "G5_XLARGE",
            "A100 80GB GCP": "A100_80GB_GCP",
            "A100 40GB GCP": "A100_40GB_GCP",
            "EPYC": "EPYC",
            "EPYC 7002": "EPYC_7002",
            "EPYC 7003": "EPYC_7003",
            "Jetson Xavier": "JETSON_XAVIER",
            "Jetson Nano": "JETSON_NANO",
            "Jetson Xavier AGX": "JETSON_XAVIER_AGX",
            "Jetson Orin": "JETSON_ORIN",
            "Jetson Orin NX": "JETSON_ORIN_NX",
            "Jetson Orin Nano": "JETSON_ORIN_NANO",
            "Jetson Orin Nano 4GB": "JETSON_ORIN_NANO_4GB",
            "Cascade Lake": "CASCADE_LAKE",
            "Skylake": "SKYLAKE",
            "Broadwell": "BROADWELL",
            "Icelake": "ICELAKE",
            "Intel NUC Tiger Lake": "INTEL_NUC_TIGER_LAKE",
            "Skylake-SP": "SKYLAKESP",
            "Cascade Lake GCP": "CASCADE_LAKE_GCP",
            "NXP i.MX 8M mini": "NXP_I_MX_8M_MINI",
            "c5.2xlarge": "C5_2XLARGE",
            "Sapphire Rapids": "SAPPHIRE_RAPIDS",
            "L4": "L4",
            "m5.4xlarge": "M5_4XLARGE",
            "Hailo-8": "HAILO8",
            "Ambarella": "AMBARELLA",
            "Apple iPhone A11": "APPLE_I_PHONE_A11",
            "Apple iPhone A12": "APPLE_I_PHONE_A12",
            "Apple iPhone A14": "APPLE_I_PHONE_A14",
            "Apple iPhone A15": "APPLE_I_PHONE_A15",
            "Snapdragon 845": "SNAPDRAGON_845",
            "Snapdragon 855": "SNAPDRAGON_855",
            "Snapdragon 888": "SNAPDRAGON_888",
            "Snapdragon 8 Gen 1": "SNAPDRAGON_8_GEN_1",
            "Exynos 9810": "EXYNOS_9810",
            "Exynos 9820": "EXYNOS_9820",
            "Exynos 990": "EXYNOS_990",
            "Exynos 2200": "EXYNOS_2200",
        }
    
    @schemas.classproperty
    def K80(cls):
        return cls("K80")
    
    @schemas.classproperty
    def V100(cls):
        return cls("V100")
    
    @schemas.classproperty
    def T4(cls):
        return cls("T4")
    
    @schemas.classproperty
    def A10G(cls):
        return cls("A10G")
    
    @schemas.classproperty
    def G4DN_XLARGE(cls):
        return cls("g4dn.xlarge")
    
    @schemas.classproperty
    def G5_XLARGE(cls):
        return cls("g5.xlarge")
    
    @schemas.classproperty
    def A100_80GB_GCP(cls):
        return cls("A100 80GB GCP")
    
    @schemas.classproperty
    def A100_40GB_GCP(cls):
        return cls("A100 40GB GCP")
    
    @schemas.classproperty
    def EPYC(cls):
        return cls("EPYC")
    
    @schemas.classproperty
    def EPYC_7002(cls):
        return cls("EPYC 7002")
    
    @schemas.classproperty
    def EPYC_7003(cls):
        return cls("EPYC 7003")
    
    @schemas.classproperty
    def JETSON_XAVIER(cls):
        return cls("Jetson Xavier")
    
    @schemas.classproperty
    def JETSON_NANO(cls):
        return cls("Jetson Nano")
    
    @schemas.classproperty
    def JETSON_XAVIER_AGX(cls):
        return cls("Jetson Xavier AGX")
    
    @schemas.classproperty
    def JETSON_ORIN(cls):
        return cls("Jetson Orin")
    
    @schemas.classproperty
    def JETSON_ORIN_NX(cls):
        return cls("Jetson Orin NX")
    
    @schemas.classproperty
    def JETSON_ORIN_NANO(cls):
        return cls("Jetson Orin Nano")
    
    @schemas.classproperty
    def JETSON_ORIN_NANO_4GB(cls):
        return cls("Jetson Orin Nano 4GB")
    
    @schemas.classproperty
    def CASCADE_LAKE(cls):
        return cls("Cascade Lake")
    
    @schemas.classproperty
    def SKYLAKE(cls):
        return cls("Skylake")
    
    @schemas.classproperty
    def BROADWELL(cls):
        return cls("Broadwell")
    
    @schemas.classproperty
    def ICELAKE(cls):
        return cls("Icelake")
    
    @schemas.classproperty
    def INTEL_NUC_TIGER_LAKE(cls):
        return cls("Intel NUC Tiger Lake")
    
    @schemas.classproperty
    def SKYLAKESP(cls):
        return cls("Skylake-SP")
    
    @schemas.classproperty
    def CASCADE_LAKE_GCP(cls):
        return cls("Cascade Lake GCP")
    
    @schemas.classproperty
    def NXP_I_MX_8M_MINI(cls):
        return cls("NXP i.MX 8M mini")
    
    @schemas.classproperty
    def C5_2XLARGE(cls):
        return cls("c5.2xlarge")
    
    @schemas.classproperty
    def SAPPHIRE_RAPIDS(cls):
        return cls("Sapphire Rapids")
    
    @schemas.classproperty
    def L4(cls):
        return cls("L4")
    
    @schemas.classproperty
    def M5_4XLARGE(cls):
        return cls("m5.4xlarge")
    
    @schemas.classproperty
    def HAILO8(cls):
        return cls("Hailo-8")
    
    @schemas.classproperty
    def AMBARELLA(cls):
        return cls("Ambarella")
    
    @schemas.classproperty
    def APPLE_I_PHONE_A11(cls):
        return cls("Apple iPhone A11")
    
    @schemas.classproperty
    def APPLE_I_PHONE_A12(cls):
        return cls("Apple iPhone A12")
    
    @schemas.classproperty
    def APPLE_I_PHONE_A14(cls):
        return cls("Apple iPhone A14")
    
    @schemas.classproperty
    def APPLE_I_PHONE_A15(cls):
        return cls("Apple iPhone A15")
    
    @schemas.classproperty
    def SNAPDRAGON_845(cls):
        return cls("Snapdragon 845")
    
    @schemas.classproperty
    def SNAPDRAGON_855(cls):
        return cls("Snapdragon 855")
    
    @schemas.classproperty
    def SNAPDRAGON_888(cls):
        return cls("Snapdragon 888")
    
    @schemas.classproperty
    def SNAPDRAGON_8_GEN_1(cls):
        return cls("Snapdragon 8 Gen 1")
    
    @schemas.classproperty
    def EXYNOS_9810(cls):
        return cls("Exynos 9810")
    
    @schemas.classproperty
    def EXYNOS_9820(cls):
        return cls("Exynos 9820")
    
    @schemas.classproperty
    def EXYNOS_990(cls):
        return cls("Exynos 990")
    
    @schemas.classproperty
    def EXYNOS_2200(cls):
        return cls("Exynos 2200")
