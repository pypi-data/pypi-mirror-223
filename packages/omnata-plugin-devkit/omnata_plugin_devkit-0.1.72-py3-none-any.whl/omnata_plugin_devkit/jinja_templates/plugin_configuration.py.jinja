import streamlit as st
import os,json
from snowflake.snowpark.context import get_active_session

plugin_app_database = get_active_session().get_current_database().replace('"','')

st.header("Plugin Setup")
omnata_app_name = 'OMNATA_SYNC_ENGINE'

plugin_info = json.loads(get_active_session().sql(f"select PLUGIN.OMNATA_PLUGIN_INFO()").collect()[0][0])
manifest = plugin_info['manifest']
developer_id = manifest['developer_id']
# TODO: this should really come from the Omnata engine rather than reimplement the same logic
plugin_id = manifest['plugin_id']
plugin_fqn = f"{developer_id}__{plugin_id}".upper()
plugin_application_role_name = f"PLUGIN_{plugin_fqn}"

# first, check for an existing registration
registrations = get_active_session().sql(f"select APPLICATION_NAME,EXTERNAL_ACCESS_INTEGRATION_NAMES,OAUTH_SECRETS,OTHER_SECRETS from DATA.OMNATA_REGISTRATION").collect()
if len(registrations)==0:
    # if there's no registration, prep for registration by making the plugin app visible to the engine
    applications_list = get_active_session().sql(f"show databases like '{omnata_app_name}' in account").collect()
    if len(applications_list)==0:
        st.write("""To start using an Omnata plugin, you must grant the Omnata Sync Engine visibility of this plugin application and then register it:""")
        st.code(f"""
        -- as ACCOUNTADMIN
        grant application role {plugin_app_database}.OMNATA_MANAGEMENT 
        to application {omnata_app_name};
        call {omnata_app_name}.API.REGISTER_PLUGIN('{plugin_app_database}');
        """,language='sql')
        clicked_1 = st.button(label="Show next step",key="next_step_button_1")
        if clicked_1:
            st.info("Plugin was not registered, please try following the above instructions again")
elif len(registrations)>1:
    st.error(f"There are {len(registrations)}, this should never happen. Remove this plugin application and reinstall")
else:
    test_callback_result = json.loads(get_active_session().sql(f"call PLUGIN.TEST_CALLBACK('{omnata_app_name}')").collect()[0][0])
    if test_callback_result['success'] is False:
        st.error(test_callback_result['error'])
    elif test_callback_result['data'] is False:
        st.write("""Now, you must complete the final registration step by granting the plugin application access to its Omnata app role:""")
        st.code(f"""grant application role {omnata_app_name}.{plugin_application_role_name} 
to application {plugin_app_database};""",language='sql')
        clicked_2 = st.button(label="Show next step",key="next_step_button_2")
        if clicked_2:
            st.info("Plugin was not registered, please try following the above instructions again")
    else:
        st.success("Plugin is registered and ready to use")
        st.write('---')
        registration = registrations[0]
        integrations = json.loads(registration.EXTERNAL_ACCESS_INTEGRATION_NAMES)
        oauth_secrets = json.loads(registration.OAUTH_SECRETS) if registration.OAUTH_SECRETS is not None else []
        other_secrets = json.loads(registration.OTHER_SECRETS) if registration.OTHER_SECRETS is not None else []
        st.subheader('External Access and Secrets')
        col1,col2 = st.columns([2,6])
        with col1:
            st.write(f"**External Access Integrations used by plugin:**")
        with col2:
            st.code('\n'.join(integrations))
        with col1:
            st.write(f"**OAuth secrets used by plugin:**")
        with col2:
            st.code('\n'.join(oauth_secrets))
        with col1:
            st.write(f"**Other secrets used by plugin:**")
        with col2:
            st.code('\n'.join(other_secrets))
        try:
            secret_contents = get_active_session().sql(f"call PLUGIN.RETRIEVE_SECRETS(PARSE_JSON($${json.dumps(oauth_secrets)}$$),PARSE_JSON($${json.dumps(other_secrets)}$$))").collect()
            st.info("Secret contents were retrieved successfully")
        except Exception as exception:
            st.error(f"Error retrieving secrets contents: {str(exception)}")

