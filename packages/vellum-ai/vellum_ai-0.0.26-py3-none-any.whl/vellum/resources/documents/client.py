# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...environment import VellumEnvironment
from ...errors.bad_request_error import BadRequestError
from ...errors.internal_server_error import InternalServerError
from ...errors.not_found_error import NotFoundError
from ...types.paginated_slim_document_list import PaginatedSlimDocumentList
from ...types.set_document_metadata_response import SetDocumentMetadataResponse
from ...types.upload_document_response import UploadDocumentResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DocumentsClient:
    def __init__(
        self, *, environment: VellumEnvironment = VellumEnvironment.PRODUCTION, client_wrapper: SyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        document_index_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
    ) -> PaginatedSlimDocumentList:
        """

        <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

        Used to list documents. Optionally filter on supported fields.

        Parameters:
            - document_index_id: typing.Optional[str]. Filter down to only those documents that are included in the specified index. You may provide either the Vellum-generated ID or the unique name of the index specified upon initial creation.

            - limit: typing.Optional[int]. Number of results to return per page.

            - offset: typing.Optional[int]. The initial index from which to return the results.

            - ordering: typing.Optional[str]. Which field to use when ordering the results.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.default}/", "v1/documents"),
            params=remove_none_from_dict(
                {"document_index_id": document_index_id, "limit": limit, "offset": offset, "ordering": ordering}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedSlimDocumentList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def set_document_metadata(
        self,
        *,
        document_id: typing.Optional[str] = OMIT,
        external_id: typing.Optional[str] = OMIT,
        metadata: typing.Dict[str, typing.Any],
    ) -> SetDocumentMetadataResponse:
        """
        <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

        Set the metadata for a document to be used for search filtering.

        **Note:** Uses a base url of `https://documents.vellum.ai`.

        Parameters:
            - document_id: typing.Optional[str]. The ID of the document to update. Must provide either this or `external_id`

            - external_id: typing.Optional[str]. The external ID of the document to update. Must provide either this or `document_id`

            - metadata: typing.Dict[str, typing.Any]. The metadata to set on the document. This will overwrite any existing metadata.
        """
        _request: typing.Dict[str, typing.Any] = {"metadata": metadata}
        if document_id is not OMIT:
            _request["document_id"] = document_id
        if external_id is not OMIT:
            _request["external_id"] = external_id
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.documents}/", "v1/set-document-metadata"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SetDocumentMetadataResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upload(
        self,
        *,
        add_to_index_names: typing.Optional[typing.List[str]] = None,
        external_id: typing.Optional[str] = None,
        label: str,
        contents: typing.IO,
        keywords: typing.Optional[typing.List[str]] = None,
    ) -> UploadDocumentResponse:
        """
        <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

        Upload a document to be indexed and used for search.

        **Note:** Uses a base url of `https://documents.vellum.ai`.

        Parameters:
            - add_to_index_names: typing.Optional[typing.List[str]].

            - external_id: typing.Optional[str].

            - label: str.

            - contents: typing.IO.

            - keywords: typing.Optional[typing.List[str]].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.documents}/", "v1/upload-document"),
            data=jsonable_encoder(
                {
                    "add_to_index_names": add_to_index_names,
                    "external_id": external_id,
                    "label": label,
                    "keywords": keywords,
                }
            ),
            files={"contents": contents},
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadDocumentResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDocumentsClient:
    def __init__(
        self, *, environment: VellumEnvironment = VellumEnvironment.PRODUCTION, client_wrapper: AsyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        document_index_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
    ) -> PaginatedSlimDocumentList:
        """

        <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

        Used to list documents. Optionally filter on supported fields.

        Parameters:
            - document_index_id: typing.Optional[str]. Filter down to only those documents that are included in the specified index. You may provide either the Vellum-generated ID or the unique name of the index specified upon initial creation.

            - limit: typing.Optional[int]. Number of results to return per page.

            - offset: typing.Optional[int]. The initial index from which to return the results.

            - ordering: typing.Optional[str]. Which field to use when ordering the results.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.default}/", "v1/documents"),
            params=remove_none_from_dict(
                {"document_index_id": document_index_id, "limit": limit, "offset": offset, "ordering": ordering}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedSlimDocumentList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def set_document_metadata(
        self,
        *,
        document_id: typing.Optional[str] = OMIT,
        external_id: typing.Optional[str] = OMIT,
        metadata: typing.Dict[str, typing.Any],
    ) -> SetDocumentMetadataResponse:
        """
        <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

        Set the metadata for a document to be used for search filtering.

        **Note:** Uses a base url of `https://documents.vellum.ai`.

        Parameters:
            - document_id: typing.Optional[str]. The ID of the document to update. Must provide either this or `external_id`

            - external_id: typing.Optional[str]. The external ID of the document to update. Must provide either this or `document_id`

            - metadata: typing.Dict[str, typing.Any]. The metadata to set on the document. This will overwrite any existing metadata.
        """
        _request: typing.Dict[str, typing.Any] = {"metadata": metadata}
        if document_id is not OMIT:
            _request["document_id"] = document_id
        if external_id is not OMIT:
            _request["external_id"] = external_id
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.documents}/", "v1/set-document-metadata"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SetDocumentMetadataResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upload(
        self,
        *,
        add_to_index_names: typing.Optional[typing.List[str]] = None,
        external_id: typing.Optional[str] = None,
        label: str,
        contents: typing.IO,
        keywords: typing.Optional[typing.List[str]] = None,
    ) -> UploadDocumentResponse:
        """
        <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

        Upload a document to be indexed and used for search.

        **Note:** Uses a base url of `https://documents.vellum.ai`.

        Parameters:
            - add_to_index_names: typing.Optional[typing.List[str]].

            - external_id: typing.Optional[str].

            - label: str.

            - contents: typing.IO.

            - keywords: typing.Optional[typing.List[str]].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.documents}/", "v1/upload-document"),
            data=jsonable_encoder(
                {
                    "add_to_index_names": add_to_index_names,
                    "external_id": external_id,
                    "label": label,
                    "keywords": keywords,
                }
            ),
            files={"contents": contents},
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadDocumentResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
