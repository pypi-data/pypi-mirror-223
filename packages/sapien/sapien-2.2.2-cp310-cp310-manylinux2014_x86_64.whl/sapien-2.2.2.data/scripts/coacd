#!python
try:
    import trimesh
except ModuleNotFoundError:
    print("trimesh is required. Please install with `pip install trimesh`")
    exit(1)

import numpy as np
import sys
import os
import argparse
import sapien.core as sapien

if __name__ == "__main__":

    def usage():
        print("Usage: coacd input_file output_file")
        exit(1)

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "input_file",
        type=str,
        help="input model loaded by trimesh. Supported formats: glb, gltf, obj, off, ply, stl, etc.",
    )
    parser.add_argument(
        "output_file",
        type=str,
        help="output model exported by trimesh. Supported formats: glb, gltf, obj, off, ply, stl, etc.",
    )
    parser.add_argument("--quiet", action="store_true", help="do not print logs")
    parser.add_argument(
        "-t",
        "--threshold",
        type=float,
        default=0.05,
        help="termination criteria in [0.01, 1] (0.01: most fine-grained; 1: most coarse)",
    )
    parser.add_argument(
        "--no-preprocess",
        action="store_true",
        help="No remeshing before running CoACD. Only suitable for manifold input.",
    )
    parser.add_argument(
        "--preprocess-resolution",
        type=int,
        default=30,
        help="Preprocessing resolution.",
    )

    parser.add_argument(
        "--pca",
        action="store_true",
        help="Use PCA to align input mesh. Suitable for non-axis-aligned mesh.",
    )
    parser.add_argument(
        "--no-merge",
        action="store_true",
        help="If merge is enabled, try to reduce total number of parts by merging.",
    )

    parser.add_argument(
        "--mcts-max-depth", type=int, default=3, help="Maximum depth for MCTS search."
    )
    parser.add_argument(
        "--mcts-nodes", type=int, default=20, help="Number of cut candidates for MCTS."
    )
    parser.add_argument(
        "--mcts_iterations", type=int, default=150, help="Number of MCTS iterations."
    )
    parser.add_argument("--seed", type=int, default=0, help="Random seed.")

    args = parser.parse_args()
    input_file = args.input_file
    output_file = args.output_file

    if not os.path.isfile(input_file):
        print(input_file, "is not a file")
        exit(1)

    if args.quiet:
        sapien.coacd.set_log_level("error")

    engine = sapien.Engine()
    mesh = trimesh.load(input_file)
    geometry = engine.create_mesh_geometry(mesh.vertices, mesh.faces)
    parts = sapien.coacd.run_coacd(
        geometry,
        threshold=args.threshold,
        preprocess=not args.no_preprocess,
        preprocess_resolution=args.preprocess_resolution,
        pca=args.pca,
        merge=not args.no_merge,
        mcts_max_depth=args.mcts_max_depth,
        mcts_nodes=args.mcts_nodes,
        mcts_iterations=args.mcts_iterations,
        seed=args.seed,
    )
    mesh_parts = [
        trimesh.Trimesh(p.vertices, p.indices.reshape((-1, 3))) for p in parts
    ]
    scene = trimesh.Scene()

    np.random.seed(0)
    for p in mesh_parts:
        p.visual.vertex_colors[:, :3] = (np.random.rand(3) * 255).astype(np.uint8)
        scene.add_geometry(p)
    scene.export(output_file)
