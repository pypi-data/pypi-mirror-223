"use strict";(self.webpackChunk_jupyterlab_github=self.webpackChunk_jupyterlab_github||[]).push([[958],{958:(e,t,s)=>{s.r(t),s.d(t,{default:()=>x,gitHubIcon:()=>R});var r=s(4),i=s(172),n=s(580),o=s(237),a=s(154),h=s(663),c=s(901),l=s(987),d=s(1),u=s(790);function p(e,t){return u.ServerConnection.makeRequest(e,{},t).then((e=>200!==e.status?e.json().then((t=>{throw new u.ServerConnection.ResponseError(e,t.message)})):e.json()))}var m=s(282);const b="https://github.com";class _{constructor(e){this._baseUrl="github",this._validUser=!1,this._isDisposed=!1,this._fileChanged=new c.Signal(this),this._serverSettings=u.ServerConnection.makeSettings(),this._fileTypeForPath=t=>{const s=e.getFileTypesForPath(t);return 0===s.length?e.getFileType("text"):s[0]},this.baseUrl=b,this._useProxy=new Promise((e=>{p(l.URLExt.join(this._serverSettings.baseUrl,"github"),this._serverSettings).then((()=>{e(!0)})).catch((()=>{console.warn("The JupyterLab GitHub server extension appears to be missing. If you do not install it with application credentials, you are likely to be rate limited by GitHub very quickly"),e(!1)}))})),this.rateLimitedState=new d.ObservableValue(!1)}get name(){return"GitHub"}get validUser(){return this._validUser}get serverSettings(){return this._serverSettings}get fileChanged(){return this._fileChanged}get isDisposed(){return this._isDisposed}dispose(){this.isDisposed||(this._isDisposed=!0,c.Signal.clearData(this))}get baseUrl(){return this._baseUrl}set baseUrl(e){this._baseUrl=e}get accessToken(){return this._accessToken}set accessToken(e){this._accessToken=e}get(e,t){const s=g(e);if(""===s.user)return this._validUser=!1,Promise.resolve(y.dummyDirectory);if(s.user&&!s.repository)return this._listRepos(s.user);const r=l.URLExt.encodeParts(l.URLExt.join("repos",s.user,s.repository,"contents",s.path));return this._apiRequest(r).then((t=>(this._validUser=!0,!1!==this.rateLimitedState.get()&&this.rateLimitedState.set(!1),y.gitHubContentsToJupyterContents(e,t,this._fileTypeForPath)))).catch((t=>404===t.response.status?(console.warn("GitHub: cannot find org/repo. Perhaps you misspelled something?"),this._validUser=!1,y.dummyDirectory):403===t.response.status&&-1!==t.message.indexOf("rate limit")?(!0!==this.rateLimitedState.get()&&this.rateLimitedState.set(!0),console.error(t.message),Promise.reject(t)):403===t.response.status&&-1!==t.message.indexOf("blob")?(this._validUser=!0,!1!==this.rateLimitedState.get()&&this.rateLimitedState.set(!1),this._getBlob(e)):(console.error(t.message),Promise.reject(t))))}getDownloadUrl(e){const t=g(e);if(!t.user)return Promise.reject("GitHub: no active organization");if(!t.path)return Promise.reject("GitHub: No file selected");const s=l.PathExt.dirname(t.path),r=l.URLExt.encodeParts(l.URLExt.join("repos",t.user,t.repository,"contents",s));return this._apiRequest(r).then((e=>{for(const s of e)if(s.path===t.path)return s.download_url;throw y.makeError(404,`Cannot find file at ${t.path}`)}))}newUntitled(e={}){return Promise.reject("Repository is read only")}delete(e){return Promise.reject("Repository is read only")}rename(e,t){return Promise.reject("Repository is read only")}save(e,t){return Promise.reject("Repository is read only")}copy(e,t){return Promise.reject("Repository is read only")}createCheckpoint(e){return Promise.reject("Repository is read only")}listCheckpoints(e){return Promise.resolve([])}restoreCheckpoint(e,t){return Promise.reject("Repository is read only")}deleteCheckpoint(e,t){return Promise.reject("Read only")}_getBlob(e){let t;const s=g(e),r=l.PathExt.dirname(s.path),i=l.URLExt.encodeParts(l.URLExt.join("repos",s.user,s.repository,"contents",r));return this._apiRequest(i).then((e=>{for(const r of e)if(r.path===s.path)return t=r,r.sha;throw Error("Cannot find sha for blob")})).then((e=>{const t=l.URLExt.encodeParts(l.URLExt.join("repos",s.user,s.repository,"git","blobs",e));return this._apiRequest(t)})).then((s=>(t.content=s.content,y.gitHubContentsToJupyterContents(e,t,this._fileTypeForPath))))}_listRepos(e){const t=l.URLExt.encodeParts(l.URLExt.join("orgs",e,"repos"));return this._apiRequest(t).catch((t=>{if(404===t.response.status)return this._apiRequest("user").then((t=>{let s;return s=t.login===e?"user/repos?type=owner":l.URLExt.encodeParts(l.URLExt.join("users",e,"repos")),this._apiRequest(s)})).catch((t=>{if(401===t.response.status){const t=l.URLExt.encodeParts(l.URLExt.join("users",e,"repos"));return this._apiRequest(t)}throw t}));throw t})).then((e=>(this._validUser=!0,!1!==this.rateLimitedState.get()&&this.rateLimitedState.set(!1),y.reposToDirectory(e)))).catch((e=>(403===e.response.status&&-1!==e.message.indexOf("rate limit")?!0!==this.rateLimitedState.get()&&this.rateLimitedState.set(!0):(console.error(e.message),console.warn("GitHub: cannot find user. Perhaps you misspelled something?"),this._validUser=!1),y.dummyDirectory)))}_apiRequest(e){return this._useProxy.then((t=>{const s=e.split("?"),r=s[0],i=(s[1]||"").split("&"),n={};for(const e of i)if(e){const[t,s]=e.split("=");n[t]=s}let o;return!0===t?(o=l.URLExt.join(this._serverSettings.baseUrl,"github"),this.accessToken&&(n.access_token=this.accessToken)):o="https://api.github.com",r&&(o=l.URLExt.join(o,r)),o+="?"+Object.keys(n).map((e=>`${e}=${n[e]}`)).join("&"),!0===t?p(o,this._serverSettings):(a=o,window.fetch(a).then((e=>200!==e.status?e.json().then((t=>{throw new u.ServerConnection.ResponseError(e,t.message)})):e.json())));var a}))}}function g(e){const t=e.split("/");return{user:t.length>0?t[0]:"",repository:t.length>1?t[1]:"",path:t.length>2?l.URLExt.join(...t.slice(2)):""}}var y;!function(e){function t(e,t){const s=new Response(t,{status:e,statusText:t});return new u.ServerConnection.ResponseError(s,t)}e.dummyDirectory={type:"directory",path:"",name:"",format:"json",content:[],created:"",writable:!1,last_modified:"",mimetype:""},e.gitHubContentsToJupyterContents=function s(r,i,n){if(Array.isArray(i))return{name:l.PathExt.basename(r),path:r,format:"json",type:"directory",writable:!1,created:"",last_modified:"",mimetype:"",content:i.map((e=>s(l.PathExt.join(r,e.name),e,n)))};if("file"===i.type||"symlink"===i.type){const t=n(r),s=i.content;let o;switch(t.fileFormat){case"text":o=void 0!==s?e.b64DecodeUTF8(s):null;break;case"base64":o=void 0!==s?s:null;break;case"json":o=void 0!==s?JSON.parse(e.b64DecodeUTF8(s)):null;break;default:throw new Error(`Unexpected file format: ${t.fileFormat}`)}return{name:l.PathExt.basename(r),path:r,format:t.fileFormat,type:"file",created:"",writable:!1,last_modified:"",mimetype:t.mimeTypes[0],content:o}}if("dir"===i.type)return{name:l.PathExt.basename(r),path:r,format:"json",type:"directory",created:"",writable:!1,last_modified:"",mimetype:"",content:null};throw"submodule"===i.type?t(400,`Cannot open "${i.name}" because it is a submodule`):t(500,`"${i.name}" has and unexpected type: ${i.type}`)},e.reposToDirectory=function(e){return{name:"",path:"",format:"json",type:"directory",created:"",last_modified:"",writable:!1,mimetype:"",content:e.map((e=>({name:e.name,path:e.full_name,format:"json",type:"directory",created:"",writable:!1,last_modified:"",mimetype:"",content:null})))}},e.makeError=t;const s=new TextDecoder("utf8");e.b64DecodeUTF8=function(e){const t=m.toByteArray(e.replace(/\n/g,""));return s.decode(t)}}(y||(y={}));var w=s(697),v=s(778);const f="jp-MyBinderButton-disabled";class P extends v.Widget{constructor(e,t){super(),this._errorPanel=null,this._binderActive=!1,this._changeGuard=!1,this.addClass("jp-GitHubBrowser"),this.layout=new v.PanelLayout,this.layout.addWidget(e),this._browser=e,this._drive=t,this.userName=new C,this.userName.node.title="Click to edit user/organization",this._browser.toolbar.addItem("user",this.userName),this.userName.nameChanged.connect(this._onUserChanged,this),this._openGitHubButton=new i.ToolbarButton({onClick:()=>{let e=this._drive.baseUrl;if(!this._drive.validUser)return void window.open(e);const t=g(this._browser.model.manager.services.contents.localPath(this._browser.model.path));e=l.URLExt.join(e,t.user),t.repository&&(e=l.URLExt.join(e,t.repository,"tree","master",t.path)),window.open(e)},iconClass:"jp-GitHub-icon jp-Icon jp-Icon-16",tooltip:"Open this repository on GitHub"}),this._openGitHubButton.addClass("jp-GitHub-toolbar-item"),this._browser.toolbar.addItem("GitHub",this._openGitHubButton),this._launchBinderButton=new i.ToolbarButton({onClick:()=>{if(!this._binderActive)return;const e=g(this._browser.model.manager.services.contents.localPath(this._browser.model.path)),t=l.URLExt.join("https://mybinder.org/v2/gh",e.user,e.repository,"master"),s=l.URLExt.join("lab","tree",e.path);window.open(t+`?urlpath=${s}`)},tooltip:"Launch this repository on mybinder.org",iconClass:"jp-MyBinderButton jp-Icon jp-Icon-16"}),this._launchBinderButton.addClass("jp-GitHub-toolbar-item"),this._browser.toolbar.addItem("binder",this._launchBinderButton);const s=new i.ToolbarButton({icon:n.refreshIcon,onClick:()=>{this._browser.model.refresh()},tooltip:"Refresh File List"});s.addClass("jp-GitHub-toolbar-item"),this._browser.toolbar.addItem("gh-refresher",s),this._browser.model.pathChanged.connect(this._onPathChanged,this),this._onPathChanged(),this._drive.rateLimitedState.changed.connect(this._updateErrorPanel,this)}_onUserChanged(){this._changeGuard||(this._changeGuard=!0,this._browser.model.cd(`/${this.userName.name}`).then((()=>{this._changeGuard=!1,this._updateErrorPanel(),document.activeElement===document.body&&this._browser.layout.widgets[1].node.focus()})))}_onPathChanged(){const e=g(this._browser.model.manager.services.contents.localPath(this._browser.model.path));return this._changeGuard||(this._changeGuard=!0,this.userName.name=e.user,this._changeGuard=!1,this._updateErrorPanel()),this._drive.validUser&&e.repository?""===e.path?(0,w.find)(this._browser.model.items(),(e=>"requirements.txt"===e.name||"environment.yml"===e.name||"apt.txt"===e.name||"REQUIRE"===e.name||"Dockerfile"===e.name||"binder"===e.name&&"directory"===e.type))?(this._launchBinderButton.removeClass(f),void(this._binderActive=!0)):(this._launchBinderButton.addClass(f),void(this._binderActive=!1)):void 0:(this._launchBinderButton.addClass(f),void(this._binderActive=!1))}_updateErrorPanel(){const e=g(this._browser.model.manager.services.contents.localPath(this._browser.model.path)),t=this._drive.rateLimitedState.get(),s=this._drive.validUser;if(this._errorPanel&&(this._browser.layout.widgets[1].node.removeChild(this._errorPanel.node),this._errorPanel.dispose(),this._errorPanel=null),t)this._errorPanel=new j("You have been rate limited by GitHub! You will need to wait about an hour before continuing"),this._browser.layout.widgets[1].node.appendChild(this._errorPanel.node);else if(s);else{const t=e.user?`"${e.user}" appears to be an invalid user name!`:"Please enter a GitHub user name";this._errorPanel=new j(t),this._browser.layout.widgets[1].node.appendChild(this._errorPanel.node)}}}class C extends v.Widget{constructor(){super(),this._name="",this._nameChanged=new c.Signal(this),this.addClass("jp-GitHubUserInput");const e=this.layout=new v.PanelLayout,t=new v.Widget;t.addClass("jp-GitHubUserInput-wrapper"),this._input=document.createElement("input"),this._input.placeholder="GitHub User",this._input.className="jp-GitHubUserInput-input",t.node.appendChild(this._input),e.addWidget(t)}get name(){return this._name}set name(e){if(e===this._name)return;const t=this._name;this._name=e,this._input.value=e,this._nameChanged.emit({oldValue:t,newValue:e})}get nameChanged(){return this._nameChanged}handleEvent(e){switch(e.type){case"keydown":13===e.keyCode&&(e.stopPropagation(),e.preventDefault(),this.name=this._input.value,this._input.blur());break;case"blur":e.stopPropagation(),e.preventDefault(),this.name=this._input.value;break;case"focus":e.stopPropagation(),e.preventDefault(),this._input.select()}}onAfterAttach(e){this._input.addEventListener("keydown",this),this._input.addEventListener("blur",this),this._input.addEventListener("focus",this)}onBeforeDetach(e){this._input.removeEventListener("keydown",this),this._input.removeEventListener("blur",this),this._input.removeEventListener("focus",this)}}class j extends v.Widget{constructor(e){super(),this.addClass("jp-GitHubErrorPanel");const t=document.createElement("div"),s=document.createElement("div");t.className="jp-GitHubErrorImage",s.className="jp-GitHubErrorText",s.textContent=e,this.node.appendChild(t),this.node.appendChild(s)}}const E="github-filebrowser",U="@jupyterlab/github:drive",R=new n.LabIcon({name:`${E}:icon`,svgstr:'<svg width="16" height="16" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg">\n   <g>\n      <path id="path2" fill="#616161" fill-rule="evenodd" d="m8,0c-4.42,0 -8,3.58 -8,8c0,3.54 2.29,6.53 5.47,7.59c0.4,0.07 0.55,-0.17 0.55,-0.38c0,-0.19 -0.01,-0.82 -0.01,-1.49c-2.01,0.37 -2.53,-0.49 -2.69,-0.94c-0.09,-0.23 -0.48,-0.94 -0.82,-1.13c-0.28,-0.15 -0.68,-0.52 -0.01,-0.53c0.63,-0.01 1.08,0.58 1.23,0.82c0.72,1.21 1.87,0.87 2.33,0.66c0.07,-0.52 0.28,-0.87 0.51,-1.07c-1.78,-0.2 -3.64,-0.89 -3.64,-3.95c0,-0.87 0.31,-1.59 0.82,-2.15c-0.08,-0.2 -0.36,-1.02 0.08,-2.12c0,0 0.67,-0.21 2.2,0.82c0.64,-0.18 1.32,-0.27 2,-0.27c0.68,0 1.36,0.09 2,0.27c1.53,-1.04 2.2,-0.82 2.2,-0.82c0.44,1.1 0.16,1.92 0.08,2.12c0.51,0.56 0.82,1.27 0.82,2.15c0,3.07 -1.87,3.75 -3.65,3.95c0.29,0.25 0.54,0.73 0.54,1.48c0,1.07 -0.01,1.93 -0.01,2.2c0,0.21 0.15,0.46 0.55,0.38a8.013,8.013 0 0 0 5.45,-7.59c0,-4.42 -3.58,-8 -8,-8z" />\n   </g>\n</svg>'}),x={id:U,requires:[o.IDocumentManager,a.IFileBrowserFactory,h.ISettingRegistry],optional:[r.ILayoutRestorer],activate:function(e,t,s,r,i){const n=new _(e.docRegistry);t.services.contents.addDrive(n);const o=s.createFileBrowser(E,{driveName:n.name,refreshInterval:3e5}),a=new P(o,n);a.title.icon=R,a.title.iconClass="jp-SideBar-tabIcon",a.title.caption="Browse GitHub",a.id="github-file-browser",i&&i.add(a,E),e.shell.add(a,"left",{rank:102});let h=!1;const c=async e=>{const t=e.get("baseUrl").composite,s=e.get("accessToken").composite;if(n.baseUrl=t||b,s){let t=!0;h&&(t=await L.showWarning()),t?n.accessToken=s:e.remove("accessToken")}else n.accessToken=null};Promise.all([r.load(U),e.restored]).then((([e])=>{e.changed.connect(c),c(e),h=!0;const t=e.get("defaultRepo").composite;t&&o.model.restored.then((()=>{o.model.cd(`/${t}`)}))})).catch((e=>{console.error(e.message)}))},autoStart:!0};var L;!function(e){e.showWarning=async function(){return(0,i.showDialog)({title:"Security Alert!",body:"Adding a client side access token can pose a security risk! Please consider using the server extension instead.Do you want to continue?",buttons:[i.Dialog.cancelButton({label:"CANCEL"}),i.Dialog.warnButton({label:"PROCEED"})]}).then((e=>!!e.button.accept))}}(L||(L={}))}}]);