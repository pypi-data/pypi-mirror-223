{"version":3,"file":"static/js/333.d48b1b99.chunk.js","mappings":"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","sources":["../../core/src/instance/InstanceConcurrency.tsx","../../core/src/nav/InstanceWarningIcon.tsx","../../core/src/nav/WorkspaceStatus.tsx","../../core/src/instance/InstanceTabs.tsx","../../core/src/ui/TabLink.tsx","../../ui/src/components/Tabs.tsx"],"sourcesContent":["import {gql, useQuery, useMutation} from '@apollo/client';\nimport {\n  PageHeader,\n  Heading,\n  Box,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Mono,\n  Popover,\n  Spinner,\n  ButtonLink,\n  Table,\n  Tag,\n  TextInput,\n  Button,\n  NonIdealState,\n  Page,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {doneStatuses} from '../runs/RunStatuses';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {RunTableRunFragment} from '../runs/types/RunTable.types';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  ConcurrencyLimitFragment,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  FreeConcurrencySlotsForRunMutation,\n  FreeConcurrencySlotsForRunMutationVariables,\n} from './types/InstanceConcurrency.types';\n\nconst RUNS_LIMIT = 25;\n\nconst InstanceConcurrencyPage = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  const content = data ? (\n    flagInstanceConcurrencyLimits ? (\n      <ConcurrencyLimits\n        instanceConfig={data.instance.info}\n        limits={data.instance.concurrencyLimits}\n        hasSupport={data.instance.supportsConcurrencyLimits}\n        refetch={queryResult.refetch}\n      />\n    ) : (\n      <Redirect to=\"/config\" />\n    )\n  ) : (\n    <Box padding={{vertical: 64}}>\n      <Spinner purpose=\"section\" />\n    </Box>\n  );\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" refreshState={refreshState} />}\n      />\n      {content}\n    </Page>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nexport const ConcurrencyLimits: React.FC<{\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n}> = ({instanceConfig, hasSupport, limits, refetch}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const [selectedRuns, setSelectedRuns] = React.useState<string[] | undefined>(undefined);\n  const [selectedKey, setSelectedKey] = React.useState<string | undefined>(undefined);\n  const onRunsDialogClose = React.useCallback(() => {\n    setSelectedRuns(undefined);\n    setSelectedKey(undefined);\n  }, [setSelectedKey, setSelectedRuns]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not support global concurrency limits. You will need to ' +\n            'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n            'feature.'\n          }\n        />\n      </Box>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not currently support global concurrency limits. You may need to ' +\n            'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n            'to support this feature.'\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box>\n        <Box flex={{justifyContent: 'flex-end'}} padding={16}>\n          <Button intent=\"primary\" icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n            Add concurrency limit\n          </Button>\n        </Box>\n        {limits.length === 0 ? (\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        ) : (\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: '260px'}}>Concurrency key</th>\n                <th style={{width: '20%'}}>Occupied slots</th>\n                <th style={{width: '20%'}}>Total slots</th>\n                <th>Active runs</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {limits.map((limit) => (\n                <tr key={limit.concurrencyKey}>\n                  <td>{limit.concurrencyKey}</td>\n                  <td>{limit.activeSlotCount}</td>\n                  <td>{limit.slotCount}</td>\n                  <td>\n                    {limit.activeRunIds.length === 0 ? (\n                      <>&mdash;</>\n                    ) : (\n                      <Tag intent=\"primary\" interactive>\n                        <ButtonLink\n                          onClick={() => {\n                            setSelectedKey(limit.concurrencyKey);\n                            setSelectedRuns(limit.activeRunIds);\n                          }}\n                        >\n                          {limit.activeRunIds.length}{' '}\n                          {limit.activeRunIds.length === 1 ? 'run' : 'runs'}\n                        </ButtonLink>\n                      </Tag>\n                    )}\n                  </td>\n                  <td>\n                    <ConcurrencyLimitActionMenu\n                      concurrencyKey={limit.concurrencyKey}\n                      onEdit={onEdit}\n                      onDelete={onDelete}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Box>\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n      />\n      <ConcurrencyRunsDialog\n        title={\n          <span>\n            Active runs for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onRunsDialogClose}\n        runIds={selectedRuns}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitActionMenu: React.FC<{\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}> = ({concurrencyKey, onDelete, onEdit}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (concurrencyLimit?: string) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value > 0 && value < 1000;\n};\n\nconst AddConcurrencyLimitDialog: React.FC<{\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={!isValidLimit(limitInput.trim()) || !keyInput || isSubmitting}\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button intent=\"primary\" onClick={save} disabled={!isValidLimit(limitInput.trim())}>\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: 0},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyRunsDialog: React.FC<{\n  runIds?: string[];\n  title: string | React.ReactNode;\n  onClose: () => void;\n}> = ({runIds, onClose, title}) => {\n  const {data} = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          runIds: runIds || [],\n        },\n      },\n      skip: !runIds || !runIds.length,\n    },\n  );\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsForRunMutation,\n    FreeConcurrencySlotsForRunMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION);\n\n  const freeSlotsActionMenuItem = React.useCallback(\n    (run: RunTableRunFragment) => {\n      return doneStatuses.has(run.status)\n        ? [\n            <MenuItem\n              key=\"free-concurrency-slots\"\n              icon=\"status\"\n              text=\"Free concurrency slots for run\"\n              onClick={async () => {\n                const resp = await freeSlots({variables: {runId: run.id}});\n                if (resp.data?.freeConcurrencySlotsForRun) {\n                  await showSharedToaster({\n                    intent: 'success',\n                    icon: 'copy_to_clipboard_done',\n                    message: 'Freed concurrency slots',\n                  });\n                }\n                onClose();\n              }}\n            />,\n          ]\n        : [];\n    },\n    [freeSlots, onClose],\n  );\n\n  return (\n    <Dialog\n      isOpen={!!runIds && runIds.length > 0}\n      title={title}\n      onClose={onClose}\n      style={{width: '60%', minWidth: '400px'}}\n    >\n      <Box padding={{vertical: 16}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : data.pipelineRunsOrError.__typename === 'Runs' ? (\n          <RunTable\n            runs={data.pipelineRunsOrError.results}\n            additionalActionsForRun={freeSlotsActionMenuItem}\n          />\n        ) : (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"error\"\n              title=\"Query Error\"\n              description={\n                data.pipelineRunsOrError.__typename === 'PythonError'\n                  ? data.pipelineRunsOrError.message\n                  : 'There was a problem querying for these runs.'\n              }\n            />\n            ;\n          </Box>\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    activeRunIds\n    activeSlotCount\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION = gql`\n  mutation FreeConcurrencySlotsForRun($runId: String!) {\n    freeConcurrencySlotsForRun(runId: $runId)\n  }\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus: React.FC<{placeholder: boolean}> = React.memo(({placeholder}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig && flagInstanceConcurrencyLimits ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, disabled, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={disabled ? '#' : to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n","import * as React from 'react';\nimport styled, {css} from 'styled-components/macro';\n\nimport {Colors} from './Colors';\nimport {IconWrapper} from './Icon';\nimport {FontFamily} from './styles';\n\nexport interface TabStyleProps {\n  disabled?: boolean;\n  selected?: boolean;\n  count?: number | 'indeterminate' | null;\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n  $size?: 'small' | 'large';\n}\n\nexport const getTabA11yProps = (props: {selected?: boolean; disabled?: boolean}) => {\n  const {selected, disabled} = props;\n  return {\n    role: 'tab',\n    tabIndex: disabled ? -1 : 0,\n    'aria-disabled': disabled,\n    'aria-expanded': selected,\n    'aria-selected': selected,\n  };\n};\n\nexport const getTabContent = (props: TabStyleProps & {title?: React.ReactNode}) => {\n  const {title, count, icon} = props;\n  return (\n    <>\n      {title}\n      {icon}\n      {count !== undefined ? <Count>{count === 'indeterminate' ? '–' : count}</Count> : null}\n    </>\n  );\n};\n\nconst Count = styled.div`\n  display: inline;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: -0.02%;\n  padding: 0 4px;\n  color: ${Colors.Gray900};\n  background: ${Colors.Gray100};\n`;\n\nexport const tabCSS = css<TabStyleProps>`\n  background: none;\n  border: none;\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 600;\n  padding: ${({$size}) => ($size === 'small' ? '10px 0' : '16px 0')};\n  box-shadow: ${({selected}) => (selected ? Colors.Blue500 : 'transparent')} 0 -2px 0 inset;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  gap: 6px;\n\n  &,\n  & a {\n    cursor: pointer;\n    user-select: none;\n    color: ${({selected, disabled}) =>\n      selected ? Colors.Blue500 : disabled ? Colors.Gray300 : Colors.Gray700};\n  }\n\n  & ${IconWrapper} {\n    background: ${({selected, disabled}) =>\n      selected ? Colors.Blue500 : disabled ? Colors.Gray300 : ''};\n  }\n\n  /* Focus outline only when using keyboard, not when focusing via mouse. */\n  &:focus {\n    outline: none !important;\n    box-shadow: ${({selected, disabled}) =>\n        selected ? Colors.Blue500 : disabled ? 'transparent' : Colors.Blue200}\n      0 -2px 0 inset;\n  }\n\n  &:hover {\n    &,\n    a {\n      text-decoration: none;\n      color: ${({selected, disabled}) =>\n        selected ? Colors.Blue700 : disabled ? Colors.Gray300 : Colors.Blue700};\n    }\n    ${IconWrapper} {\n      color: ${({selected, disabled}) =>\n        selected ? Colors.Blue700 : disabled ? Colors.Gray300 : ''};\n    }\n  }\n`;\n\ninterface TabProps extends TabStyleProps, Omit<React.ComponentPropsWithoutRef<'button'>, 'title'> {}\n\nexport const Tab = styled((props: TabProps) => {\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof props.title === 'string' ? props.title : undefined;\n\n  return (\n    <button {...props} {...containerProps} title={titleText} type=\"button\">\n      {content}\n    </button>\n  );\n})<TabStyleProps>`\n  ${tabCSS}\n`;\n\ninterface TabsProps {\n  children: Array<React.ReactElement<TabProps>>;\n  selectedTabId?: string;\n  onChange?: (selectedTabId: string) => void;\n  size?: 'small' | 'large';\n}\n\nexport const Tabs = styled(({selectedTabId, children, onChange, size = 'large', ...rest}) => {\n  return (\n    <div {...rest} role=\"tablist\">\n      {React.Children.map(children, (child) =>\n        child\n          ? React.cloneElement(child, {\n              selected: child.props.selected || child.props.id === selectedTabId,\n              $size: size,\n              ...(onChange\n                ? {\n                    onClick: () => onChange(child.props.id),\n                  }\n                : {}),\n            })\n          : null,\n      )}\n    </div>\n  );\n})<TabsProps>`\n  display: flex;\n  gap: 16px;\n  font-size: ${({size}) => (size === 'small' ? '12px' : '14px')};\n  line-height: ${({size}) => (size === 'small' ? '16px' : '20px')};\n  font-weight: 600;\n`;\n"],"names":["InstanceConcurrencyPage","React","useTrackPageView","useDocumentTitle","flagInstanceConcurrencyLimits","useFeatureFlags","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","content","_jsx","ConcurrencyLimits","instanceConfig","instance","info","limits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","Redirect","to","Box","padding","vertical","children","Spinner","purpose","_jsxs","Page","PageHeader","title","Heading","tabs","InstanceTabs","tab","_ref","_React$useState","_React$useState2","_slicedToArray","action","setAction","_React$useState3","undefined","_React$useState4","selectedRuns","setSelectedRuns","_React$useState5","_React$useState6","selectedKey","setSelectedKey","onRunsDialogClose","limitsByKey","Object","fromEntries","map","_ref2","concurrencyKey","slotCount","onAdd","actionType","onEdit","concurrencyLimit","onDelete","includes","margin","NonIdealState","icon","description","_Fragment","flex","justifyContent","Button","intent","Icon","name","onClick","length","ButtonLink","Table","style","width","limit","activeSlotCount","activeRunIds","Tag","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyRunsDialog","runIds","_ref3","Popover","Menu","MenuItem","text","position","isValidLimit","value","parseInt","isNaN","String","trim","_ref4","_React$useState7","_React$useState8","isSubmitting","setIsSubmitting","_React$useState9","_React$useState10","limitInput","setLimitInput","_React$useState11","_React$useState12","keyInput","setKeyInput","_useMutation","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","setConcurrencyLimit","save","_ref5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","variables","stop","apply","arguments","Dialog","isOpen","DialogBody","bottom","TextInput","onChange","e","target","placeholder","DialogFooter","disabled","_ref6","_React$useState13","_React$useState14","_React$useState15","_React$useState16","_useMutation3","_ref7","_callee2","_context2","Mono","_ref8","_React$useState17","_React$useState18","_useMutation5","_ref9","_callee3","_context3","_ref10","RUNS_FOR_CONCURRENCY_KEY_QUERY","filter","skip","_useMutation7","FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION","freeSlots","freeSlotsActionMenuItem","run","doneStatuses","status","_callee4","_resp$data","resp","_context4","runId","id","sent","freeConcurrencySlotsForRun","showSharedToaster","message","minWidth","pipelineRunsOrError","__typename","RunTable","runs","results","additionalActionsForRun","CONCURRENCY_LIMIT_FRAGMENT","gql","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","InstanceWarningIcon","daemons","DeploymentStatusContext","WarningTooltip","modifiers","offset","enabled","options","color","Colors","WorkspaceStatus","codeLocations","type","Tooltip","placement","fillColor","props","healthTitle","canSeeConfig","useCanSeeConfig","direction","alignItems","Tabs","selectedTabId","TabLink","QueryRefreshCountdown","styled","rest","_objectWithoutProperties","_excluded","containerProps","getTabA11yProps","getTabContent","titleText","Link","_objectSpread","withConfig","displayName","componentId","tabCSS","selected","role","tabIndex","count","Count","FontFamily","css","$size","IconWrapper","Tab","_ref8$size","size","child"],"sourceRoot":""}