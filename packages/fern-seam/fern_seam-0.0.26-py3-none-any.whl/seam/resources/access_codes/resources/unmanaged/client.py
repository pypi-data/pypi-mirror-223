# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from .....environment import SeamEnvironment
from .....errors.bad_request_error import BadRequestError
from .....errors.unauthorized_error import UnauthorizedError
from .....types.access_codes_unmanaged_convert_to_managed_response import AccessCodesUnmanagedConvertToManagedResponse
from .....types.access_codes_unmanaged_delete_response import AccessCodesUnmanagedDeleteResponse
from .....types.access_codes_unmanaged_get_response import AccessCodesUnmanagedGetResponse
from .....types.access_codes_unmanaged_list_response import AccessCodesUnmanagedListResponse
from .....types.access_codes_unmanaged_update_response import AccessCodesUnmanagedUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UnmanagedClient:
    def __init__(self, *, environment: SeamEnvironment = SeamEnvironment.DEFAULT, client_wrapper: SyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def convert_to_managed(
        self, *, access_code_id: str, force: typing.Optional[bool] = OMIT, sync: typing.Optional[bool] = OMIT
    ) -> AccessCodesUnmanagedConvertToManagedResponse:
        """
        Parameters:
            - access_code_id: str.

            - force: typing.Optional[bool].

            - sync: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if force is not OMIT:
            _request["force"] = force
        if sync is not OMIT:
            _request["sync"] = sync
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/convert_to_managed"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedConvertToManagedResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, *, access_code_id: str, sync: typing.Optional[bool] = OMIT) -> AccessCodesUnmanagedDeleteResponse:
        """
        Parameters:
            - access_code_id: str.

            - sync: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if sync is not OMIT:
            _request["sync"] = sync
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/delete"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        *,
        device_id: typing.Optional[str] = OMIT,
        access_code_id: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
    ) -> AccessCodesUnmanagedGetResponse:
        """
        Parameters:
            - device_id: typing.Optional[str].

            - access_code_id: typing.Optional[str].

            - code: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if device_id is not OMIT:
            _request["device_id"] = device_id
        if access_code_id is not OMIT:
            _request["access_code_id"] = access_code_id
        if code is not OMIT:
            _request["code"] = code
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/get"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedGetResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self, *, device_id: str) -> AccessCodesUnmanagedListResponse:
        """
        Parameters:
            - device_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/list"),
            json=jsonable_encoder({"device_id": device_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, *, access_code_id: str, is_managed: bool, force: typing.Optional[bool] = OMIT
    ) -> AccessCodesUnmanagedUpdateResponse:
        """
        Parameters:
            - access_code_id: str.

            - is_managed: bool.

            - force: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id, "is_managed": is_managed}
        if force is not OMIT:
            _request["force"] = force
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/update"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUnmanagedClient:
    def __init__(self, *, environment: SeamEnvironment = SeamEnvironment.DEFAULT, client_wrapper: AsyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def convert_to_managed(
        self, *, access_code_id: str, force: typing.Optional[bool] = OMIT, sync: typing.Optional[bool] = OMIT
    ) -> AccessCodesUnmanagedConvertToManagedResponse:
        """
        Parameters:
            - access_code_id: str.

            - force: typing.Optional[bool].

            - sync: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if force is not OMIT:
            _request["force"] = force
        if sync is not OMIT:
            _request["sync"] = sync
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/convert_to_managed"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedConvertToManagedResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, *, access_code_id: str, sync: typing.Optional[bool] = OMIT
    ) -> AccessCodesUnmanagedDeleteResponse:
        """
        Parameters:
            - access_code_id: str.

            - sync: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if sync is not OMIT:
            _request["sync"] = sync
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/delete"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        *,
        device_id: typing.Optional[str] = OMIT,
        access_code_id: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
    ) -> AccessCodesUnmanagedGetResponse:
        """
        Parameters:
            - device_id: typing.Optional[str].

            - access_code_id: typing.Optional[str].

            - code: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if device_id is not OMIT:
            _request["device_id"] = device_id
        if access_code_id is not OMIT:
            _request["access_code_id"] = access_code_id
        if code is not OMIT:
            _request["code"] = code
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/get"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedGetResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self, *, device_id: str) -> AccessCodesUnmanagedListResponse:
        """
        Parameters:
            - device_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/list"),
            json=jsonable_encoder({"device_id": device_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, *, access_code_id: str, is_managed: bool, force: typing.Optional[bool] = OMIT
    ) -> AccessCodesUnmanagedUpdateResponse:
        """
        Parameters:
            - access_code_id: str.

            - is_managed: bool.

            - force: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id, "is_managed": is_managed}
        if force is not OMIT:
            _request["force"] = force
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/unmanaged/update"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUnmanagedUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
