{"version":3,"sources":["BtnGroup.tsx","webpack:///./src/index.tsx?d986"],"names":["engine","Styletron","BtnGroup","props","_props$args","args","key","group_style","return_value","mode","disabled","theme","div_id","div_style","custom_fontawesome_url","additionalHeight","_ref","buttons","_useState","useState","_useState2","_slicedToArray","selectedValues","setSelectedValues","handleClick","event","index","value","toString","idx","indexOf","splice","push","_toConsumableArray","includes","useEffect","Streamlit","setComponentValue","wrapperRef","useRef","current","height","offsetHeight","setFrameHeight","React","createElement","Fragment","Helmet","src","crossOrigin","id","StyletronProvider","ThemeProvider","DarkTheme","LightTheme","style","ref","StatefulButtonGroup","MODE","undefined","initialState","selected","shape","size","onClick","eval","overrides","Root","map","button","buttonClass","merge_buttons","length","display_divider","Button","className","kind","startEnhancer","dangerouslySetInnerHTML","__html","endEnhancer","label","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.875c4a3c.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { Button } from \"baseui/button\";\r\nimport {\r\n  StatefulButtonGroup,\r\n  MODE,\r\n} from \"baseui/button-group\";\r\nimport { Client as Styletron } from \"styletron-engine-atomic\";\r\nimport { Provider as StyletronProvider } from \"styletron-react\";\r\nimport { LightTheme, DarkTheme } from \"baseui\";\r\nimport { ThemeProvider } from \"baseui\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\n\r\ntype ButtonProps = {\r\n  label: string;\r\n  disabled?: boolean;\r\n  kind?: \"primary\" | \"secondary\" | \"tertiary\";\r\n  size?: string;\r\n  shape?: string;\r\n  value?: string;\r\n  overrides?: any;\r\n \r\n  startEnhancer?: string;\r\n  endEnhancer?: string;\r\n  onClick?: string;\r\n  style?: React.CSSProperties;\r\n\r\n};\r\n\r\n\r\nconst engine = new Styletron();\r\n\r\nconst BtnGroup = (props: ComponentProps) => {\r\n  const {\r\n    key,\r\n    group_style,\r\n    return_value,\r\n    mode,\r\n    disabled,\r\n    theme,\r\n    div_id,\r\n    div_style,\r\n    custom_fontawesome_url,\r\n    additionalHeight\r\n  } = props.args;\r\n\r\n  const { buttons } = props.args as { buttons: ButtonProps[] };\r\n\r\n const [selectedValues, setSelectedValues] = useState<string[]>([]);\r\n\r\n const handleClick = (\r\n  event: React.SyntheticEvent<HTMLButtonElement, Event>,\r\n  index: number,\r\n  value: string\r\n) => {\r\n  // Use the index as the value if the value is not defined or is an empty string\r\n  value = value || value === \"\" ? index.toString() : value;\r\n\r\n  if (mode === \"checkbox\") {\r\n    const idx = selectedValues.indexOf(value);\r\n    if (idx !== -1) {\r\n      selectedValues.splice(idx, 1);\r\n    } else {\r\n      selectedValues.push(value);\r\n    }\r\n    setSelectedValues([...selectedValues]);\r\n  } else if (mode === \"radio\") {\r\n    setSelectedValues([value]);\r\n  } else {\r\n    // Normal button mode\r\n    if (selectedValues.includes(value)) {\r\n      setSelectedValues([]);\r\n    } else {\r\n      setSelectedValues([value]);\r\n    }\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  if (return_value) {\r\n    Streamlit.setComponentValue(selectedValues);\r\n  }\r\n}, [selectedValues, return_value]);\r\n\r\n\r\n  // Create a ref for the button group wrapper\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (wrapperRef.current) {\r\n      // Measure the height of the wrapper\r\n      const height = wrapperRef.current.offsetHeight + 1 + additionalHeight;\r\n\r\n      // Set the iframe height to the height of the wrapper\r\n      Streamlit.setFrameHeight(height);\r\n    }\r\n  }, [wrapperRef]);\r\n\r\n\r\n  return (\r\n    <>\r\n  <Helmet>\r\n  <script src={custom_fontawesome_url} crossOrigin=\"anonymous\" id=\"font-awesome-icons\"></script> \r\n  <style>{`\r\n    .first-button {\r\n      border-top-right-radius: 0;\r\n      border-bottom-right-radius: 0;\r\n      margin-right: -1px;\r\n    }\r\n    .middle-button {\r\n      border-radius: 0;\r\n      margin-right: 0;\r\n    }\r\n    .middle-button.merge-dividers {\r\n      border-right: 1px solid #ccc;\r\n      border-left: 1px solid #ccc;\r\n    }\r\n    .last-button {\r\n      border-top-left-radius: 0;\r\n      border-bottom-left-radius: 0;\r\n      margin-left: 0;\r\n    }\r\n  `}</style>\r\n</Helmet>\r\n      <StyletronProvider value={engine}>\r\n        <ThemeProvider theme={theme === \"dark\" ? DarkTheme : LightTheme}>\r\n          <div id={div_id} style={div_style} ref={wrapperRef}>\r\n            <StatefulButtonGroup\r\n              key={key}\r\n              mode={\r\n                mode === \"checkbox\" || mode === \"radio\"\r\n                  ? MODE[mode as keyof typeof MODE]\r\n                  : undefined\r\n              }\r\n              initialState={{ selected: [] }}\r\n              shape={props.args.shape || \"default\"}\r\n              size={props.args.size || \"default\"}\r\n              onClick={(event, index) => {\r\n                handleClick(event, index, buttons[index].value || \"\");\r\n                if (buttons[index].onClick) {\r\n                  eval(buttons[index].onClick || \"\");\r\n                }\r\n              }}\r\n              overrides={{\r\n                Root: {\r\n                  style: group_style,\r\n                },\r\n              }}\r\n            >\r\n              \r\n{buttons.map((button, index) => {\r\n  let buttonClass = '';\r\n  if (props.args.merge_buttons) {\r\n    if (index === 0) {\r\n      buttonClass = 'first-button';\r\n    } else if (index === buttons.length - 1) {\r\n      buttonClass = 'last-button';\r\n    } else {\r\n      buttonClass = 'middle-button';\r\n      if (props.args.display_divider) {\r\n        buttonClass += ' merge-dividers';\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <Button\r\n      key={key + \"_\" + index}\r\n      className={buttonClass}\r\n      disabled={button.disabled || disabled}\r\n      kind={button.kind || props.args.kind}\r\n      startEnhancer={() => (\r\n        <>\r\n          {button.startEnhancer && (\r\n            <span dangerouslySetInnerHTML={{ __html: button.startEnhancer }} />\r\n          )}\r\n        </>\r\n      )}\r\n      endEnhancer={() => (\r\n        <>\r\n          {button.endEnhancer && (\r\n            <span dangerouslySetInnerHTML={{ __html: button.endEnhancer }} />\r\n          )}\r\n        </>\r\n      )}\r\n      style={button.style}\r\n    >\r\n      <span dangerouslySetInnerHTML={{ __html: button.label }} />\r\n    </Button>\r\n  );\r\n})}\r\n            </StatefulButtonGroup>\r\n          </div>\r\n        </ThemeProvider>\r\n      </StyletronProvider>\r\n    </>\r\n  );\r\n};\r\nexport default withStreamlitConnection(BtnGroup);","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport BtnGroup from \"./BtnGroup\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BtnGroup />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}