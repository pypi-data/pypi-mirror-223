# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.03-sp1
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class CreateContainerReplicationJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'replication_target_name': 'str',
        'display_name': 'str',
        'auth_url': 'str',
        'auth_token': 'str',
        'src_bucket': 'str',
        'dst_bucket': 'str',
        'apply_delete': 'bool',
        'create_remote_container': 'bool'
    }

    attribute_map = {
        'replication_target_name': 'replicationTargetName',
        'display_name': 'displayName',
        'auth_url': 'authUrl',
        'auth_token': 'authToken',
        'src_bucket': 'srcBucket',
        'dst_bucket': 'dstBucket',
        'apply_delete': 'applyDelete',
        'create_remote_container': 'createRemoteContainer'
    }

    def __init__(self, replication_target_name=None, display_name=None, auth_url=None, auth_token=None, src_bucket=None, dst_bucket=None, apply_delete=None, create_remote_container=None, _configuration=None):  # noqa: E501
        """CreateContainerReplicationJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._replication_target_name = None
        self._display_name = None
        self._auth_url = None
        self._auth_token = None
        self._src_bucket = None
        self._dst_bucket = None
        self._apply_delete = None
        self._create_remote_container = None
        self.discriminator = None

        self.replication_target_name = replication_target_name
        self.display_name = display_name
        self.auth_url = auth_url
        self.auth_token = auth_token
        self.src_bucket = src_bucket
        self.dst_bucket = dst_bucket
        self.apply_delete = apply_delete
        self.create_remote_container = create_remote_container

    @property
    def replication_target_name(self):
        """Gets the replication_target_name of this CreateContainerReplicationJob.  # noqa: E501

        Remote Object Storage Endpoint ext-name. Destination must be of the same account as the source container's account.  # noqa: E501

        :return: The replication_target_name of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: str
        """
        return self._replication_target_name

    @replication_target_name.setter
    def replication_target_name(self, replication_target_name):
        """Sets the replication_target_name of this CreateContainerReplicationJob.

        Remote Object Storage Endpoint ext-name. Destination must be of the same account as the source container's account.  # noqa: E501

        :param replication_target_name: The replication_target_name of this CreateContainerReplicationJob.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and replication_target_name is None:
            raise ValueError("Invalid value for `replication_target_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                replication_target_name is not None and not re.search(r'^replication-target-[0-9a-f]{8}$', replication_target_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `replication_target_name`, must be a follow pattern or equal to `/^replication-target-[0-9a-f]{8}$/`")  # noqa: E501

        self._replication_target_name = replication_target_name

    @property
    def display_name(self):
        """Gets the display_name of this CreateContainerReplicationJob.  # noqa: E501

        job display name  # noqa: E501

        :return: The display_name of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateContainerReplicationJob.

        job display name  # noqa: E501

        :param display_name: The display_name of this CreateContainerReplicationJob.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def auth_url(self):
        """Gets the auth_url of this CreateContainerReplicationJob.  # noqa: E501

        AUTH URL of the source container's account id  # noqa: E501

        :return: The auth_url of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this CreateContainerReplicationJob.

        AUTH URL of the source container's account id  # noqa: E501

        :param auth_url: The auth_url of this CreateContainerReplicationJob.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and auth_url is None:
            raise ValueError("Invalid value for `auth_url`, must not be `None`")  # noqa: E501

        self._auth_url = auth_url

    @property
    def auth_token(self):
        """Gets the auth_token of this CreateContainerReplicationJob.  # noqa: E501


        :return: The auth_token of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this CreateContainerReplicationJob.


        :param auth_token: The auth_token of this CreateContainerReplicationJob.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and auth_token is None:
            raise ValueError("Invalid value for `auth_token`, must not be `None`")  # noqa: E501

        self._auth_token = auth_token

    @property
    def src_bucket(self):
        """Gets the src_bucket of this CreateContainerReplicationJob.  # noqa: E501

        Source container name  # noqa: E501

        :return: The src_bucket of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: str
        """
        return self._src_bucket

    @src_bucket.setter
    def src_bucket(self, src_bucket):
        """Sets the src_bucket of this CreateContainerReplicationJob.

        Source container name  # noqa: E501

        :param src_bucket: The src_bucket of this CreateContainerReplicationJob.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and src_bucket is None:
            raise ValueError("Invalid value for `src_bucket`, must not be `None`")  # noqa: E501

        self._src_bucket = src_bucket

    @property
    def dst_bucket(self):
        """Gets the dst_bucket of this CreateContainerReplicationJob.  # noqa: E501

        Destination container name  # noqa: E501

        :return: The dst_bucket of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: str
        """
        return self._dst_bucket

    @dst_bucket.setter
    def dst_bucket(self, dst_bucket):
        """Sets the dst_bucket of this CreateContainerReplicationJob.

        Destination container name  # noqa: E501

        :param dst_bucket: The dst_bucket of this CreateContainerReplicationJob.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dst_bucket is None:
            raise ValueError("Invalid value for `dst_bucket`, must not be `None`")  # noqa: E501

        self._dst_bucket = dst_bucket

    @property
    def apply_delete(self):
        """Gets the apply_delete of this CreateContainerReplicationJob.  # noqa: E501

        Delete objects propagation  # noqa: E501

        :return: The apply_delete of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: bool
        """
        return self._apply_delete

    @apply_delete.setter
    def apply_delete(self, apply_delete):
        """Sets the apply_delete of this CreateContainerReplicationJob.

        Delete objects propagation  # noqa: E501

        :param apply_delete: The apply_delete of this CreateContainerReplicationJob.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and apply_delete is None:
            raise ValueError("Invalid value for `apply_delete`, must not be `None`")  # noqa: E501

        self._apply_delete = apply_delete

    @property
    def create_remote_container(self):
        """Gets the create_remote_container of this CreateContainerReplicationJob.  # noqa: E501

        Create the destination container  # noqa: E501

        :return: The create_remote_container of this CreateContainerReplicationJob.  # noqa: E501
        :rtype: bool
        """
        return self._create_remote_container

    @create_remote_container.setter
    def create_remote_container(self, create_remote_container):
        """Sets the create_remote_container of this CreateContainerReplicationJob.

        Create the destination container  # noqa: E501

        :param create_remote_container: The create_remote_container of this CreateContainerReplicationJob.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and create_remote_container is None:
            raise ValueError("Invalid value for `create_remote_container`, must not be `None`")  # noqa: E501

        self._create_remote_container = create_remote_container

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateContainerReplicationJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateContainerReplicationJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateContainerReplicationJob):
            return True

        return self.to_dict() != other.to_dict()
