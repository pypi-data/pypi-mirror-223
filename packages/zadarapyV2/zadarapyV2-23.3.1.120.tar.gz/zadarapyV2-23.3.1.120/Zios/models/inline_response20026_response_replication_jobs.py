# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.03-sp1
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class InlineResponse20026ResponseReplicationJobs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_objs_updated': 'str',
        'num_bytes_transferred': 'str',
        'num_objs_deleted': 'str',
        'replication_id': 'str',
        'num_objs_timedout': 'str',
        'num_objs_errored': 'str',
        'state': 'str',
        'dest_container': 'str',
        'retries': 'str',
        'num_objs_replicated': 'str',
        'total_obj_count': 'str',
        'last_replication_time': 'str',
        'src_container': 'str',
        'remote_target_name': 'str'
    }

    attribute_map = {
        'num_objs_updated': 'num_objs_updated',
        'num_bytes_transferred': 'num_bytes_transferred',
        'num_objs_deleted': 'num_objs_deleted',
        'replication_id': 'replication_id',
        'num_objs_timedout': 'num_objs_timedout',
        'num_objs_errored': 'num_objs_errored',
        'state': 'state',
        'dest_container': 'dest_container',
        'retries': 'retries',
        'num_objs_replicated': 'num_objs_replicated',
        'total_obj_count': 'total_obj_count',
        'last_replication_time': 'last_replication_time',
        'src_container': 'src_container',
        'remote_target_name': 'remote_target_name'
    }

    def __init__(self, num_objs_updated=None, num_bytes_transferred=None, num_objs_deleted=None, replication_id=None, num_objs_timedout=None, num_objs_errored=None, state=None, dest_container=None, retries=None, num_objs_replicated=None, total_obj_count=None, last_replication_time=None, src_container=None, remote_target_name=None, _configuration=None):  # noqa: E501
        """InlineResponse20026ResponseReplicationJobs - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._num_objs_updated = None
        self._num_bytes_transferred = None
        self._num_objs_deleted = None
        self._replication_id = None
        self._num_objs_timedout = None
        self._num_objs_errored = None
        self._state = None
        self._dest_container = None
        self._retries = None
        self._num_objs_replicated = None
        self._total_obj_count = None
        self._last_replication_time = None
        self._src_container = None
        self._remote_target_name = None
        self.discriminator = None

        if num_objs_updated is not None:
            self.num_objs_updated = num_objs_updated
        if num_bytes_transferred is not None:
            self.num_bytes_transferred = num_bytes_transferred
        if num_objs_deleted is not None:
            self.num_objs_deleted = num_objs_deleted
        if replication_id is not None:
            self.replication_id = replication_id
        if num_objs_timedout is not None:
            self.num_objs_timedout = num_objs_timedout
        if num_objs_errored is not None:
            self.num_objs_errored = num_objs_errored
        if state is not None:
            self.state = state
        if dest_container is not None:
            self.dest_container = dest_container
        if retries is not None:
            self.retries = retries
        if num_objs_replicated is not None:
            self.num_objs_replicated = num_objs_replicated
        if total_obj_count is not None:
            self.total_obj_count = total_obj_count
        if last_replication_time is not None:
            self.last_replication_time = last_replication_time
        if src_container is not None:
            self.src_container = src_container
        if remote_target_name is not None:
            self.remote_target_name = remote_target_name

    @property
    def num_objs_updated(self):
        """Gets the num_objs_updated of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The num_objs_updated of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._num_objs_updated

    @num_objs_updated.setter
    def num_objs_updated(self, num_objs_updated):
        """Sets the num_objs_updated of this InlineResponse20026ResponseReplicationJobs.


        :param num_objs_updated: The num_objs_updated of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._num_objs_updated = num_objs_updated

    @property
    def num_bytes_transferred(self):
        """Gets the num_bytes_transferred of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The num_bytes_transferred of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._num_bytes_transferred

    @num_bytes_transferred.setter
    def num_bytes_transferred(self, num_bytes_transferred):
        """Sets the num_bytes_transferred of this InlineResponse20026ResponseReplicationJobs.


        :param num_bytes_transferred: The num_bytes_transferred of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._num_bytes_transferred = num_bytes_transferred

    @property
    def num_objs_deleted(self):
        """Gets the num_objs_deleted of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The num_objs_deleted of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._num_objs_deleted

    @num_objs_deleted.setter
    def num_objs_deleted(self, num_objs_deleted):
        """Sets the num_objs_deleted of this InlineResponse20026ResponseReplicationJobs.


        :param num_objs_deleted: The num_objs_deleted of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._num_objs_deleted = num_objs_deleted

    @property
    def replication_id(self):
        """Gets the replication_id of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The replication_id of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._replication_id

    @replication_id.setter
    def replication_id(self, replication_id):
        """Sets the replication_id of this InlineResponse20026ResponseReplicationJobs.


        :param replication_id: The replication_id of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._replication_id = replication_id

    @property
    def num_objs_timedout(self):
        """Gets the num_objs_timedout of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The num_objs_timedout of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._num_objs_timedout

    @num_objs_timedout.setter
    def num_objs_timedout(self, num_objs_timedout):
        """Sets the num_objs_timedout of this InlineResponse20026ResponseReplicationJobs.


        :param num_objs_timedout: The num_objs_timedout of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._num_objs_timedout = num_objs_timedout

    @property
    def num_objs_errored(self):
        """Gets the num_objs_errored of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The num_objs_errored of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._num_objs_errored

    @num_objs_errored.setter
    def num_objs_errored(self, num_objs_errored):
        """Sets the num_objs_errored of this InlineResponse20026ResponseReplicationJobs.


        :param num_objs_errored: The num_objs_errored of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._num_objs_errored = num_objs_errored

    @property
    def state(self):
        """Gets the state of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The state of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20026ResponseReplicationJobs.


        :param state: The state of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def dest_container(self):
        """Gets the dest_container of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The dest_container of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._dest_container

    @dest_container.setter
    def dest_container(self, dest_container):
        """Sets the dest_container of this InlineResponse20026ResponseReplicationJobs.


        :param dest_container: The dest_container of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._dest_container = dest_container

    @property
    def retries(self):
        """Gets the retries of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The retries of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this InlineResponse20026ResponseReplicationJobs.


        :param retries: The retries of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._retries = retries

    @property
    def num_objs_replicated(self):
        """Gets the num_objs_replicated of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The num_objs_replicated of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._num_objs_replicated

    @num_objs_replicated.setter
    def num_objs_replicated(self, num_objs_replicated):
        """Sets the num_objs_replicated of this InlineResponse20026ResponseReplicationJobs.


        :param num_objs_replicated: The num_objs_replicated of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._num_objs_replicated = num_objs_replicated

    @property
    def total_obj_count(self):
        """Gets the total_obj_count of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The total_obj_count of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._total_obj_count

    @total_obj_count.setter
    def total_obj_count(self, total_obj_count):
        """Sets the total_obj_count of this InlineResponse20026ResponseReplicationJobs.


        :param total_obj_count: The total_obj_count of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._total_obj_count = total_obj_count

    @property
    def last_replication_time(self):
        """Gets the last_replication_time of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The last_replication_time of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._last_replication_time

    @last_replication_time.setter
    def last_replication_time(self, last_replication_time):
        """Sets the last_replication_time of this InlineResponse20026ResponseReplicationJobs.


        :param last_replication_time: The last_replication_time of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._last_replication_time = last_replication_time

    @property
    def src_container(self):
        """Gets the src_container of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The src_container of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._src_container

    @src_container.setter
    def src_container(self, src_container):
        """Sets the src_container of this InlineResponse20026ResponseReplicationJobs.


        :param src_container: The src_container of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._src_container = src_container

    @property
    def remote_target_name(self):
        """Gets the remote_target_name of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501


        :return: The remote_target_name of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :rtype: str
        """
        return self._remote_target_name

    @remote_target_name.setter
    def remote_target_name(self, remote_target_name):
        """Sets the remote_target_name of this InlineResponse20026ResponseReplicationJobs.


        :param remote_target_name: The remote_target_name of this InlineResponse20026ResponseReplicationJobs.  # noqa: E501
        :type: str
        """

        self._remote_target_name = remote_target_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20026ResponseReplicationJobs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20026ResponseReplicationJobs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20026ResponseReplicationJobs):
            return True

        return self.to_dict() != other.to_dict()
