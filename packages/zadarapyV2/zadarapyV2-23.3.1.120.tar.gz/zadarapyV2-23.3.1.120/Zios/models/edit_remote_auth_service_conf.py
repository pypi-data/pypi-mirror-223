# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.03-sp1
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class EditRemoteAuthServiceConf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_service_type': 'str',
        'auth_service_url': 'str',
        'username': 'str',
        'password': 'str',
        'project_name': 'str',
        'reseller_prefix': 'str',
        'reseller_admin_role': 'str',
        'operator_roles': 'str',
        'project_domain_id': 'str',
        'user_domain_id': 'str'
    }

    attribute_map = {
        'auth_service_type': 'auth_service_type',
        'auth_service_url': 'auth_service_url',
        'username': 'username',
        'password': 'password',
        'project_name': 'project_name',
        'reseller_prefix': 'reseller_prefix',
        'reseller_admin_role': 'reseller_admin_role',
        'operator_roles': 'operator_roles',
        'project_domain_id': 'project_domain_id',
        'user_domain_id': 'user_domain_id'
    }

    def __init__(self, auth_service_type=None, auth_service_url=None, username=None, password=None, project_name=None, reseller_prefix=None, reseller_admin_role=None, operator_roles=None, project_domain_id=None, user_domain_id=None, _configuration=None):  # noqa: E501
        """EditRemoteAuthServiceConf - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_service_type = None
        self._auth_service_url = None
        self._username = None
        self._password = None
        self._project_name = None
        self._reseller_prefix = None
        self._reseller_admin_role = None
        self._operator_roles = None
        self._project_domain_id = None
        self._user_domain_id = None
        self.discriminator = None

        if auth_service_type is not None:
            self.auth_service_type = auth_service_type
        self.auth_service_url = auth_service_url
        self.username = username
        if password is not None:
            self.password = password
        self.project_name = project_name
        if reseller_prefix is not None:
            self.reseller_prefix = reseller_prefix
        if reseller_admin_role is not None:
            self.reseller_admin_role = reseller_admin_role
        if operator_roles is not None:
            self.operator_roles = operator_roles
        if project_domain_id is not None:
            self.project_domain_id = project_domain_id
        if user_domain_id is not None:
            self.user_domain_id = user_domain_id

    @property
    def auth_service_type(self):
        """Gets the auth_service_type of this EditRemoteAuthServiceConf.  # noqa: E501

        Remote authentication service type.  # noqa: E501

        :return: The auth_service_type of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._auth_service_type

    @auth_service_type.setter
    def auth_service_type(self, auth_service_type):
        """Sets the auth_service_type of this EditRemoteAuthServiceConf.

        Remote authentication service type.  # noqa: E501

        :param auth_service_type: The auth_service_type of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """
        allowed_values = ["ext_keystone"]  # noqa: E501
        if (self._configuration.client_side_validation and
                auth_service_type not in allowed_values):
            raise ValueError(
                "Invalid value for `auth_service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_service_type, allowed_values)
            )

        self._auth_service_type = auth_service_type

    @property
    def auth_service_url(self):
        """Gets the auth_service_url of this EditRemoteAuthServiceConf.  # noqa: E501

        Authentication service endpoint URL.  # noqa: E501

        :return: The auth_service_url of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._auth_service_url

    @auth_service_url.setter
    def auth_service_url(self, auth_service_url):
        """Sets the auth_service_url of this EditRemoteAuthServiceConf.

        Authentication service endpoint URL.  # noqa: E501

        :param auth_service_url: The auth_service_url of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and auth_service_url is None:
            raise ValueError("Invalid value for `auth_service_url`, must not be `None`")  # noqa: E501

        self._auth_service_url = auth_service_url

    @property
    def username(self):
        """Gets the username of this EditRemoteAuthServiceConf.  # noqa: E501

        Administrator username.  # noqa: E501

        :return: The username of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EditRemoteAuthServiceConf.

        Administrator username.  # noqa: E501

        :param username: The username of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this EditRemoteAuthServiceConf.  # noqa: E501

        Administrator password.  # noqa: E501

        :return: The password of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EditRemoteAuthServiceConf.

        Administrator password.  # noqa: E501

        :param password: The password of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def project_name(self):
        """Gets the project_name of this EditRemoteAuthServiceConf.  # noqa: E501

        Administrator project name.  # noqa: E501

        :return: The project_name of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this EditRemoteAuthServiceConf.

        Administrator project name.  # noqa: E501

        :param project_name: The project_name of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def reseller_prefix(self):
        """Gets the reseller_prefix of this EditRemoteAuthServiceConf.  # noqa: E501

        Reseller prefix.  # noqa: E501

        :return: The reseller_prefix of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._reseller_prefix

    @reseller_prefix.setter
    def reseller_prefix(self, reseller_prefix):
        """Sets the reseller_prefix of this EditRemoteAuthServiceConf.

        Reseller prefix.  # noqa: E501

        :param reseller_prefix: The reseller_prefix of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """

        self._reseller_prefix = reseller_prefix

    @property
    def reseller_admin_role(self):
        """Gets the reseller_admin_role of this EditRemoteAuthServiceConf.  # noqa: E501

        Reseller admin role.  # noqa: E501

        :return: The reseller_admin_role of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._reseller_admin_role

    @reseller_admin_role.setter
    def reseller_admin_role(self, reseller_admin_role):
        """Sets the reseller_admin_role of this EditRemoteAuthServiceConf.

        Reseller admin role.  # noqa: E501

        :param reseller_admin_role: The reseller_admin_role of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """

        self._reseller_admin_role = reseller_admin_role

    @property
    def operator_roles(self):
        """Gets the operator_roles of this EditRemoteAuthServiceConf.  # noqa: E501

        Operator roles.  # noqa: E501

        :return: The operator_roles of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._operator_roles

    @operator_roles.setter
    def operator_roles(self, operator_roles):
        """Sets the operator_roles of this EditRemoteAuthServiceConf.

        Operator roles.  # noqa: E501

        :param operator_roles: The operator_roles of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """

        self._operator_roles = operator_roles

    @property
    def project_domain_id(self):
        """Gets the project_domain_id of this EditRemoteAuthServiceConf.  # noqa: E501

        Project domain ID.  # noqa: E501

        :return: The project_domain_id of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._project_domain_id

    @project_domain_id.setter
    def project_domain_id(self, project_domain_id):
        """Sets the project_domain_id of this EditRemoteAuthServiceConf.

        Project domain ID.  # noqa: E501

        :param project_domain_id: The project_domain_id of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """

        self._project_domain_id = project_domain_id

    @property
    def user_domain_id(self):
        """Gets the user_domain_id of this EditRemoteAuthServiceConf.  # noqa: E501

        Administrator domain ID.  # noqa: E501

        :return: The user_domain_id of this EditRemoteAuthServiceConf.  # noqa: E501
        :rtype: str
        """
        return self._user_domain_id

    @user_domain_id.setter
    def user_domain_id(self, user_domain_id):
        """Sets the user_domain_id of this EditRemoteAuthServiceConf.

        Administrator domain ID.  # noqa: E501

        :param user_domain_id: The user_domain_id of this EditRemoteAuthServiceConf.  # noqa: E501
        :type: str
        """

        self._user_domain_id = user_domain_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditRemoteAuthServiceConf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditRemoteAuthServiceConf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditRemoteAuthServiceConf):
            return True

        return self.to_dict() != other.to_dict()
