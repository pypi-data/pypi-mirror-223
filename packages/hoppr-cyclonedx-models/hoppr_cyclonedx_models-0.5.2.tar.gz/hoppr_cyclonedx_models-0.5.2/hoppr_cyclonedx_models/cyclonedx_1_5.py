# generated by datamodel-codegen:
#   filename:  bom-1.5.schema.json
#   timestamp: 2023-08-08T18:47:55+00:00
#   version:   0.21.3

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, EmailStr, Extra, Field

from hoppr_cyclonedx_models.base import CycloneDXBaseModel

from . import spdx


class FieldSchema(str, Enum):
    http___cyclonedx_org_schema_bom_1_5_schema_json = "http://cyclonedx.org/schema/bom-1.5.schema.json"


class BomFormat(str, Enum):
    """
    Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOMs do not have a filename convention nor does JSON schema support namespaces. This value MUST be "CycloneDX".
    """

    CycloneDX = "CycloneDX"


class RefLinkType(CycloneDXBaseModel):
    __root__: str = Field(
        ...,
        description=(
            "Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.\nIn contrast to"
            " `bomLinkElementType`."
        ),
        min_length=1,
    )


class BomLinkDocumentType(CycloneDXBaseModel):
    __root__: str = Field(
        ...,
        description="Descriptor for another BOM document. See https://cyclonedx.org/capabilities/bomlink/",
        regex="^urn:cdx:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/[1-9][0-9]*$",
        title="BOM-Link Document",
    )


class BomLinkElementType(CycloneDXBaseModel):
    __root__: str = Field(
        ...,
        description="Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/",
        regex="^urn:cdx:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/[1-9][0-9]*#.+$",
        title="BOM-Link Element",
    )


class Phase(str, Enum):
    """
    A pre-defined phase in the product lifecycle.

    * __design__ = BOM produced early in the development lifecycle containing inventory of components and services that are proposed or planned to be used. The inventory may need to be procured, retrieved, or resourced prior to use.
    * __pre-build__ = BOM consisting of information obtained prior to a build process and may contain source files and development artifacts and manifests. The inventory may need to be resolved and retrieved prior to use.
    * __build__ = BOM consisting of information obtained during a build process where component inventory is available for use. The precise versions of resolved components are usually available at this time as well as the provenance of where the components were retrieved from.
    * __post-build__ = BOM consisting of information obtained after a build process has completed and the resulting components(s) are available for further analysis. Built components may exist as the result of a CI/CD process, may have been installed or deployed to a system or device, and may need to be retrieved or extracted from the system or device.
    * __operations__ = BOM produced that represents inventory that is running and operational. This may include staging or production environments and will generally encompass multiple SBOMs describing the applications and operating system, along with HBOMs describing the hardware that makes up the system. Operations Bill of Materials (OBOM) can provide full-stack inventory of runtime environments, configurations, and additional dependencies.
    * __discovery__ = BOM consisting of information observed through network discovery providing point-in-time enumeration of embedded, on-premise, and cloud-native services such as server applications, connected devices, microservices, and serverless functions.
    * __decommission__ = BOM containing inventory that will be, or has been retired from operations.
    """

    design = "design"
    pre_build = "pre-build"
    build = "build"
    post_build = "post-build"
    operations = "operations"
    discovery = "discovery"
    decommission = "decommission"


class Lifecycle(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    phase: Phase = Field(
        ...,
        description=(
            "A pre-defined phase in the product lifecycle.\n\n* __design__ = BOM produced early in the development"
            " lifecycle containing inventory of components and services that are proposed or planned to be used. The"
            " inventory may need to be procured, retrieved, or resourced prior to use.\n* __pre-build__ = BOM"
            " consisting of information obtained prior to a build process and may contain source files and development"
            " artifacts and manifests. The inventory may need to be resolved and retrieved prior to use.\n* __build__ ="
            " BOM consisting of information obtained during a build process where component inventory is available for"
            " use. The precise versions of resolved components are usually available at this time as well as the"
            " provenance of where the components were retrieved from.\n* __post-build__ = BOM consisting of information"
            " obtained after a build process has completed and the resulting components(s) are available for further"
            " analysis. Built components may exist as the result of a CI/CD process, may have been installed or"
            " deployed to a system or device, and may need to be retrieved or extracted from the system or device.\n*"
            " __operations__ = BOM produced that represents inventory that is running and operational. This may include"
            " staging or production environments and will generally encompass multiple SBOMs describing the"
            " applications and operating system, along with HBOMs describing the hardware that makes up the system."
            " Operations Bill of Materials (OBOM) can provide full-stack inventory of runtime environments,"
            " configurations, and additional dependencies.\n* __discovery__ = BOM consisting of information observed"
            " through network discovery providing point-in-time enumeration of embedded, on-premise, and cloud-native"
            " services such as server applications, connected devices, microservices, and serverless functions.\n*"
            " __decommission__ = BOM containing inventory that will be, or has been retired from operations."
        ),
        title="Phase",
    )


class Lifecycle1(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    name: str = Field(..., description="The name of the lifecycle phase", title="Name")
    description: Optional[str] = Field(None, description="The description of the lifecycle phase", title="Description")


class OrganizationalContact(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the object elsewhere in the BOM. Every bom-ref MUST"
            " be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    name: Optional[str] = Field(None, description="The name of a contact", examples=["Contact name"], title="Name")
    email: Optional[EmailStr] = Field(
        None,
        description="The email address of the contact.",
        examples=["firstname.lastname@example.com"],
        title="Email Address",
    )
    phone: Optional[str] = Field(
        None, description="The phone number of the contact.", examples=["800-555-1212"], title="Phone"
    )


class Type(str, Enum):
    """
    Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component. Types include:

    * __application__ = A software application. Refer to [https://en.wikipedia.org/wiki/Application_software](https://en.wikipedia.org/wiki/Application_software) for information about applications.
    * __framework__ = A software framework. Refer to [https://en.wikipedia.org/wiki/Software_framework](https://en.wikipedia.org/wiki/Software_framework) for information on how frameworks vary slightly from libraries.
    * __library__ = A software library. Refer to [https://en.wikipedia.org/wiki/Library_(computing)](https://en.wikipedia.org/wiki/Library_(computing))
     for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is RECOMMENDED.
    * __container__ = A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to [https://en.wikipedia.org/wiki/OS-level_virtualization](https://en.wikipedia.org/wiki/OS-level_virtualization)
    * __platform__ = A runtime environment which interprets or executes software. This may include runtimes such as those that execute bytecode or low-code/no-code application platforms.
    * __operating-system__ = A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to [https://en.wikipedia.org/wiki/Operating_system](https://en.wikipedia.org/wiki/Operating_system)
    * __device__ = A hardware device such as a processor, or chip-set. A hardware device containing firmware SHOULD include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device.
      See also the list of [known device properties](https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md).
    * __device-driver__ = A special type of software that operates or controls a particular type of device. Refer to [https://en.wikipedia.org/wiki/Device_driver](https://en.wikipedia.org/wiki/Device_driver)
    * __firmware__ = A special type of software that provides low-level control over a devices hardware. Refer to [https://en.wikipedia.org/wiki/Firmware](https://en.wikipedia.org/wiki/Firmware)
    * __file__ = A computer file. Refer to [https://en.wikipedia.org/wiki/Computer_file](https://en.wikipedia.org/wiki/Computer_file) for information about files.
    * __machine-learning-model__ = A model based on training data that can make predictions or decisions without being explicitly programmed to do so.
    * __data__ = A collection of discrete values that convey information.
    """

    application = "application"
    framework = "framework"
    library = "library"
    container = "container"
    platform = "platform"
    operating_system = "operating-system"
    device = "device"
    device_driver = "device-driver"
    firmware = "firmware"
    file = "file"
    machine_learning_model = "machine-learning-model"
    data = "data"


class Scope(str, Enum):
    """
    Specifies the scope of the component. If scope is not specified, 'required' scope SHOULD be assumed by the consumer of the BOM.
    """

    required = "required"
    optional = "optional"
    excluded = "excluded"


class Encoding(str, Enum):
    """
    Specifies the optional encoding the text is represented in.
    """

    base64 = "base64"


class Attachment(CycloneDXBaseModel):
    """
    Specifies the metadata and content for an attachment.
    """

    class Config:
        extra = Extra.forbid

    contentType: Optional[str] = Field(
        "text/plain",
        description="Specifies the content type of the text. Defaults to text/plain if not specified.",
        title="Content-Type",
    )
    encoding: Optional[Encoding] = Field(
        None, description="Specifies the optional encoding the text is represented in.", title="Encoding"
    )
    content: str = Field(
        ...,
        description=(
            "The attachment data. Proactive controls such as input validation and sanitization should be employed to"
            " prevent misuse of attachment text."
        ),
        title="Attachment Text",
    )


class HashAlg(str, Enum):
    MD5 = "MD5"
    SHA_1 = "SHA-1"
    SHA_256 = "SHA-256"
    SHA_384 = "SHA-384"
    SHA_512 = "SHA-512"
    SHA3_256 = "SHA3-256"
    SHA3_384 = "SHA3-384"
    SHA3_512 = "SHA3-512"
    BLAKE2b_256 = "BLAKE2b-256"
    BLAKE2b_384 = "BLAKE2b-384"
    BLAKE2b_512 = "BLAKE2b-512"
    BLAKE3 = "BLAKE3"


class LicenseType(str, Enum):
    academic = "academic"
    appliance = "appliance"
    client_access = "client-access"
    concurrent_user = "concurrent-user"
    core_points = "core-points"
    custom_metric = "custom-metric"
    device = "device"
    evaluation = "evaluation"
    named_user = "named-user"
    node_locked = "node-locked"
    oem = "oem"
    perpetual = "perpetual"
    processor_points = "processor-points"
    subscription = "subscription"
    user = "user"
    other = "other"


class Licensing(CycloneDXBaseModel):
    """
    Licensing details describing the licensor/licensee, license type, renewal and expiration dates, and other important metadata
    """

    class Config:
        extra = Extra.forbid

    altIds: Optional[List[str]] = Field(
        None,
        description="License identifiers that may be used to manage licenses and their lifecycle",
        title="Alternate License Identifiers",
    )
    purchaseOrder: Optional[str] = Field(
        None,
        description="The purchase order identifier the purchaser sent to a supplier or vendor to authorize a purchase",
        title="Purchase Order",
    )
    licenseTypes: Optional[List[LicenseType]] = Field(
        None,
        description=(
            "The type of license(s) that was granted to the licensee\n\n* __academic__ = A license that grants use of"
            " software solely for the purpose of education or research.\n* __appliance__ = A license covering use of"
            " software embedded in a specific piece of hardware.\n* __client-access__ = A Client Access License (CAL)"
            " allows client computers to access services provided by server software.\n* __concurrent-user__ = A"
            " Concurrent User license (aka floating license) limits the number of licenses for a software application"
            " and licenses are shared among a larger number of users.\n* __core-points__ = A license where the core of"
            " a computer's processor is assigned a specific number of points.\n* __custom-metric__ = A license for"
            " which consumption is measured by non-standard metrics.\n* __device__ = A license that covers a defined"
            " number of installations on computers and other types of devices.\n* __evaluation__ = A license that"
            " grants permission to install and use software for trial purposes.\n* __named-user__ = A license that"
            " grants access to the software to one or more pre-defined users.\n* __node-locked__ = A license that"
            " grants access to the software on one or more pre-defined computers or devices.\n* __oem__ = An Original"
            " Equipment Manufacturer license that is delivered with hardware, cannot be transferred to other hardware,"
            " and is valid for the life of the hardware.\n* __perpetual__ = A license where the software is sold on a"
            " one-time basis and the licensee can use a copy of the software indefinitely.\n* __processor-points__ = A"
            " license where each installation consumes points per processor.\n* __subscription__ = A license where the"
            " licensee pays a fee to use the software or service.\n* __user__ = A license that grants access to the"
            " software or service by a specified number of users.\n* __other__ = Another license type.\n"
        ),
        title="License Type",
    )
    lastRenewal: Optional[datetime] = Field(
        None,
        description=(
            "The timestamp indicating when the license was last renewed. For new purchases, this is often the purchase"
            " or acquisition date. For non-perpetual licenses or subscriptions, this is the timestamp of when the"
            " license was last renewed."
        ),
        title="Last Renewal",
    )
    expiration: Optional[datetime] = Field(
        None,
        description="The timestamp indicating when the current license expires (if applicable).",
        title="Expiration",
    )


class Type1(str, Enum):
    """
    Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality.

    * __unofficial__ = A patch which is not developed by the creators or maintainers of the software being patched. Refer to [https://en.wikipedia.org/wiki/Unofficial_patch](https://en.wikipedia.org/wiki/Unofficial_patch)
    * __monkey__ = A patch which dynamically modifies runtime behavior. Refer to [https://en.wikipedia.org/wiki/Monkey_patch](https://en.wikipedia.org/wiki/Monkey_patch)
    * __backport__ = A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to [https://en.wikipedia.org/wiki/Backporting](https://en.wikipedia.org/wiki/Backporting)
    * __cherry-pick__ = A patch created by selectively applying commits from other versions or branches of the same software.
    """

    unofficial = "unofficial"
    monkey = "monkey"
    backport = "backport"
    cherry_pick = "cherry-pick"


class Diff(CycloneDXBaseModel):
    """
    The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
    """

    class Config:
        extra = Extra.forbid

    text: Optional[Attachment] = Field(None, description="Specifies the optional text of the diff", title="Diff text")
    url: Optional[str] = Field(None, description="Specifies the URL to the diff", title="URL")


class Type2(str, Enum):
    """
    Specifies the type of issue
    """

    defect = "defect"
    enhancement = "enhancement"
    security = "security"


class Source(CycloneDXBaseModel):
    """
    The source of the issue where it is documented
    """

    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(
        None,
        description="The name of the source. For example 'National Vulnerability Database', 'NVD', and 'Apache'",
        title="Name",
    )
    url: Optional[str] = Field(
        None, description="The url of the issue documentation as provided by the source", title="URL"
    )


class Issue(CycloneDXBaseModel):
    """
    An individual issue that has been resolved.
    """

    class Config:
        extra = Extra.forbid

    type: Type2 = Field(..., description="Specifies the type of issue", title="Type")
    id: Optional[str] = Field(
        None, description="The identifier of the issue assigned by the source of the issue", title="ID"
    )
    name: Optional[str] = Field(None, description="The name of the issue", title="Name")
    description: Optional[str] = Field(None, description="A description of the issue", title="Description")
    source: Optional[Source] = Field(None, description="The source of the issue where it is documented", title="Source")
    references: Optional[List[str]] = Field(
        None,
        description="A collection of URL's for reference. Multiple URLs are allowed.",
        examples=["https://example.com"],
        title="References",
    )


class IdentifiableAction(CycloneDXBaseModel):
    """
    Specifies an individual commit
    """

    class Config:
        extra = Extra.forbid

    timestamp: Optional[datetime] = Field(
        None, description="The timestamp in which the action occurred", title="Timestamp"
    )
    name: Optional[str] = Field(None, description="The name of the individual who performed the action", title="Name")
    email: Optional[EmailStr] = Field(
        None, description="The email address of the individual who performed the action", title="E-mail"
    )


class Type3(str, Enum):
    """
    Specifies the type of external reference.

    * __vcs__ = Version Control System
    * __issue-tracker__ = Issue or defect tracking system, or an Application Lifecycle Management (ALM) system
    * __website__ = Website
    * __advisories__ = Security advisories
    * __bom__ = Bill of Materials (SBOM, OBOM, HBOM, SaaSBOM, etc)
    * __mailing-list__ = Mailing list or discussion group
    * __social__ = Social media account
    * __chat__ = Real-time chat platform
    * __documentation__ = Documentation, guides, or how-to instructions
    * __support__ = Community or commercial support
    * __distribution__ = Direct or repository download location
    * __distribution-intake__ = The location where a component was published to. This is often the same as "distribution" but may also include specialized publishing processes that act as an intermediary
    * __license__ = The URL to the license file. If a license URL has been defined in the license node, it should also be defined as an external reference for completeness
    * __build-meta__ = Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)
    * __build-system__ = URL to an automated build system
    * __release-notes__ = URL to release notes
    * __security-contact__ = Specifies a way to contact the maintainer, supplier, or provider in the event of a security incident. Common URIs include links to a disclosure procedure, a mailto (RFC-2368) that specifies an email address, a tel (RFC-3966) that specifies a phone number, or dns (RFC-4501) that specifies the records containing DNS Security TXT
    * __model-card__ = A model card describes the intended uses of a machine learning model, potential limitations, biases, ethical considerations, training parameters, datasets used to train the model, performance metrics, and other relevant data useful for ML transparency
    * __log__ = A record of events that occurred in a computer system or application, such as problems, errors, or information on current operations
    * __configuration__ = Parameters or settings that may be used by other components or services
    * __evidence__ = Information used to substantiate a claim
    * __formulation__ = Describes how a component or service was manufactured or deployed
    * __attestation__ = Human or machine-readable statements containing facts, evidence, or testimony
    * __threat-model__ = An enumeration of identified weaknesses, threats, and countermeasures, dataflow diagram (DFD), attack tree, and other supporting documentation in human-readable or machine-readable format
    * __adversary-model__ = The defined assumptions, goals, and capabilities of an adversary.
    * __risk-assessment__ = Identifies and analyzes the potential of future events that may negatively impact individuals, assets, and/or the environment. Risk assessments may also include judgments on the tolerability of each risk.
    * __vulnerability-assertion__ = A Vulnerability Disclosure Report (VDR) which asserts the known and previously unknown vulnerabilities that affect a component, service, or product including the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on a component, service, or product.
    * __exploitability-statement__ = A Vulnerability Exploitability eXchange (VEX) which asserts the known vulnerabilities that do not affect a product, product family, or organization, and optionally the ones that do. The VEX should include the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on the product, product family, or organization.
    * __pentest-report__ = Results from an authorized simulated cyberattack on a component or service, otherwise known as a penetration test
    * __static-analysis-report__ = SARIF or proprietary machine or human-readable report for which static analysis has identified code quality, security, and other potential issues with the source code
    * __dynamic-analysis-report__ = Dynamic analysis report that has identified issues such as vulnerabilities and misconfigurations
    * __runtime-analysis-report__ = Report generated by analyzing the call stack of a running application
    * __component-analysis-report__ = Report generated by Software Composition Analysis (SCA), container analysis, or other forms of component analysis
    * __maturity-report__ = Report containing a formal assessment of an organization, business unit, or team against a maturity model
    * __certification-report__ = Industry, regulatory, or other certification from an accredited (if applicable) certification body
    * __quality-metrics__ = Report or system in which quality metrics can be obtained
    * __codified-infrastructure__ = Code or configuration that defines and provisions virtualized infrastructure, commonly referred to as Infrastructure as Code (IaC)
    * __poam__ = Plans of Action and Milestones (POAM) compliment an "attestation" external reference. POAM is defined by NIST as a "document that identifies tasks needing to be accomplished. It details resources required to accomplish the elements of the plan, any milestones in meeting the tasks and scheduled completion dates for the milestones".
    * __other__ = Use this if no other types accurately describe the purpose of the external reference
    """

    vcs = "vcs"
    issue_tracker = "issue-tracker"
    website = "website"
    advisories = "advisories"
    bom = "bom"
    mailing_list = "mailing-list"
    social = "social"
    chat = "chat"
    documentation = "documentation"
    support = "support"
    distribution = "distribution"
    distribution_intake = "distribution-intake"
    license = "license"
    build_meta = "build-meta"
    build_system = "build-system"
    release_notes = "release-notes"
    security_contact = "security-contact"
    model_card = "model-card"
    log = "log"
    configuration = "configuration"
    evidence = "evidence"
    formulation = "formulation"
    attestation = "attestation"
    threat_model = "threat-model"
    adversary_model = "adversary-model"
    risk_assessment = "risk-assessment"
    vulnerability_assertion = "vulnerability-assertion"
    exploitability_statement = "exploitability-statement"
    pentest_report = "pentest-report"
    static_analysis_report = "static-analysis-report"
    dynamic_analysis_report = "dynamic-analysis-report"
    runtime_analysis_report = "runtime-analysis-report"
    component_analysis_report = "component-analysis-report"
    maturity_report = "maturity-report"
    certification_report = "certification-report"
    codified_infrastructure = "codified-infrastructure"
    quality_metrics = "quality-metrics"
    poam = "poam"
    other = "other"


class Dependency(CycloneDXBaseModel):
    """
    Defines the direct dependencies of a component or service. Components or services that do not have their own dependencies MUST be declared as empty elements within the graph. Components or services that are not represented in the dependency graph MAY have unknown dependencies. It is RECOMMENDED that implementations assume this to be opaque and not an indicator of a object being dependency-free. It is RECOMMENDED to leverage compositions to indicate unknown dependency graphs.
    """

    class Config:
        extra = Extra.forbid

    ref: str = Field(
        ..., description="References a component or service by its bom-ref attribute", min_length=1, title="Reference"
    )
    dependsOn: Optional[List[RefLinkType]] = Field(
        None,
        description=(
            "The bom-ref identifiers of the components or services that are dependencies of this dependency object."
        ),
        title="Depends On",
    )


class DataFlowDirection(str, Enum):
    """
    Specifies the flow direction of the data. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
    """

    inbound = "inbound"
    outbound = "outbound"
    bi_directional = "bi-directional"
    unknown = "unknown"


class Copyright(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    text: str = Field(..., title="Copyright Text")


class FieldModel(str, Enum):
    """
    The identity field of the component which the evidence describes.
    """

    group = "group"
    name = "name"
    version = "version"
    purl = "purl"
    cpe = "cpe"
    swid = "swid"
    hash = "hash"


class Technique(str, Enum):
    """
    The technique used in this method of analysis.
    """

    source_code_analysis = "source-code-analysis"
    binary_analysis = "binary-analysis"
    manifest_analysis = "manifest-analysis"
    ast_fingerprint = "ast-fingerprint"
    hash_comparison = "hash-comparison"
    instrumentation = "instrumentation"
    dynamic_analysis = "dynamic-analysis"
    filename = "filename"
    attestation = "attestation"
    other = "other"


class Method(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    technique: Technique = Field(..., description="The technique used in this method of analysis.", title="Technique")
    confidence: float = Field(
        ...,
        description=(
            "The confidence of the evidence from 0 - 1, where 1 is 100% confidence. Confidence is specific to the"
            " technique used. Each technique of analysis can have independent confidence."
        ),
        ge=0.0,
        le=1.0,
        title="Confidence",
    )
    value: Optional[str] = Field(None, description="The value or contents of the evidence.", title="Value")


class Identity(CycloneDXBaseModel):
    """
    Evidence that substantiates the identity of a component.
    """

    class Config:
        extra = Extra.forbid

    field: FieldModel = Field(
        ..., description="The identity field of the component which the evidence describes.", title="Field"
    )
    confidence: Optional[float] = Field(
        None,
        description="The overall confidence of the evidence from 0 - 1, where 1 is 100% confidence.",
        ge=0.0,
        le=1.0,
        title="Confidence",
    )
    methods: Optional[List[Method]] = Field(
        None, description="The methods used to extract and/or analyze the evidence.", title="Methods"
    )
    tools: Optional[List[Union[RefLinkType, BomLinkElementType]]] = Field(
        None,
        description=(
            "The object in the BOM identified by its bom-ref. This is often a component or service, but may be any"
            " object type supporting bom-refs. Tools used for analysis should already be defined in the BOM, either in"
            " the metadata/tools, components, or formulation."
        ),
        title="BOM References",
    )


class Occurrence(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the occurrence elsewhere in the BOM. Every bom-ref"
            " MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    location: str = Field(..., description="The location or path to where the component was found.", title="Location")


class Frame(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    package: Optional[str] = Field(
        None,
        description=(
            "A package organizes modules into namespaces, providing a unique namespace for each type it contains."
        ),
        title="Package",
    )
    module: str = Field(
        ..., description="A module or class that encloses functions/methods and other code.", title="Module"
    )
    function: Optional[str] = Field(
        None, description="A block of code designed to perform a particular task.", title="Function"
    )
    parameters: Optional[List[str]] = Field(
        None, description="Optional arguments that are passed to the module or function.", title="Parameters"
    )
    line: Optional[int] = Field(None, description="The line number the code that is called resides on.", title="Line")
    column: Optional[int] = Field(None, description="The column the code that is called resides.", title="Column")
    fullFilename: Optional[str] = Field(
        None, description="The full path and filename of the module.", title="Full Filename"
    )


class Callstack(CycloneDXBaseModel):
    """
    Evidence of the components use through the callstack.
    """

    class Config:
        extra = Extra.forbid

    frames: Optional[List[Frame]] = Field(None, title="Methods")


class ComponentEvidence(CycloneDXBaseModel):
    """
    Provides the ability to document evidence collected through various forms of extraction or analysis.
    """

    class Config:
        extra = Extra.forbid

    identity: Optional[Identity] = Field(None, description="Evidence that substantiates the identity of a component.")
    occurrences: Optional[List[Occurrence]] = Field(
        None,
        description="Evidence of individual instances of a component spread across multiple locations.",
        title="Occurrences",
    )
    callstack: Optional[Callstack] = Field(None, description="Evidence of the components use through the callstack.")
    licenses: Optional[List] = Field(
        None,
        description="EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)",
        title="Component License(s)",
    )
    copyright: Optional[List[Copyright]] = Field(None, title="Copyright")


class AggregateType(str, Enum):
    complete = "complete"
    incomplete = "incomplete"
    incomplete_first_party_only = "incomplete_first_party_only"
    incomplete_first_party_proprietary_only = "incomplete_first_party_proprietary_only"
    incomplete_first_party_opensource_only = "incomplete_first_party_opensource_only"
    incomplete_third_party_only = "incomplete_third_party_only"
    incomplete_third_party_proprietary_only = "incomplete_third_party_proprietary_only"
    incomplete_third_party_opensource_only = "incomplete_third_party_opensource_only"
    unknown = "unknown"
    not_specified = "not_specified"


class Property(CycloneDXBaseModel):
    """
    Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
    """

    name: Optional[str] = Field(
        None,
        description="The name of the property. Duplicate names are allowed, each potentially having a different value.",
        title="Name",
    )
    value: Optional[str] = Field(None, description="The value of the property.", title="Value")


class Note(CycloneDXBaseModel):
    """
    A note containing the locale and content.
    """

    class Config:
        extra = Extra.forbid

    locale: Optional[str] = Field(
        None,
        description=(
            "The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include:"
            ' "en", "en-US", "fr" and "fr-CA"'
        ),
        regex="^([a-z]{2})(-[A-Z]{2})?$",
        title="Locale",
    )
    text: Attachment = Field(
        ..., description="Specifies the full content of the release note.", title="Release note content"
    )


class ReleaseNotes(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field(
        ...,
        description="The software versioning type the release note describes.",
        examples=["major", "minor", "patch", "pre-release", "internal"],
        title="Type",
    )
    title: Optional[str] = Field(None, description="The title of the release.", title="Title")
    featuredImage: Optional[str] = Field(
        None,
        description="The URL to an image that may be prominently displayed with the release note.",
        title="Featured image",
    )
    socialImage: Optional[str] = Field(
        None,
        description="The URL to an image that may be used in messaging on social media platforms.",
        title="Social image",
    )
    description: Optional[str] = Field(None, description="A short description of the release.", title="Description")
    timestamp: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the release note was created.", title="Timestamp"
    )
    aliases: Optional[List[str]] = Field(
        None,
        description=(
            "One or more alternate names the release may be referred to. This may include unofficial terms used by"
            " development and marketing teams (e.g. code names)."
        ),
        title="Aliases",
    )
    tags: Optional[List[str]] = Field(
        None, description="One or more tags that may aid in search or retrieval of the release note.", title="Tags"
    )
    resolves: Optional[List[Issue]] = Field(
        None, description="A collection of issues that have been resolved.", title="Resolves"
    )
    notes: Optional[List[Note]] = Field(
        None,
        description=(
            "Zero or more release notes containing the locale and content. Multiple note objects may be specified to"
            " support release notes in a wide variety of languages."
        ),
        title="Notes",
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )


class Advisory(CycloneDXBaseModel):
    """
    Title and location where advisory information can be obtained. An advisory is a notification of a threat to a component, service, or system.
    """

    class Config:
        extra = Extra.forbid

    title: Optional[str] = Field(None, description="An optional name of the advisory.", title="Title")
    url: str = Field(..., description="Location where the advisory can be obtained.", title="URL")


class Cwe(CycloneDXBaseModel):
    __root__: int = Field(
        ...,
        description=(
            "Integer representation of a Common Weaknesses Enumerations (CWE). For example 399 (of"
            " https://cwe.mitre.org/data/definitions/399.html)"
        ),
        ge=1,
        title="CWE",
    )


class Severity(str, Enum):
    """
    Textual representation of the severity of the vulnerability adopted by the analysis method. If the analysis method uses values other than what is provided, the user is expected to translate appropriately.
    """

    critical = "critical"
    high = "high"
    medium = "medium"
    low = "low"
    info = "info"
    none = "none"
    unknown = "unknown"


class ScoreMethod(str, Enum):
    """
    Specifies the severity or risk scoring methodology or standard used.

    * CVSSv2 - [Common Vulnerability Scoring System v2](https://www.first.org/cvss/v2/)
    * CVSSv3 - [Common Vulnerability Scoring System v3](https://www.first.org/cvss/v3-0/)
    * CVSSv31 - [Common Vulnerability Scoring System v3.1](https://www.first.org/cvss/v3-1/)
    * CVSSv4 - [Common Vulnerability Scoring System v4](https://www.first.org/cvss/v4-0/)
    * OWASP - [OWASP Risk Rating Methodology](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology)
    * SSVC - [Stakeholder Specific Vulnerability Categorization](https://github.com/CERTCC/SSVC) (all versions)
    """

    CVSSv2 = "CVSSv2"
    CVSSv3 = "CVSSv3"
    CVSSv31 = "CVSSv31"
    CVSSv4 = "CVSSv4"
    OWASP = "OWASP"
    SSVC = "SSVC"
    other = "other"


class ImpactAnalysisState(str, Enum):
    """
    Declares the current state of an occurrence of a vulnerability, after automated or manual analysis.

    * __resolved__ = the vulnerability has been remediated.
    * __resolved\_with\_pedigree__ = the vulnerability has been remediated and evidence of the changes are provided in the affected components pedigree containing verifiable commit history and/or diff(s).
    * __exploitable__ = the vulnerability may be directly or indirectly exploitable.
    * __in\_triage__ = the vulnerability is being investigated.
    * __false\_positive__ = the vulnerability is not specific to the component or service and was falsely identified or associated.
    * __not\_affected__ = the component or service is not affected by the vulnerability. Justification should be specified for all not_affected cases.
    """

    resolved = "resolved"
    resolved_with_pedigree = "resolved_with_pedigree"
    exploitable = "exploitable"
    in_triage = "in_triage"
    false_positive = "false_positive"
    not_affected = "not_affected"


class ImpactAnalysisJustification(str, Enum):
    """
    The rationale of why the impact analysis state was asserted.

    * __code\_not\_present__ = the code has been removed or tree-shaked.
    * __code\_not\_reachable__ = the vulnerable code is not invoked at runtime.
    * __requires\_configuration__ = exploitability requires a configurable option to be set/unset.
    * __requires\_dependency__ = exploitability requires a dependency that is not present.
    * __requires\_environment__ = exploitability requires a certain environment which is not present.
    * __protected\_by\_compiler__ = exploitability requires a compiler flag to be set/unset.
    * __protected\_at\_runtime__ = exploits are prevented at runtime.
    * __protected\_at\_perimeter__ = attacks are blocked at physical, logical, or network perimeter.
    * __protected\_by\_mitigating\_control__ = preventative measures have been implemented that reduce the likelihood and/or impact of the vulnerability.
    """

    code_not_present = "code_not_present"
    code_not_reachable = "code_not_reachable"
    requires_configuration = "requires_configuration"
    requires_dependency = "requires_dependency"
    requires_environment = "requires_environment"
    protected_by_compiler = "protected_by_compiler"
    protected_at_runtime = "protected_at_runtime"
    protected_at_perimeter = "protected_at_perimeter"
    protected_by_mitigating_control = "protected_by_mitigating_control"


class VulnerabilitySource(CycloneDXBaseModel):
    """
    The source of vulnerability information. This is often the organization that published the vulnerability.
    """

    class Config:
        extra = Extra.forbid

    url: Optional[str] = Field(
        None,
        description="The url of the vulnerability documentation as provided by the source.",
        examples=["https://nvd.nist.gov/vuln/detail/CVE-2021-39182"],
        title="URL",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the source.",
        examples=["NVD", "National Vulnerability Database", "OSS Index", "VulnDB", "GitHub Advisories"],
        title="Name",
    )


class Reference(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    id: str = Field(
        ...,
        description="An identifier that uniquely identifies the vulnerability.",
        examples=["CVE-2021-39182", "GHSA-35m5-8cvj-8783", "SNYK-PYTHON-ENROCRYPT-1912876"],
        title="ID",
    )
    source: VulnerabilitySource = Field(..., description="The source that published the vulnerability.")


class ProofOfConcept(CycloneDXBaseModel):
    """
    Evidence used to reproduce the vulnerability.
    """

    reproductionSteps: Optional[str] = Field(
        None, description="Precise steps to reproduce the vulnerability.", title="Steps to Reproduce"
    )
    environment: Optional[str] = Field(
        None, description="A description of the environment in which reproduction was possible.", title="Environment"
    )
    supportingMaterial: Optional[List[Attachment]] = Field(
        None,
        description=(
            "Supporting material that helps in reproducing or understanding how reproduction is possible. This may"
            " include screenshots, payloads, and PoC exploit code."
        ),
        title="Supporting Material",
    )


class ResponseEnum(str, Enum):
    can_not_fix = "can_not_fix"
    will_not_fix = "will_not_fix"
    update = "update"
    rollback = "rollback"
    workaround_available = "workaround_available"


class Analysis(CycloneDXBaseModel):
    """
    An assessment of the impact and exploitability of the vulnerability.
    """

    class Config:
        extra = Extra.forbid

    state: Optional[ImpactAnalysisState] = None
    justification: Optional[ImpactAnalysisJustification] = None
    response: Optional[List[ResponseEnum]] = Field(
        None,
        description=(
            "A response to the vulnerability by the manufacturer, supplier, or project responsible for the affected"
            " component or service. More than one response is allowed. Responses are strongly encouraged for"
            " vulnerabilities where the analysis state is exploitable."
        ),
        title="Response",
    )
    detail: Optional[str] = Field(
        None,
        description=(
            "Detailed description of the impact including methods used during assessment. If a vulnerability is not"
            " exploitable, this field should include specific details on why the component or service is not impacted"
            " by this vulnerability."
        ),
        title="Detail",
    )
    firstIssued: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the analysis was first issued.", title="First Issued"
    )
    lastUpdated: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the analysis was last updated.", title="Last Updated"
    )


class Affect(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    ref: Union[RefLinkType, BomLinkElementType] = Field(
        ..., description="References a component or service by the objects bom-ref", title="Reference"
    )
    versions: Optional[List] = Field(
        None, description="Zero or more individual versions or range of versions.", title="Versions"
    )


class AffectedStatus(str, Enum):
    """
    The vulnerability status of a given version or range of versions of a product. The statuses 'affected' and 'unaffected' indicate that the version is affected or unaffected by the vulnerability. The status 'unknown' indicates that it is unknown or unspecified whether the given version is affected. There can be many reasons for an 'unknown' status, including that an investigation has not been undertaken or that a vendor has not disclosed the status.
    """

    affected = "affected"
    unaffected = "unaffected"
    unknown = "unknown"


class Version(CycloneDXBaseModel):
    __root__: str = Field(..., description="A single version of a component or service.", max_length=1024, min_length=1)


class Range(CycloneDXBaseModel):
    __root__: str = Field(
        ...,
        description=(
            "A version range specified in Package URL Version Range syntax (vers) which is defined at"
            " https://github.com/package-url/purl-spec/VERSION-RANGE-SPEC.rst"
        ),
        max_length=1024,
        min_length=1,
    )


class Type4(str, Enum):
    """
    Learning types describing the learning problem or hybrid learning problem.
    """

    supervised = "supervised"
    unsupervised = "unsupervised"
    reinforcement_learning = "reinforcement-learning"
    semi_supervised = "semi-supervised"
    self_supervised = "self-supervised"


class Approach(CycloneDXBaseModel):
    """
    The overall approach to learning used by the model for problem solving.
    """

    class Config:
        extra = Extra.forbid

    type: Optional[Type4] = Field(
        None,
        description="Learning types describing the learning problem or hybrid learning problem.",
        title="Learning Type",
    )


class Dataset(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    ref: Optional[Union[RefLinkType, BomLinkElementType]] = Field(
        None, description="References a data component by the components bom-ref attribute", title="Reference"
    )


class InputOutputMLParameters(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    format: Optional[str] = Field(
        None,
        description="The data format for input/output to the model. Example formats include string, image, time-series",
    )


class Type5(str, Enum):
    """
    The general theme or subject matter of the data being specified.

    * __source-code__ = Any type of code, code snippet, or data-as-code.
    * __configuration__ = Parameters or settings that may be used by other components.
    * __dataset__ = A collection of data.
    * __definition__ = Data that can be used to create new instances of what the definition defines.
    * __other__ = Any other type of data that does not fit into existing definitions.
    """

    source_code = "source-code"
    configuration = "configuration"
    dataset = "dataset"
    definition = "definition"
    other = "other"


class Contents(CycloneDXBaseModel):
    """
    The contents or references to the contents of the data being described.
    """

    class Config:
        extra = Extra.forbid

    attachment: Optional[Attachment] = Field(
        None, description="An optional way to include textual or encoded data.", title="Data Attachment"
    )
    url: Optional[str] = Field(None, description="The URL to where the data can be retrieved.", title="Data URL")
    properties: Optional[List[Property]] = Field(
        None,
        description="Provides the ability to document name-value parameters used for configuration.",
        title="Configuration Properties",
    )


class Graphic(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(None, description="The name of the graphic.")
    image: Optional[Attachment] = Field(
        None,
        description="The graphic (vector or raster). Base64 encoding MUST be specified for binary images.",
        title="Graphic Image",
    )


class ConfidenceInterval(CycloneDXBaseModel):
    """
    The confidence interval of the metric.
    """

    class Config:
        extra = Extra.forbid

    lowerBound: Optional[str] = Field(None, description="The lower bound of the confidence interval.")
    upperBound: Optional[str] = Field(None, description="The upper bound of the confidence interval.")


class PerformanceMetric(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = Field(None, description="The type of performance metric.")
    value: Optional[str] = Field(None, description="The value of the performance metric.")
    slice: Optional[str] = Field(
        None,
        description="The name of the slice this metric was computed on. By default, assume this metric is not sliced.",
    )
    confidenceInterval: Optional[ConfidenceInterval] = Field(None, description="The confidence interval of the metric.")


class Risk(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(None, description="The name of the risk.")
    mitigationStrategy: Optional[str] = Field(None, description="Strategy used to address this risk.")


class FairnessAssessment(CycloneDXBaseModel):
    """
    Information about the benefits and harms of the model to an identified at risk group.
    """

    class Config:
        extra = Extra.forbid

    groupAtRisk: Optional[str] = Field(
        None, description="The groups or individuals at risk of being systematically disadvantaged by the model."
    )
    benefits: Optional[str] = Field(None, description="Expected benefits to the identified groups.")
    harms: Optional[str] = Field(None, description="Expected harms to the identified groups.")
    mitigationStrategy: Optional[str] = Field(
        None,
        description=(
            "With respect to the benefits and harms outlined, please describe any mitigation strategy implemented."
        ),
    )


class Command(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    executed: Optional[str] = Field(
        None, description="A text representation of the executed command.", title="Executed"
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class AccessMode(str, Enum):
    """
    Describes the read-write access control for the workspace relative to the owning resource instance.
    """

    read_only = "read-only"
    read_write = "read-write"
    read_write_once = "read-write-once"
    write_once = "write-once"
    write_only = "write-only"


class Mode(str, Enum):
    """
    The mode for the volume instance.
    """

    filesystem = "filesystem"
    block = "block"


class Volume(CycloneDXBaseModel):
    """
    An identifiable, logical unit of data storage tied to a physical device.
    """

    class Config:
        extra = Extra.forbid

    uid: Optional[str] = Field(
        None,
        description="The unique identifier for the volume instance within its deployment context.",
        title="Unique Identifier (UID)",
    )
    name: Optional[str] = Field(None, description="The name of the volume instance", title="Name")
    mode: Optional[Mode] = Field("filesystem", description="The mode for the volume instance.", title="Mode")
    path: Optional[str] = Field(None, description="The underlying path created from the actual volume.", title="Path")
    sizeAllocated: Optional[str] = Field(
        None,
        description=(
            "The allocated size of the volume accessible to the associated workspace. This should include the scalar"
            " size as well as IEC standard unit in either decimal or binary form."
        ),
        examples=["10GB", "2Ti", "1Pi"],
        title="Size allocated",
    )
    persistent: Optional[bool] = Field(
        None,
        description="Indicates if the volume persists beyond the life of the resource it is associated with.",
        title="Persistent",
    )
    remote: Optional[bool] = Field(
        None, description="Indicates if the volume is remotely (i.e., network) attached.", title="Remote"
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class Type6(str, Enum):
    """
    The source type of event which caused the trigger to fire.
    """

    manual = "manual"
    api = "api"
    webhook = "webhook"
    scheduled = "scheduled"


class Type7(str, Enum):
    """
    Describes the type of data output.
    """

    artifact = "artifact"
    attestation = "attestation"
    log = "log"
    evidence = "evidence"
    metrics = "metrics"
    other = "other"


class Condition(CycloneDXBaseModel):
    """
    A condition that was used to determine a trigger should be activated.
    """

    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(
        None, description="Describes the set of conditions which cause the trigger to activate.", title="Description"
    )
    expression: Optional[str] = Field(
        None,
        description="The logical expression that was evaluated that determined the trigger should be fired.",
        title="Expression",
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class TaskType(str, Enum):
    copy = "copy"
    clone = "clone"
    lint = "lint"
    scan = "scan"
    merge = "merge"
    build = "build"
    test = "test"
    deliver = "deliver"
    deploy = "deploy"
    release = "release"
    clean = "clean"
    other = "other"


class Parameter(CycloneDXBaseModel):
    """
    A representation of a functional parameter.
    """

    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(None, description="The name of the parameter.", title="Name")
    value: Optional[str] = Field(None, description="The value of the parameter.", title="Value")
    dataType: Optional[str] = Field(None, description="The data type of the parameter.", title="Data type")


class AlgorithmEnum(str, Enum):
    """
    Signature algorithm. The currently recognized JWA [RFC7518] and RFC8037 [RFC8037] asymmetric key algorithms. Note: Unlike RFC8037 [RFC8037] JSF requires explicit Ed* algorithm names instead of "EdDSA".
    """

    RS256 = "RS256"
    RS384 = "RS384"
    RS512 = "RS512"
    PS256 = "PS256"
    PS384 = "PS384"
    PS512 = "PS512"
    ES256 = "ES256"
    ES384 = "ES384"
    ES512 = "ES512"
    Ed25519 = "Ed25519"
    Ed448 = "Ed448"
    HS256 = "HS256"
    HS384 = "HS384"
    HS512 = "HS512"


class KeyType(str, Enum):
    """
    Key type indicator.
    """

    EC = "EC"
    OKP = "OKP"
    RSA = "RSA"


class PublicKey(CycloneDXBaseModel):
    """
    Optional. Public key object.
    """

    class Config:
        extra = Extra.allow

    kty: KeyType


class OrganizationalEntity(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the object elsewhere in the BOM. Every bom-ref MUST"
            " be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    name: Optional[str] = Field(
        None, description="The name of the organization", examples=["Example Inc."], title="Name"
    )
    url: Optional[List[str]] = Field(
        None,
        description="The URL of the organization. Multiple URLs are allowed.",
        examples=["https://example.com"],
        title="URL",
    )
    contact: Optional[List[OrganizationalContact]] = Field(
        None, description="A contact at the organization. Multiple contacts are allowed.", title="Contact"
    )


class Swid(CycloneDXBaseModel):
    """
    Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
    """

    class Config:
        extra = Extra.forbid

    tagId: str = Field(..., description="Maps to the tagId of a SoftwareIdentity.", title="Tag ID")
    name: str = Field(..., description="Maps to the name of a SoftwareIdentity.", title="Name")
    version: Optional[str] = Field("0.0", description="Maps to the version of a SoftwareIdentity.", title="Version")
    tagVersion: Optional[int] = Field(
        0, description="Maps to the tagVersion of a SoftwareIdentity.", title="Tag Version"
    )
    patch: Optional[bool] = Field(False, description="Maps to the patch of a SoftwareIdentity.", title="Patch")
    text: Optional[Attachment] = Field(
        None, description="Specifies the metadata and content of the SWID tag.", title="Attachment text"
    )
    url: Optional[str] = Field(None, description="The URL to the SWID file.", title="URL")


class Hash(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    alg: HashAlg
    content: str = Field(
        ...,
        examples=["3942447fac867ae5cdb3229b658f4d48"],
        regex="^([a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}|[a-fA-F0-9]{96}|[a-fA-F0-9]{128})$",
        title="Hash Content (value)",
    )


class License(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the license elsewhere in the BOM. Every bom-ref MUST"
            " be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    id: Optional[spdx.Schema] = Field(
        None, description="A valid SPDX license ID", examples=["Apache-2.0"], title="License ID (SPDX)"
    )
    name: Optional[str] = Field(
        None,
        description="If SPDX does not define the license used, this field may be used to provide the license name",
        examples=["Acme Software License"],
        title="License Name",
    )
    text: Optional[Attachment] = Field(
        None, description="An optional way to include the textual content of a license.", title="License text"
    )
    url: Optional[str] = Field(
        None,
        description=(
            "The URL to the license file. If specified, a 'license' externalReference should also be specified for"
            " completeness"
        ),
        examples=["https://www.apache.org/licenses/LICENSE-2.0.txt"],
        title="License URL",
    )
    licensing: Optional[Licensing] = Field(
        None,
        description=(
            "Licensing details describing the licensor/licensee, license type, renewal and expiration dates, and other"
            " important metadata"
        ),
        title="Licensing information",
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )


class Commit(CycloneDXBaseModel):
    """
    Specifies an individual commit
    """

    class Config:
        extra = Extra.forbid

    uid: Optional[str] = Field(
        None,
        description=(
            "A unique identifier of the commit. This may be version control specific. For example, Subversion uses"
            " revision numbers whereas git uses commit hashes."
        ),
        title="UID",
    )
    url: Optional[str] = Field(
        None,
        description="The URL to the commit. This URL will typically point to a commit in a version control system.",
        title="URL",
    )
    author: Optional[IdentifiableAction] = Field(
        None, description="The author who created the changes in the commit", title="Author"
    )
    committer: Optional[IdentifiableAction] = Field(
        None, description="The person who committed or pushed the commit", title="Committer"
    )
    message: Optional[str] = Field(
        None, description="The text description of the contents of the commit", title="Message"
    )


class Patch(CycloneDXBaseModel):
    """
    Specifies an individual patch
    """

    class Config:
        extra = Extra.forbid

    type: Type1 = Field(
        ...,
        description=(
            "Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior"
            " or functionality.\n\n* __unofficial__ = A patch which is not developed by the creators or maintainers of"
            " the software being patched. Refer to"
            " [https://en.wikipedia.org/wiki/Unofficial_patch](https://en.wikipedia.org/wiki/Unofficial_patch)\n*"
            " __monkey__ = A patch which dynamically modifies runtime behavior. Refer to"
            " [https://en.wikipedia.org/wiki/Monkey_patch](https://en.wikipedia.org/wiki/Monkey_patch)\n* __backport__"
            " = A patch which takes code from a newer version of software and applies it to older versions of the same"
            " software. Refer to"
            " [https://en.wikipedia.org/wiki/Backporting](https://en.wikipedia.org/wiki/Backporting)\n* __cherry-pick__"
            " = A patch created by selectively applying commits from other versions or branches of the same software."
        ),
        title="Type",
    )
    diff: Optional[Diff] = Field(
        None,
        description=(
            "The patch file (or diff) that show changes. Refer to"
            " [https://en.wikipedia.org/wiki/Diff](https://en.wikipedia.org/wiki/Diff)"
        ),
        title="Diff",
    )
    resolves: Optional[List[Issue]] = Field(
        None, description="A collection of issues the patch resolves", title="Resolves"
    )


class ExternalReference(CycloneDXBaseModel):
    """
    External references provide a way to document systems, sites, and information that may be relevant, but are not included with the BOM. They may also establish specific relationships within or external to the BOM.
    """

    class Config:
        extra = Extra.forbid

    url: Union[str, Union[BomLinkDocumentType, BomLinkElementType]] = Field(
        ...,
        description=(
            "The URI (URL or URN) to the external reference. External references are URIs and therefore can accept any"
            " URL scheme including https ([RFC-7230](https://www.ietf.org/rfc/rfc7230.txt)), mailto"
            " ([RFC-2368](https://www.ietf.org/rfc/rfc2368.txt)), tel"
            " ([RFC-3966](https://www.ietf.org/rfc/rfc3966.txt)), and dns"
            " ([RFC-4501](https://www.ietf.org/rfc/rfc4501.txt)). External references may also include formally"
            " registered URNs such as [CycloneDX BOM-Link](https://cyclonedx.org/capabilities/bomlink/) to reference"
            " CycloneDX BOMs or any object within a BOM. BOM-Link transforms applicable external references into"
            " relationships that can be expressed in a BOM or across BOMs."
        ),
        title="URL",
    )
    comment: Optional[str] = Field(
        None, description="An optional comment describing the external reference", title="Comment"
    )
    type: Type3 = Field(
        ...,
        description=(
            "Specifies the type of external reference.\n\n* __vcs__ = Version Control System\n* __issue-tracker__ ="
            " Issue or defect tracking system, or an Application Lifecycle Management (ALM) system\n* __website__ ="
            " Website\n* __advisories__ = Security advisories\n* __bom__ = Bill of Materials (SBOM, OBOM, HBOM,"
            " SaaSBOM, etc)\n* __mailing-list__ = Mailing list or discussion group\n* __social__ = Social media"
            " account\n* __chat__ = Real-time chat platform\n* __documentation__ = Documentation, guides, or how-to"
            " instructions\n* __support__ = Community or commercial support\n* __distribution__ = Direct or repository"
            " download location\n* __distribution-intake__ = The location where a component was published to. This is"
            ' often the same as "distribution" but may also include specialized publishing processes that act as an'
            " intermediary\n* __license__ = The URL to the license file. If a license URL has been defined in the"
            " license node, it should also be defined as an external reference for completeness\n* __build-meta__ ="
            " Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)\n* __build-system__ = URL to"
            " an automated build system\n* __release-notes__ = URL to release notes\n* __security-contact__ = Specifies"
            " a way to contact the maintainer, supplier, or provider in the event of a security incident. Common URIs"
            " include links to a disclosure procedure, a mailto (RFC-2368) that specifies an email address, a tel"
            " (RFC-3966) that specifies a phone number, or dns (RFC-4501) that specifies the records containing DNS"
            " Security TXT\n* __model-card__ = A model card describes the intended uses of a machine learning model,"
            " potential limitations, biases, ethical considerations, training parameters, datasets used to train the"
            " model, performance metrics, and other relevant data useful for ML transparency\n* __log__ = A record of"
            " events that occurred in a computer system or application, such as problems, errors, or information on"
            " current operations\n* __configuration__ = Parameters or settings that may be used by other components or"
            " services\n* __evidence__ = Information used to substantiate a claim\n* __formulation__ = Describes how a"
            " component or service was manufactured or deployed\n* __attestation__ = Human or machine-readable"
            " statements containing facts, evidence, or testimony\n* __threat-model__ = An enumeration of identified"
            " weaknesses, threats, and countermeasures, dataflow diagram (DFD), attack tree, and other supporting"
            " documentation in human-readable or machine-readable format\n* __adversary-model__ = The defined"
            " assumptions, goals, and capabilities of an adversary.\n* __risk-assessment__ = Identifies and analyzes"
            " the potential of future events that may negatively impact individuals, assets, and/or the environment."
            " Risk assessments may also include judgments on the tolerability of each risk.\n*"
            " __vulnerability-assertion__ = A Vulnerability Disclosure Report (VDR) which asserts the known and"
            " previously unknown vulnerabilities that affect a component, service, or product including the analysis"
            " and findings describing the impact (or lack of impact) that the reported vulnerability has on a"
            " component, service, or product.\n* __exploitability-statement__ = A Vulnerability Exploitability eXchange"
            " (VEX) which asserts the known vulnerabilities that do not affect a product, product family, or"
            " organization, and optionally the ones that do. The VEX should include the analysis and findings"
            " describing the impact (or lack of impact) that the reported vulnerability has on the product, product"
            " family, or organization.\n* __pentest-report__ = Results from an authorized simulated cyberattack on a"
            " component or service, otherwise known as a penetration test\n* __static-analysis-report__ = SARIF or"
            " proprietary machine or human-readable report for which static analysis has identified code quality,"
            " security, and other potential issues with the source code\n* __dynamic-analysis-report__ = Dynamic"
            " analysis report that has identified issues such as vulnerabilities and misconfigurations\n*"
            " __runtime-analysis-report__ = Report generated by analyzing the call stack of a running application\n*"
            " __component-analysis-report__ = Report generated by Software Composition Analysis (SCA), container"
            " analysis, or other forms of component analysis\n* __maturity-report__ = Report containing a formal"
            " assessment of an organization, business unit, or team against a maturity model\n*"
            " __certification-report__ = Industry, regulatory, or other certification from an accredited (if"
            " applicable) certification body\n* __quality-metrics__ = Report or system in which quality metrics can be"
            " obtained\n* __codified-infrastructure__ = Code or configuration that defines and provisions virtualized"
            " infrastructure, commonly referred to as Infrastructure as Code (IaC)\n* __poam__ = Plans of Action and"
            ' Milestones (POAM) compliment an "attestation" external reference. POAM is defined by NIST as a "document'
            " that identifies tasks needing to be accomplished. It details resources required to accomplish the"
            " elements of the plan, any milestones in meeting the tasks and scheduled completion dates for the"
            ' milestones".\n* __other__ = Use this if no other types accurately describe the purpose of the external'
            " reference"
        ),
        title="Type",
    )
    hashes: Optional[List[Hash]] = Field(
        None, description="The hashes of the external reference (if applicable).", title="Hashes"
    )


class Rating(CycloneDXBaseModel):
    """
    Defines the severity or risk ratings of a vulnerability.
    """

    class Config:
        extra = Extra.forbid

    source: Optional[VulnerabilitySource] = Field(
        None, description="The source that calculated the severity or risk rating of the vulnerability."
    )
    score: Optional[float] = Field(None, description="The numerical score of the rating.", title="Score")
    severity: Optional[Severity] = Field(
        None,
        description="Textual representation of the severity that corresponds to the numerical score of the rating.",
    )
    method: Optional[ScoreMethod] = None
    vector: Optional[str] = Field(
        None, description="Textual representation of the metric values used to score the vulnerability", title="Vector"
    )
    justification: Optional[str] = Field(
        None, description="An optional reason for rating the vulnerability as it was", title="Justification"
    )


class Credits(CycloneDXBaseModel):
    """
    Individuals or organizations credited with the discovery of the vulnerability.
    """

    class Config:
        extra = Extra.forbid

    organizations: Optional[List[OrganizationalEntity]] = Field(
        None, description="The organizations credited with vulnerability discovery.", title="Organizations"
    )
    individuals: Optional[List[OrganizationalContact]] = Field(
        None,
        description=(
            "The individuals, not associated with organizations, that are credited with vulnerability discovery."
        ),
        title="Individuals",
    )


class Considerations(CycloneDXBaseModel):
    """
    What considerations should be taken into account regarding the model's construction, training, and application?
    """

    class Config:
        extra = Extra.forbid

    users: Optional[List[str]] = Field(None, description="Who are the intended users of the model?", title="Users")
    useCases: Optional[List[str]] = Field(
        None, description="What are the intended use cases of the model?", title="Use Cases"
    )
    technicalLimitations: Optional[List[str]] = Field(
        None,
        description=(
            "What are the known technical limitations of the model? E.g. What kind(s) of data should the model be"
            " expected not to perform well on? What are the factors that might degrade model performance?"
        ),
        title="Technical Limitations",
    )
    performanceTradeoffs: Optional[List[str]] = Field(
        None,
        description="What are the known tradeoffs in accuracy/performance of the model?",
        title="Performance Tradeoffs",
    )
    ethicalConsiderations: Optional[List[Risk]] = Field(
        None,
        description="What are the ethical (or environmental) risks involved in the application of this model?",
        title="Ethical Considerations",
    )
    fairnessAssessments: Optional[List[FairnessAssessment]] = Field(
        None,
        description=(
            "How does the model affect groups at risk of being systematically disadvantaged? What are the harms and"
            " benefits to the various affected groups?"
        ),
        title="Fairness Assessments",
    )


class DataGovernanceResponsibleParty(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    organization: Optional[OrganizationalEntity] = Field(None, title="Organization")
    contact: Optional[OrganizationalContact] = Field(None, title="Individual")


class GraphicsCollection(CycloneDXBaseModel):
    """
    A collection of graphics that represent various measurements.
    """

    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(None, description="A description of this collection of graphics.")
    collection: Optional[List[Graphic]] = Field(None, description="A collection of graphics.")


class Step(CycloneDXBaseModel):
    """
    Executes specific commands or tools in order to accomplish its owning task as part of a sequence.
    """

    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(None, description="A name for the step.", title="Name")
    description: Optional[str] = Field(None, description="A description of the step.", title="Description")
    commands: Optional[List[Command]] = Field(
        None, description="Ordered list of commands or directives for the step", title="Commands"
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class ResourceReferenceChoice(CycloneDXBaseModel):
    """
    A reference to a locally defined resource (e.g., a bom-ref) or an externally accessible resource.
    """

    class Config:
        extra = Extra.forbid

    ref: Optional[Union[RefLinkType, BomLinkElementType]] = Field(
        None, description="References an object by its bom-ref attribute", title="BOM Reference"
    )
    externalReference: Optional[ExternalReference] = Field(
        None, description="Reference to an externally accessible resource.", title="External reference"
    )


class Signer(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    algorithm: Union[AlgorithmEnum, AnyUrl]
    keyId: Optional[str] = Field(
        None, description="Optional. Application specific string identifying the signature key.", title="Key ID"
    )
    publicKey: Optional[PublicKey] = Field(None, description="Optional. Public key object.", title="Public key")
    certificatePath: Optional[List[str]] = Field(
        None,
        description=(
            "Optional. Sorted array of X.509 [RFC5280] certificates, where the first element must contain the signature"
            " certificate. The certificate path must be contiguous but is not required to be complete."
        ),
        title="Certificate path",
    )
    excludes: Optional[List[str]] = Field(
        None,
        description=(
            "Optional. Array holding the names of one or more application level properties that must be excluded from"
            ' the signature process. Note that the "excludes" property itself, must also be excluded from the signature'
            ' process. Since both the "excludes" property and the associated data it points to are unsigned, a'
            " conforming JSF implementation must provide options for specifying which properties to accept."
        ),
        title="Excludes",
    )
    value: str = Field(
        ...,
        description=(
            "The signature data. Note that the binary representation must follow the JWA [RFC7518] specifications."
        ),
        title="Signature",
    )


class Tool(CycloneDXBaseModel):
    """
    [Deprecated] - DO NOT USE. This will be removed in a future version. This will be removed in a future version. Use component or service instead. Information about the automated or manual tool used
    """

    class Config:
        extra = Extra.forbid

    vendor: Optional[str] = Field(None, description="The name of the vendor who created the tool", title="Tool Vendor")
    name: Optional[str] = Field(None, description="The name of the tool", title="Tool Name")
    version: Optional[str] = Field(None, description="The version of the tool", title="Tool Version")
    hashes: Optional[List[Hash]] = Field(None, description="The hashes of the tool (if applicable).", title="Hashes")
    externalReferences: Optional[List[ExternalReference]] = Field(
        None,
        description=(
            "External references provide a way to document systems, sites, and information that may be relevant, but"
            " are not included with the BOM. They may also establish specific relationships within or external to the"
            " BOM."
        ),
        title="External References",
    )


class QuantitativeAnalysis(CycloneDXBaseModel):
    """
    A quantitative analysis of the model
    """

    class Config:
        extra = Extra.forbid

    performanceMetrics: Optional[List[PerformanceMetric]] = Field(
        None,
        description=(
            "The model performance metrics being reported. Examples may include accuracy, F1 score, precision, top-3"
            " error rates, MSC, etc."
        ),
        title="Performance Metrics",
    )
    graphics: Optional[GraphicsCollection] = None


class DataGovernance(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    custodians: Optional[List[DataGovernanceResponsibleParty]] = Field(
        None,
        description="Data custodians are responsible for the safe custody, transport, and storage of data.",
        title="Data Custodians",
    )
    stewards: Optional[List[DataGovernanceResponsibleParty]] = Field(
        None,
        description="Data stewards are responsible for data content, context, and associated business rules.",
        title="Data Stewards",
    )
    owners: Optional[List[DataGovernanceResponsibleParty]] = Field(
        None, description="Data owners are concerned with risk and appropriate access to data.", title="Data Owners"
    )


class Workspace(CycloneDXBaseModel):
    """
    A named filesystem or data resource shareable by workflow tasks.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: str = Field(
        ...,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the workspace elsewhere in the BOM. Every bom-ref"
            " MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    uid: str = Field(
        ...,
        description="The unique identifier for the resource instance within its deployment context.",
        title="Unique Identifier (UID)",
    )
    name: Optional[str] = Field(None, description="The name of the resource instance.", title="Name")
    aliases: Optional[List[str]] = Field(
        None,
        description=(
            "The names for the workspace as referenced by other workflow tasks. Effectively, a name mapping so other"
            " tasks can use their own local name in their steps."
        ),
        title="Aliases",
    )
    description: Optional[str] = Field(None, description="A description of the resource instance.", title="Description")
    resourceReferences: Optional[List[ResourceReferenceChoice]] = Field(
        None,
        description="References to component or service resources that are used to realize the resource instance.",
        title="Resource references",
    )
    accessMode: Optional[AccessMode] = Field(
        None,
        description=(
            "Describes the read-write access control for the workspace relative to the owning resource instance."
        ),
        title="Access mode",
    )
    mountPath: Optional[str] = Field(
        None,
        description=(
            "A path to a location on disk where the workspace will be available to the associated task's steps."
        ),
        title="Mount path",
    )
    managedDataType: Optional[str] = Field(
        None,
        description="The name of a domain-specific data type the workspace represents.",
        examples=["ConfigMap", "Secret"],
        title="Managed data type",
    )
    volumeRequest: Optional[str] = Field(
        None,
        description="Identifies the reference to the request for a specific volume type and parameters.",
        examples=["a kubernetes Persistent Volume Claim (PVC) name"],
        title="Volume request",
    )
    volume: Optional[Volume] = Field(
        None,
        description="Information about the actual volume instance allocated to the workspace.",
        examples=["see https://kubernetes.io/docs/concepts/storage/persistent-volumes/"],
        title="Volume",
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class Event(CycloneDXBaseModel):
    """
    Represents something that happened that may trigger a response.
    """

    class Config:
        extra = Extra.forbid

    uid: Optional[str] = Field(None, description="The unique identifier of the event.", title="Unique Identifier (UID)")
    description: Optional[str] = Field(None, description="A description of the event.", title="Description")
    timeReceived: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the event was received.", title="Time Received"
    )
    data: Optional[Attachment] = Field(None, description="Encoding of the raw event data.", title="Data")
    source: Optional[ResourceReferenceChoice] = Field(
        None, description="References the component or service that was the source of the event", title="Source"
    )
    target: Optional[ResourceReferenceChoice] = Field(
        None, description="References the component or service that was the target of the event", title="Target"
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class InputType(CycloneDXBaseModel):
    """
    Type that represents various input data types and formats.
    """

    class Config:
        extra = Extra.forbid

    source: Optional[ResourceReferenceChoice] = Field(
        None,
        description=(
            "A references to the component or service that provided the input to the task (e.g., reference to a service"
            " with data flow value of `inbound`)"
        ),
        examples=["source code repository", "database"],
        title="Source",
    )
    target: Optional[ResourceReferenceChoice] = Field(
        None,
        description=(
            "A reference to the component or service that received or stored the input if not the task itself (e.g., a"
            " local, named storage workspace)"
        ),
        examples=["workspace", "directory"],
        title="Target",
    )
    resource: Optional[ResourceReferenceChoice] = Field(
        None,
        description="A reference to an independent resource provided as an input to a task by the workflow runtime.",
        examples=[
            "reference to a configuration file in a repository (i.e., a bom-ref)",
            "reference to a scanning service used in a task (i.e., a bom-ref)",
        ],
        title="Resource",
    )
    parameters: Optional[List[Parameter]] = Field(
        None,
        description="Inputs that have the form of parameters with names and values.",
        title="Parameters",
    )
    environmentVars: Optional[List[Union[Property, str]]] = Field(
        None,
        description="Inputs that have the form of parameters with names and values.",
        title="Environment variables",
    )
    data: Optional[Attachment] = Field(None, description="Inputs that have the form of data.", title="Data")
    properties: Optional[List[Property]] = Field(None, title="Properties")


class OutputType(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type7] = Field(None, description="Describes the type of data output.", title="Type")
    source: Optional[ResourceReferenceChoice] = Field(
        None,
        description="Component or service that generated or provided the output from the task (e.g., a build tool)",
        title="Source",
    )
    target: Optional[ResourceReferenceChoice] = Field(
        None,
        description=(
            "Component or service that received the output from the task (e.g., reference to an artifactory service"
            " with data flow value of `outbound`)"
        ),
        examples=["a log file described as an `externalReference` within its target domain."],
        title="Target",
    )
    resource: Optional[ResourceReferenceChoice] = Field(
        None,
        description="A reference to an independent resource generated as output by the task.",
        examples=["configuration file", "source code", "scanning service"],
        title="Resource",
    )
    data: Optional[Attachment] = Field(None, description="Outputs that have the form of data.", title="Data")
    environmentVars: Optional[List[Union[Property, str]]] = Field(
        None,
        description="Outputs that have the form of environment variables.",
        title="Environment variables",
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class Signature1(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    signers: Optional[List[Signer]] = Field(
        None, description="Unique top level property for Multiple Signatures. (multisignature)", title="Signature"
    )


class Signature2(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    chain: Optional[List[Signer]] = Field(
        None, description="Unique top level property for Signature Chains. (signaturechain)", title="Signature"
    )


class ServiceData(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    flow: DataFlowDirection = Field(
        ...,
        description=(
            "Specifies the flow direction of the data. Direction is relative to the service. Inbound flow states that"
            " data enters the service. Outbound flow states that data leaves the service. Bi-directional states that"
            " data flows both ways, and unknown states that the direction is not known."
        ),
        title="Directional Flow",
    )
    classification: str = Field(
        ...,
        description=(
            "Data classification tags data according to its type, sensitivity, and value if altered, stolen, or"
            " destroyed."
        ),
        title="Data Classification",
    )
    name: Optional[str] = Field(
        None, description="Name for the defined data", examples=["Credit card reporting"], title="Name"
    )
    description: Optional[str] = Field(
        None,
        description="Short description of the data content and usage",
        examples=["Credit card information being exchanged in between the web app and the database"],
        title="Description",
    )
    governance: Optional[DataGovernance] = Field(None, title="Data Governance")
    source: Optional[List[Union[str, BomLinkElementType]]] = Field(
        None,
        description="The URI, URL, or BOM-Link of the components or services the data came in from",
        title="Source",
    )
    destination: Optional[List[Union[str, BomLinkElementType]]] = Field(
        None,
        description="The URI, URL, or BOM-Link of the components or services the data is sent to",
        title="Destination",
    )


class ComponentData(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the dataset elsewhere in the BOM. Every bom-ref MUST"
            " be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    type: Type5 = Field(
        ...,
        description=(
            "The general theme or subject matter of the data being specified.\n\n* __source-code__ = Any type of code,"
            " code snippet, or data-as-code.\n* __configuration__ = Parameters or settings that may be used by other"
            " components.\n* __dataset__ = A collection of data.\n* __definition__ = Data that can be used to create"
            " new instances of what the definition defines.\n* __other__ = Any other type of data that does not fit"
            " into existing definitions."
        ),
        title="Type of Data",
    )
    name: Optional[str] = Field(None, description="The name of the dataset.")
    contents: Optional[Contents] = Field(
        None,
        description="The contents or references to the contents of the data being described.",
        title="Data Contents",
    )
    classification: Optional[str] = Field(
        None,
        description=(
            "Data classification tags data according to its type, sensitivity, and value if altered, stolen, or"
            " destroyed."
        ),
        title="Data Classification",
    )
    sensitiveData: Optional[List[str]] = Field(None, description="A description of any sensitive data in a dataset.")
    graphics: Optional[GraphicsCollection] = None
    description: Optional[str] = Field(
        None,
        description=(
            "A description of the dataset. Can describe size of dataset, whether it's used for source code, training,"
            " testing, or validation, etc."
        ),
    )
    governance: Optional[DataGovernance] = Field(None, title="Data Governance")


class Trigger(CycloneDXBaseModel):
    """
    Represents a resource that can conditionally activate (or fire) tasks based upon associated events and their data.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: str = Field(
        ...,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the trigger elsewhere in the BOM. Every bom-ref MUST"
            " be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    uid: str = Field(
        ...,
        description="The unique identifier for the resource instance within its deployment context.",
        title="Unique Identifier (UID)",
    )
    name: Optional[str] = Field(None, description="The name of the resource instance.", title="Name")
    description: Optional[str] = Field(None, description="A description of the resource instance.", title="Description")
    resourceReferences: Optional[List[ResourceReferenceChoice]] = Field(
        None,
        description="References to component or service resources that are used to realize the resource instance.",
        title="Resource references",
    )
    type: Type6 = Field(..., description="The source type of event which caused the trigger to fire.", title="Type")
    event: Optional[Event] = Field(
        None, description="The event data that caused the associated trigger to activate.", title="Event"
    )
    conditions: Optional[List[Condition]] = Field(
        None,
    )
    timeActivated: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the trigger was activated.", title="Time activated"
    )
    inputs: Optional[List[InputType]] = Field(
        None,
        description="Represents resources and data brought into a task at runtime by executor or task commands",
        examples=["a `configuration` file which was declared as a local `component` or `externalReference`"],
        title="Inputs",
    )
    outputs: Optional[List[OutputType]] = Field(
        None,
        description="Represents resources and data output from a task at runtime by executor or task commands",
        examples=["a log file or metrics data produced by the task"],
        title="Outputs",
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class Service(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the service elsewhere in the BOM. Every bom-ref MUST"
            " be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    provider: Optional[OrganizationalEntity] = Field(
        None, description="The organization that provides the service.", title="Provider"
    )
    group: Optional[str] = Field(
        None,
        description=(
            "The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or"
            " project that produced the service or domain name. Whitespace and special characters should be avoided."
        ),
        examples=["com.acme"],
        title="Service Group",
    )
    name: str = Field(
        ...,
        description="The name of the service. This will often be a shortened, single name of the service.",
        examples=["ticker-service"],
        title="Service Name",
    )
    version: Optional[str] = Field(
        None, description="The service version.", examples=["1.0.0"], title="Service Version"
    )
    description: Optional[str] = Field(
        None, description="Specifies a description for the service", title="Service Description"
    )
    endpoints: Optional[List[str]] = Field(
        None,
        description="The endpoint URIs of the service. Multiple endpoints are allowed.",
        examples=["https://example.com/api/v1/ticker"],
        title="Endpoints",
    )
    authenticated: Optional[bool] = Field(
        None,
        description=(
            "A boolean value indicating if the service requires authentication. A value of true indicates the service"
            " requires authentication prior to use. A value of false indicates the service does not require"
            " authentication."
        ),
        title="Authentication Required",
    )
    x_trust_boundary: Optional[bool] = Field(
        None,
        alias="x-trust-boundary",
        description=(
            "A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true"
            " indicates that by using the service, a trust boundary is crossed. A value of false indicates that by"
            " using the service, a trust boundary is not crossed."
        ),
        title="Crosses Trust Boundary",
    )
    trustZone: Optional[str] = Field(
        None, description="The name of the trust zone the service resides in.", title="Trust Zone"
    )
    data: Optional[List[ServiceData]] = Field(
        None,
        description=(
            "Specifies information about the data including the directional flow of data and the data classification."
        ),
        title="Data",
    )
    licenses: Optional[List] = Field(
        None,
        description="EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)",
        title="Component License(s)",
    )
    externalReferences: Optional[List[ExternalReference]] = Field(
        None,
        description=(
            "External references provide a way to document systems, sites, and information that may be relevant, but"
            " are not included with the BOM. They may also establish specific relationships within or external to the"
            " BOM."
        ),
        title="External References",
    )
    services: Optional[List[Service]] = Field(
        None,
        description=(
            "A list of services included or deployed behind the parent service. This is not a dependency tree. It"
            " provides a way to specify a hierarchical representation of service assemblies."
        ),
        title="Services",
    )
    releaseNotes: Optional[ReleaseNotes] = Field(
        None, description="Specifies optional release notes.", title="Release notes"
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )
    signature: Optional[Union[Signature1, Signature2, Signer]] = Field(
        None,
        description=(
            "Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html)."
        ),
        title="Signature",
    )


class Compositions(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the composition elsewhere in the BOM. Every bom-ref"
            " MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    aggregate: AggregateType = Field(
        ...,
        description=(
            "Specifies an aggregate type that describe how complete a relationship is.\n\n* __complete__ = The"
            " relationship is complete. No further relationships including constituent components, services, or"
            " dependencies are known to exist.\n* __incomplete__ = The relationship is incomplete. Additional"
            " relationships exist and may include constituent components, services, or dependencies.\n*"
            " __incomplete&#95;first&#95;party&#95;only__ = The relationship is incomplete. Only relationships for"
            " first-party components, services, or their dependencies are represented.\n*"
            " __incomplete&#95;first&#95;party&#95;proprietary&#95;only__ = The relationship is incomplete. Only"
            " relationships for first-party components, services, or their dependencies are represented, limited"
            " specifically to those that are proprietary.\n* __incomplete&#95;first&#95;party&#95;opensource&#95;only__"
            " = The relationship is incomplete. Only relationships for first-party components, services, or their"
            " dependencies are represented, limited specifically to those that are opensource.\n*"
            " __incomplete&#95;third&#95;party&#95;only__ = The relationship is incomplete. Only relationships for"
            " third-party components, services, or their dependencies are represented.\n*"
            " __incomplete&#95;third&#95;party&#95;proprietary&#95;only__ = The relationship is incomplete. Only"
            " relationships for third-party components, services, or their dependencies are represented, limited"
            " specifically to those that are proprietary.\n* __incomplete&#95;third&#95;party&#95;opensource&#95;only__"
            " = The relationship is incomplete. Only relationships for third-party components, services, or their"
            " dependencies are represented, limited specifically to those that are opensource.\n* __unknown__ = The"
            " relationship may be complete or incomplete. This usually signifies a 'best-effort' to obtain constituent"
            " components, services, or dependencies but the completeness is inconclusive.\n* __not&#95;specified__ ="
            " The relationship completeness is not specified.\n"
        ),
        title="Aggregate",
    )
    assemblies: Optional[List[Union[RefLinkType, BomLinkElementType]]] = Field(
        None,
        description=(
            "The bom-ref identifiers of the components or services being described. Assemblies refer to nested"
            " relationships whereby a constituent part may include other constituent parts. References do not cascade"
            " to child parts. References are explicit for the specified constituent part only."
        ),
        title="BOM references",
    )
    dependencies: Optional[List[str]] = Field(
        None,
        description=(
            "The bom-ref identifiers of the components or services being described. Dependencies refer to a"
            " relationship whereby an independent constituent part requires another independent constituent part."
            " References do not cascade to transitive dependencies. References are explicit for the specified"
            " dependency only."
        ),
        title="BOM references",
    )
    vulnerabilities: Optional[List[str]] = Field(
        None,
        description="The bom-ref identifiers of the vulnerabilities being described.",
        title="BOM references",
    )
    signature: Optional[Union[Signature1, Signature2, Signer]] = Field(
        None,
        description=(
            "Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html)."
        ),
        title="Signature",
    )


class Annotations(CycloneDXBaseModel):
    """
    A comment, note, explanation, or similar textual content which provides additional context to the object(s) being annotated.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the annotation elsewhere in the BOM. Every bom-ref"
            " MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    subjects: List[Union[RefLinkType, BomLinkElementType]] = Field(
        ...,
        description=(
            "The object in the BOM identified by its bom-ref. This is often a component or service, but may be any"
            " object type supporting bom-refs."
        ),
        title="BOM References",
    )
    timestamp: datetime = Field(
        ..., description="The date and time (timestamp) when the annotation was created.", title="Timestamp"
    )
    text: str = Field(..., description="The textual content of the annotation.", title="Text")
    signature: Optional[Union[Signature1, Signature2, Signer]] = Field(
        None,
        description=(
            "Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html)."
        ),
        title="Signature",
    )


class ModelParameters(CycloneDXBaseModel):
    """
    Hyper-parameters for construction of the model.
    """

    class Config:
        extra = Extra.forbid

    approach: Optional[Approach] = Field(
        None, description="The overall approach to learning used by the model for problem solving.", title="Approach"
    )
    task: Optional[str] = Field(
        None,
        description=(
            "Directly influences the input and/or output. Examples include classification, regression, clustering, etc."
        ),
        title="Task",
    )
    architectureFamily: Optional[str] = Field(
        None,
        description=(
            "The model architecture family such as transformer network, convolutional neural network, residual neural"
            " network, LSTM neural network, etc."
        ),
        title="Architecture Family",
    )
    modelArchitecture: Optional[str] = Field(
        None,
        description="The specific architecture of the model such as GPT-1, ResNet-50, YOLOv3, etc.",
        title="Model Architecture",
    )
    datasets: Optional[List[Union[ComponentData, Dataset]]] = Field(
        None, description="The datasets used to train and evaluate the model.", title="Datasets"
    )
    inputs: Optional[List[InputOutputMLParameters]] = Field(
        None, description="The input format(s) of the model", title="Inputs"
    )
    outputs: Optional[List[InputOutputMLParameters]] = Field(
        None, description="The output format(s) from the model", title="Outputs"
    )


class ModelCard(CycloneDXBaseModel):
    """
    A model card describes the intended uses of a machine learning model and potential limitations, including biases and ethical considerations. Model cards typically contain the training parameters, which datasets were used to train the model, performance metrics, and other relevant data useful for ML transparency. This object SHOULD be specified for any component of type `machine-learning-model` and MUST NOT be specified for other component types.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the model card elsewhere in the BOM. Every bom-ref"
            " MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    modelParameters: Optional[ModelParameters] = Field(
        None, description="Hyper-parameters for construction of the model.", title="Model Parameters"
    )
    quantitativeAnalysis: Optional[QuantitativeAnalysis] = Field(
        None, description="A quantitative analysis of the model", title="Quantitative Analysis"
    )
    considerations: Optional[Considerations] = Field(
        None,
        description=(
            "What considerations should be taken into account regarding the model's construction, training, and"
            " application?"
        ),
        title="Considerations",
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )


class Task(CycloneDXBaseModel):
    """
    Describes the inputs, sequence of steps and resources used to accomplish a task and its output.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: str = Field(
        ...,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the task elsewhere in the BOM. Every bom-ref MUST be"
            " unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    uid: str = Field(
        ...,
        description="The unique identifier for the resource instance within its deployment context.",
        title="Unique Identifier (UID)",
    )
    name: Optional[str] = Field(None, description="The name of the resource instance.", title="Name")
    description: Optional[str] = Field(None, description="A description of the resource instance.", title="Description")
    resourceReferences: Optional[List[ResourceReferenceChoice]] = Field(
        None,
        description="References to component or service resources that are used to realize the resource instance.",
        title="Resource references",
    )
    taskTypes: List[TaskType] = Field(
        ..., description="Indicates the types of activities performed by the set of workflow tasks.", title="Task types"
    )
    trigger: Optional[Trigger] = Field(None, description="The trigger that initiated the task.", title="Trigger")
    steps: Optional[List[Step]] = Field(
        None,
        description="The sequence of steps for the task.",
        title="Steps",
    )
    inputs: Optional[List[InputType]] = Field(
        None,
        description="Represents resources and data brought into a task at runtime by executor or task commands",
        examples=["a `configuration` file which was declared as a local `component` or `externalReference`"],
        title="Inputs",
    )
    outputs: Optional[List[OutputType]] = Field(
        None,
        description="Represents resources and data output from a task at runtime by executor or task commands",
        examples=["a log file or metrics data produced by the task"],
        title="Outputs",
    )
    timeStart: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the task started.", title="Time start"
    )
    timeEnd: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the task ended.", title="Time end"
    )
    workspaces: Optional[List[Workspace]] = Field(
        None,
        description="A set of named filesystem or data resource shareable by workflow tasks.",
        title="Workspaces",
    )
    runtimeTopology: Optional[List[Dependency]] = Field(
        None,
        description="A graph of the component runtime topology for task's instance.",
        title="Runtime topology",
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class Workflow(CycloneDXBaseModel):
    """
    A specialized orchestration task.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: str = Field(
        ...,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the workflow elsewhere in the BOM. Every bom-ref"
            " MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    uid: str = Field(
        ...,
        description="The unique identifier for the resource instance within its deployment context.",
        title="Unique Identifier (UID)",
    )
    name: Optional[str] = Field(None, description="The name of the resource instance.", title="Name")
    description: Optional[str] = Field(None, description="A description of the resource instance.", title="Description")
    resourceReferences: Optional[List[ResourceReferenceChoice]] = Field(
        None,
        description="References to component or service resources that are used to realize the resource instance.",
        title="Resource references",
    )
    tasks: Optional[List[Task]] = Field(
        None,
        description="The tasks that comprise the workflow.",
        title="Tasks",
    )
    taskDependencies: Optional[List[Dependency]] = Field(
        None,
        description="The graph of dependencies between tasks within the workflow.",
        title="Task dependency graph",
    )
    taskTypes: List[TaskType] = Field(
        ..., description="Indicates the types of activities performed by the set of workflow tasks.", title="Task types"
    )
    trigger: Optional[Trigger] = Field(None, description="The trigger that initiated the task.", title="Trigger")
    steps: Optional[List[Step]] = Field(
        None,
        description="The sequence of steps for the task.",
        title="Steps",
    )
    inputs: Optional[List[InputType]] = Field(
        None,
        description="Represents resources and data brought into a task at runtime by executor or task commands",
        examples=["a `configuration` file which was declared as a local `component` or `externalReference`"],
        title="Inputs",
    )
    outputs: Optional[List[OutputType]] = Field(
        None,
        description="Represents resources and data output from a task at runtime by executor or task commands",
        examples=["a log file or metrics data produced by the task"],
        title="Outputs",
    )
    timeStart: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the task started.", title="Time start"
    )
    timeEnd: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the task ended.", title="Time end"
    )
    workspaces: Optional[List[Workspace]] = Field(
        None,
        description="A set of named filesystem or data resource shareable by workflow tasks.",
        title="Workspaces",
    )
    runtimeTopology: Optional[List[Dependency]] = Field(
        None,
        description="A graph of the component runtime topology for workflow's instance.",
        title="Runtime topology",
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


class CyclonedxSoftwareBillOfMaterialsStandard(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    field_schema: Optional[FieldSchema] = Field(None, alias="$schema")
    bomFormat: BomFormat = Field(
        ...,
        description=(
            "Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOMs do not have a"
            ' filename convention nor does JSON schema support namespaces. This value MUST be "CycloneDX".'
        ),
        title="BOM Format",
    )
    specVersion: str = Field(
        ...,
        description="The version of the CycloneDX specification a BOM conforms to (starting at version 1.2).",
        examples=["1.5"],
        title="CycloneDX Specification Version",
    )
    serialNumber: Optional[str] = Field(
        None,
        description=(
            "Every BOM generated SHOULD have a unique serial number, even if the contents of the BOM have not changed"
            " over time. If specified, the serial number MUST conform to RFC-4122. Use of serial numbers are"
            " RECOMMENDED."
        ),
        examples=["urn:uuid:3e671687-395b-41f5-a30f-a58921a69b79"],
        regex="^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        title="BOM Serial Number",
    )
    version: int = Field(
        ...,
        description=(
            "Whenever an existing BOM is modified, either manually or through automated processes, the version of the"
            " BOM SHOULD be incremented by 1. When a system is presented with multiple BOMs with identical serial"
            " numbers, the system SHOULD use the most recent version of the BOM. The default version is '1'."
        ),
        examples=[1],
        ge=1,
        title="BOM Version",
    )
    metadata: Optional[Metadata] = Field(
        None, description="Provides additional information about a BOM.", title="BOM Metadata"
    )
    components: Optional[List[Component]] = Field(
        None,
        description="A list of software and hardware components.",
        title="Components",
    )
    services: Optional[List[Service]] = Field(
        None,
        description=(
            "A list of services. This may include microservices, function-as-a-service, and other types of network or"
            " intra-process services."
        ),
        title="Services",
    )
    externalReferences: Optional[List[ExternalReference]] = Field(
        None,
        description=(
            "External references provide a way to document systems, sites, and information that may be relevant, but"
            " are not included with the BOM. They may also establish specific relationships within or external to the"
            " BOM."
        ),
        title="External References",
    )
    dependencies: Optional[List[Dependency]] = Field(
        None,
        description="Provides the ability to document dependency relationships.",
        title="Dependencies",
    )
    compositions: Optional[List[Compositions]] = Field(
        None,
        description=(
            "Compositions describe constituent parts (including components, services, and dependency relationships) and"
            " their completeness. The completeness of vulnerabilities expressed in a BOM may also be described."
        ),
        title="Compositions",
    )
    vulnerabilities: Optional[List[Vulnerability]] = Field(
        None,
        description="Vulnerabilities identified in components or services.",
        title="Vulnerabilities",
    )
    annotations: Optional[List[Annotations]] = Field(
        None,
        description=(
            "Comments made by people, organizations, or tools about any object with a bom-ref, such as components,"
            " services, vulnerabilities, or the BOM itself. Unlike inventory information, annotations may contain"
            " opinion or commentary from various stakeholders. Annotations may be inline (with inventory) or"
            " externalized via BOM-Link, and may optionally be signed."
        ),
        title="Annotations",
    )
    formulation: Optional[List[Formula]] = Field(
        None,
        description=(
            "Describes how a component or service was manufactured or deployed. This is achieved through the use of"
            " formulas, workflows, tasks, and steps, which declare the precise steps to reproduce along with the"
            " observed formulas describing the steps which transpired in the manufacturing process."
        ),
        title="Formulation",
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )
    signature: Optional[Union[Signature1, Signature2, Signer]] = Field(
        None,
        description=(
            "Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html)."
        ),
        title="Signature",
    )


class ToolModel(CycloneDXBaseModel):
    """
    The tool(s) used in the creation of the BOM.
    """

    class Config:
        extra = Extra.forbid

    components: Optional[List[Component]] = Field(
        None,
        description="A list of software and hardware components used as tools",
        title="Components",
    )
    services: Optional[List[Service]] = Field(
        None,
        description=(
            "A list of services used as tools. This may include microservices, function-as-a-service, and other types"
            " of network or intra-process services."
        ),
        title="Services",
    )


class Metadata(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    timestamp: Optional[datetime] = Field(
        None, description="The date and time (timestamp) when the BOM was created.", title="Timestamp"
    )
    lifecycles: Optional[List[Union[Lifecycle, Lifecycle1]]] = Field(None, description="", title="Lifecycles")
    tools: Optional[Union[ToolModel, List[Tool]]] = None
    authors: Optional[List[OrganizationalContact]] = Field(
        None,
        description=(
            "The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs"
            " created through automated means may not have authors."
        ),
        title="Authors",
    )
    component: Optional[Component] = Field(None, description="The component that the BOM describes.", title="Component")
    manufacture: Optional[OrganizationalEntity] = Field(
        None,
        description="The organization that manufactured the component that the BOM describes.",
        title="Manufacture",
    )
    supplier: Optional[OrganizationalEntity] = Field(
        None,
        description=(
            " The organization that supplied the component that the BOM describes. The supplier may often be the"
            " manufacturer, but may also be a distributor or repackager."
        ),
        title="Supplier",
    )
    licenses: Optional[List] = Field(
        None,
        description="EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)",
        title="BOM License(s)",
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )


class Pedigree(CycloneDXBaseModel):
    """
    Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
    """

    class Config:
        extra = Extra.forbid

    ancestors: Optional[List[Component]] = Field(
        None,
        description=(
            "Describes zero or more components in which a component is derived from. This is commonly used to describe"
            " forks from existing projects where the forked version contains a ancestor node containing the original"
            " component it was forked from. For example, Component A is the original component. Component B is the"
            " component being used and documented in the BOM. However, Component B contains a pedigree node with a"
            " single ancestor documenting Component A - the original component from which Component B is derived from."
        ),
        title="Ancestors",
    )
    descendants: Optional[List[Component]] = Field(
        None,
        description=(
            "Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their"
            " forks) of an original or root component."
        ),
        title="Descendants",
    )
    variants: Optional[List[Component]] = Field(
        None,
        description=(
            "Variants describe relations where the relationship between the components are not known. For example, if"
            " Component A contains nearly identical code to Component B. They are both related, but it is unclear if"
            " one is derived from the other, or if they share a common ancestor."
        ),
        title="Variants",
    )
    commits: Optional[List[Commit]] = Field(
        None,
        description=(
            "A list of zero or more commits which provide a trail describing how the component deviates from an"
            " ancestor, descendant, or variant."
        ),
        title="Commits",
    )
    patches: Optional[List[Patch]] = Field(
        None,
        description=(
            ">A list of zero or more patches describing how the component deviates from an ancestor, descendant, or"
            " variant. Patches may be complimentary to commits or may be used in place of commits."
        ),
        title="Patches",
    )
    notes: Optional[str] = Field(
        None,
        description="Notes, observations, and other non-structured commentary describing the components pedigree.",
        title="Notes",
    )


class Component(CycloneDXBaseModel):
    class Config:
        extra = Extra.forbid

    type: Type = Field(
        ...,
        description=(
            "Specifies the type of component. For software components, classify as application if no more specific"
            " appropriate classification is available or cannot be determined for the component. Types include:\n\n*"
            " __application__ = A software application. Refer to"
            " [https://en.wikipedia.org/wiki/Application_software](https://en.wikipedia.org/wiki/Application_software)"
            " for information about applications.\n* __framework__ = A software framework. Refer to"
            " [https://en.wikipedia.org/wiki/Software_framework](https://en.wikipedia.org/wiki/Software_framework) for"
            " information on how frameworks vary slightly from libraries.\n* __library__ = A software library. Refer to"
            " [https://en.wikipedia.org/wiki/Library_(computing)](https://en.wikipedia.org/wiki/Library_(computing))\n"
            " for information about libraries. All third-party and open source reusable components will likely be a"
            " library. If the library also has key features of a framework, then it should be classified as a"
            " framework. If not, or is unknown, then specifying library is RECOMMENDED.\n* __container__ = A packaging"
            " and/or runtime format, not specific to any particular technology, which isolates software inside the"
            " container from software outside of a container through virtualization technology. Refer to"
            " [https://en.wikipedia.org/wiki/OS-level_virtualization](https://en.wikipedia.org/wiki/OS-level_virtualization)\n*"
            " __platform__ = A runtime environment which interprets or executes software. This may include runtimes"
            " such as those that execute bytecode or low-code/no-code application platforms.\n* __operating-system__ ="
            " A software operating system without regard to deployment model (i.e. installed on physical hardware,"
            " virtual machine, image, etc) Refer to"
            " [https://en.wikipedia.org/wiki/Operating_system](https://en.wikipedia.org/wiki/Operating_system)\n*"
            " __device__ = A hardware device such as a processor, or chip-set. A hardware device containing firmware"
            " SHOULD include a component for the physical hardware itself, and another component of type 'firmware' or"
            " 'operating-system' (whichever is relevant), describing information about the software running on the"
            " device.\n  See also the list of [known device"
            " properties](https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md).\n*"
            " __device-driver__ = A special type of software that operates or controls a particular type of device."
            " Refer to [https://en.wikipedia.org/wiki/Device_driver](https://en.wikipedia.org/wiki/Device_driver)\n*"
            " __firmware__ = A special type of software that provides low-level control over a devices hardware. Refer"
            " to [https://en.wikipedia.org/wiki/Firmware](https://en.wikipedia.org/wiki/Firmware)\n* __file__ = A"
            " computer file. Refer to"
            " [https://en.wikipedia.org/wiki/Computer_file](https://en.wikipedia.org/wiki/Computer_file) for"
            " information about files.\n* __machine-learning-model__ = A model based on training data that can make"
            " predictions or decisions without being explicitly programmed to do so.\n* __data__ = A collection of"
            " discrete values that convey information."
        ),
        examples=["library"],
        title="Component Type",
    )
    mime_type: Optional[str] = Field(
        None,
        alias="mime-type",
        description=(
            "The optional mime-type of the component. When used on file components, the mime-type can provide"
            " additional context about the kind of file being represented such as an image, font, or executable. Some"
            " library or framework components may also have an associated mime-type."
        ),
        examples=["image/jpeg"],
        regex="^[-+a-z0-9.]+/[-+a-z0-9.]+$",
        title="Mime-Type",
    )
    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the component elsewhere in the BOM. Every bom-ref"
            " MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    supplier: Optional[OrganizationalEntity] = Field(
        None,
        description=(
            " The organization that supplied the component. The supplier may often be the manufacturer, but may also be"
            " a distributor or repackager."
        ),
        title="Component Supplier",
    )
    author: Optional[str] = Field(
        None,
        description="The person(s) or organization(s) that authored the component",
        examples=["Acme Inc"],
        title="Component Author",
    )
    publisher: Optional[str] = Field(
        None,
        description="The person(s) or organization(s) that published the component",
        examples=["Acme Inc"],
        title="Component Publisher",
    )
    group: Optional[str] = Field(
        None,
        description=(
            "The grouping name or identifier. This will often be a shortened, single name of the company or project"
            " that produced the component, or the source package or domain name. Whitespace and special characters"
            " should be avoided. Examples include: apache, org.apache.commons, and apache.org."
        ),
        examples=["com.acme"],
        title="Component Group",
    )
    name: str = Field(
        ...,
        description=(
            "The name of the component. This will often be a shortened, single name of the component. Examples:"
            " commons-lang3 and jquery"
        ),
        examples=["tomcat-catalina"],
        title="Component Name",
    )
    version: Optional[str] = Field(
        None,
        description=(
            "The component version. The version should ideally comply with semantic versioning but is not enforced."
        ),
        examples=["9.0.14"],
        title="Component Version",
    )
    description: Optional[str] = Field(
        None, description="Specifies a description for the component", title="Component Description"
    )
    scope: Optional[Scope] = Field(
        "required",
        description=(
            "Specifies the scope of the component. If scope is not specified, 'required' scope SHOULD be assumed by the"
            " consumer of the BOM."
        ),
        title="Component Scope",
    )
    hashes: Optional[List[Hash]] = Field(None, title="Component Hashes")
    licenses: Optional[List] = Field(
        None,
        description="EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)",
        title="Component License(s)",
    )
    copyright: Optional[str] = Field(
        None,
        description=(
            "A copyright notice informing users of the underlying claims to copyright ownership in a published work."
        ),
        examples=["Acme Inc"],
        title="Component Copyright",
    )
    cpe: Optional[str] = Field(
        None,
        description=(
            "Specifies a well-formed CPE name that conforms to the CPE 2.2 or 2.3 specification. See"
            " [https://nvd.nist.gov/products/cpe](https://nvd.nist.gov/products/cpe)"
        ),
        examples=["cpe:2.3:a:acme:component_framework:-:*:*:*:*:*:*:*"],
        title="Component Common Platform Enumeration (CPE)",
    )
    purl: Optional[str] = Field(
        None,
        description=(
            "Specifies the package-url (purl). The purl, if specified, MUST be valid and conform to the specification"
            " defined at: [https://github.com/package-url/purl-spec](https://github.com/package-url/purl-spec)"
        ),
        examples=["pkg:maven/com.acme/tomcat-catalina@9.0.14?packaging=jar"],
        title="Component Package URL (purl)",
    )
    swid: Optional[Swid] = Field(
        None,
        description=(
            "Specifies metadata and content for [ISO-IEC 19770-2 Software Identification (SWID)"
            " Tags](https://www.iso.org/standard/65666.html)."
        ),
        title="SWID Tag",
    )
    modified: Optional[bool] = Field(
        None,
        description=(
            "[Deprecated] - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to"
            " supply information on exactly how the component was modified. A boolean value indicating if the component"
            " has been modified from the original. A value of true indicates the component is a derivative of the"
            " original. A value of false indicates the component has not been modified from the original."
        ),
        title="Component Modified From Original",
    )
    pedigree: Optional[Pedigree] = Field(
        None,
        description=(
            "Component pedigree is a way to document complex supply chain scenarios where components are created,"
            " distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this"
            " complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document"
            " variants where the exact relation may not be known."
        ),
        title="Component Pedigree",
    )
    externalReferences: Optional[List[ExternalReference]] = Field(
        None,
        description=(
            "External references provide a way to document systems, sites, and information that may be relevant, but"
            " are not included with the BOM. They may also establish specific relationships within or external to the"
            " BOM."
        ),
        title="External References",
    )
    components: Optional[List[Component]] = Field(
        None,
        description=(
            "A list of software and hardware components included in the parent component. This is not a dependency"
            " tree. It provides a way to specify a hierarchical representation of component assemblies, similar to"
            " system &#8594; subsystem &#8594; parts assembly in physical supply chains."
        ),
        title="Components",
    )
    evidence: Optional[ComponentEvidence] = Field(
        None,
        description=(
            "Provides the ability to document evidence collected through various forms of extraction or analysis."
        ),
        title="Evidence",
    )
    releaseNotes: Optional[ReleaseNotes] = Field(
        None, description="Specifies optional release notes.", title="Release notes"
    )
    modelCard: Optional[ModelCard] = Field(None, title="Machine Learning Model Card")
    data: Optional[List[ComponentData]] = Field(
        None,
        description=(
            "This object SHOULD be specified for any component of type `data` and MUST NOT be specified for other"
            " component types."
        ),
        title="Data",
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )
    signature: Optional[Union[Signature1, Signature2, Signer]] = Field(
        None,
        description=(
            "Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html)."
        ),
        title="Signature",
    )


class Tool1(CycloneDXBaseModel):
    """
    The tool(s) used to identify, confirm, or score the vulnerability.
    """

    class Config:
        extra = Extra.forbid

    components: Optional[List[Component]] = Field(
        None,
        description="A list of software and hardware components used as tools",
        title="Components",
    )
    services: Optional[List[Service]] = Field(
        None,
        description=(
            "A list of services used as tools. This may include microservices, function-as-a-service, and other types"
            " of network or intra-process services."
        ),
        title="Services",
    )


class Vulnerability(CycloneDXBaseModel):
    """
    Defines a weakness in a component or service that could be exploited or triggered by a threat source.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the vulnerability elsewhere in the BOM. Every"
            " bom-ref MUST be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    id: Optional[str] = Field(
        None,
        description="The identifier that uniquely identifies the vulnerability.",
        examples=["CVE-2021-39182", "GHSA-35m5-8cvj-8783", "SNYK-PYTHON-ENROCRYPT-1912876"],
        title="ID",
    )
    source: Optional[VulnerabilitySource] = Field(None, description="The source that published the vulnerability.")
    references: Optional[List[Reference]] = Field(
        None,
        description=(
            "Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often"
            " times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have"
            " different identifiers. References provide a way to correlate vulnerabilities across multiple sources of"
            " vulnerability intelligence."
        ),
        title="References",
    )
    ratings: Optional[List[Rating]] = Field(None, description="List of vulnerability ratings", title="Ratings")
    cwes: Optional[List[Cwe]] = Field(
        None,
        description=(
            "List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability. For example 399 (of"
            " https://cwe.mitre.org/data/definitions/399.html)"
        ),
        examples=[399],
        title="CWEs",
    )
    description: Optional[str] = Field(
        None, description="A description of the vulnerability as provided by the source.", title="Description"
    )
    detail: Optional[str] = Field(
        None,
        description=(
            "If available, an in-depth description of the vulnerability as provided by the source organization. Details"
            " often include information useful in understanding root cause."
        ),
        title="Details",
    )
    recommendation: Optional[str] = Field(
        None,
        description="Recommendations of how the vulnerability can be remediated or mitigated.",
        title="Recommendation",
    )
    workaround: Optional[str] = Field(
        None,
        description=(
            "A bypass, usually temporary, of the vulnerability that reduces its likelihood and/or impact. Workarounds"
            " often involve changes to configuration or deployments."
        ),
        title="Workarounds",
    )
    proofOfConcept: Optional[ProofOfConcept] = Field(
        None, description="Evidence used to reproduce the vulnerability.", title="Proof of Concept"
    )
    advisories: Optional[List[Advisory]] = Field(
        None, description="Published advisories of the vulnerability if provided.", title="Advisories"
    )
    created: Optional[datetime] = Field(
        None,
        description=(
            "The date and time (timestamp) when the vulnerability record was created in the vulnerability database."
        ),
        title="Created",
    )
    published: Optional[datetime] = Field(
        None,
        description="The date and time (timestamp) when the vulnerability record was first published.",
        title="Published",
    )
    updated: Optional[datetime] = Field(
        None,
        description="The date and time (timestamp) when the vulnerability record was last updated.",
        title="Updated",
    )
    rejected: Optional[datetime] = Field(
        None,
        description="The date and time (timestamp) when the vulnerability record was rejected (if applicable).",
        title="Rejected",
    )
    credits: Optional[Credits] = Field(
        None,
        description="Individuals or organizations credited with the discovery of the vulnerability.",
        title="Credits",
    )
    tools: Optional[Union[Tool1, List[Tool]]] = None
    analysis: Optional[Analysis] = Field(
        None,
        description="An assessment of the impact and exploitability of the vulnerability.",
        title="Impact Analysis",
    )
    affects: Optional[List[Affect]] = Field(
        None,
        description="The components or services that are affected by the vulnerability.",
        title="Affects",
    )
    properties: Optional[List[Property]] = Field(
        None,
        description=(
            "Provides the ability to document properties in a name-value store. This provides flexibility to include"
            " data not officially supported in the standard without having to use additional namespaces or create"
            " extensions. Unlike key-value stores, properties support duplicate names, each potentially having"
            " different values. Property names of interest to the general public are encouraged to be registered in the"
            " [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal"
            " registration is OPTIONAL."
        ),
        title="Properties",
    )


class Formula(CycloneDXBaseModel):
    """
    Describes workflows and resources that captures rules and other aspects of how the associated BOM component or service was formed.
    """

    class Config:
        extra = Extra.forbid

    bom_ref: Optional[str] = Field(
        None,
        alias="bom-ref",
        description=(
            "An optional identifier which can be used to reference the formula elsewhere in the BOM. Every bom-ref MUST"
            " be unique within the BOM."
        ),
        min_length=1,
        title="BOM Reference",
    )
    components: Optional[List[Component]] = Field(
        None,
        description=(
            "Transient components that are used in tasks that constitute one or more of this formula's workflows"
        ),
        title="Components",
    )
    services: Optional[List[Service]] = Field(
        None,
        description="Transient services that are used in tasks that constitute one or more of this formula's workflows",
        title="Services",
    )
    workflows: Optional[List[Workflow]] = Field(
        None,
        description=(
            "List of workflows that can be declared to accomplish specific orchestrated goals and independently"
            " triggered."
        ),
        title="Workflows",
    )
    properties: Optional[List[Property]] = Field(None, title="Properties")


Service.update_forward_refs()
CyclonedxSoftwareBillOfMaterialsStandard.update_forward_refs()
ToolModel.update_forward_refs()
Metadata.update_forward_refs()
Pedigree.update_forward_refs()
