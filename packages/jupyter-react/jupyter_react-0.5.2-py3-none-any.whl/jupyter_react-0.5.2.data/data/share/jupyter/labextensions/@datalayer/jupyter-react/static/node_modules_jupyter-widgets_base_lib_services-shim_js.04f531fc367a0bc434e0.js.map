{"version":3,"file":"node_modules_jupyter-widgets_base_lib_services-shim_js.04f531fc367a0bc434e0.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxmDAAmD;AACxD,CAAC,sBAAsB;AACvB","sources":["webpack://@datalayer/jupyter-react/../../../../../node_modules/@jupyter-widgets/base/lib/services-shim.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport var shims;\n(function (shims) {\n    let services;\n    (function (services) {\n        /**\n         * Public constructor\n         * @param jsServicesKernel - @jupyterlab/services Kernel.IKernel instance\n         */\n        class CommManager {\n            constructor(jsServicesKernel) {\n                this.targets = Object.create(null);\n                this.comms = Object.create(null);\n                this.init_kernel(jsServicesKernel);\n            }\n            /**\n             * Hookup kernel events.\n             * @param  {Kernel.IKernel} jsServicesKernel - @jupyterlab/services Kernel.IKernel instance\n             */\n            init_kernel(jsServicesKernel) {\n                this.kernel = jsServicesKernel; // These aren't really the same.\n                this.jsServicesKernel = jsServicesKernel;\n            }\n            /**\n             * Creates a new connected comm\n             */\n            async new_comm(target_name, data, callbacks, metadata, comm_id, buffers) {\n                const c = this.jsServicesKernel.createComm(target_name, comm_id);\n                const comm = new Comm(c);\n                this.register_comm(comm);\n                comm.open(data, callbacks, metadata, buffers);\n                return comm;\n            }\n            /**\n             * Register a comm target\n             * @param  {string} target_name\n             * @param  {(Comm, object) => void} f - callback that is called when the\n             *                         comm is made.  Signature of f(comm, msg).\n             */\n            register_target(target_name, f) {\n                const handle = this.jsServicesKernel.registerCommTarget(target_name, (jsServicesComm, msg) => {\n                    // Create the comm.\n                    const comm = new Comm(jsServicesComm);\n                    this.register_comm(comm);\n                    // Call the callback for the comm.\n                    try {\n                        return f(comm, msg);\n                    }\n                    catch (e) {\n                        comm.close();\n                        console.error(e);\n                        console.error(new Error('Exception opening new comm'));\n                    }\n                });\n                this.targets[target_name] = handle;\n            }\n            /**\n             * Unregisters a comm target\n             * @param  {string} target_name\n             */\n            unregister_target(target_name, f) {\n                const handle = this.targets[target_name];\n                handle.dispose();\n                delete this.targets[target_name];\n            }\n            /**\n             * Register a comm in the mapping\n             */\n            register_comm(comm) {\n                this.comms[comm.comm_id] = Promise.resolve(comm);\n                comm.kernel = this.kernel;\n                return comm.comm_id;\n            }\n        }\n        services.CommManager = CommManager;\n        /**\n         * Public constructor\n         * @param  {IComm} jsServicesComm - @jupyterlab/services IComm instance\n         */\n        class Comm {\n            constructor(jsServicesComm) {\n                this.jsServicesComm = jsServicesComm;\n            }\n            /**\n             * Comm id\n             * @return {string}\n             */\n            get comm_id() {\n                return this.jsServicesComm.commId;\n            }\n            /**\n             * Target name\n             * @return {string}\n             */\n            get target_name() {\n                return this.jsServicesComm.targetName;\n            }\n            /**\n             * Opens a sibling comm in the backend\n             * @param  data\n             * @param  callbacks\n             * @param  metadata\n             * @return msg id\n             */\n            open(data, callbacks, metadata, buffers) {\n                const future = this.jsServicesComm.open(data, metadata, buffers);\n                this._hookupCallbacks(future, callbacks);\n                return future.msg.header.msg_id;\n            }\n            /**\n             * Sends a message to the sibling comm in the backend\n             * @param  data\n             * @param  callbacks\n             * @param  metadata\n             * @param  buffers\n             * @return message id\n             */\n            send(data, callbacks, metadata, buffers) {\n                const future = this.jsServicesComm.send(data, metadata, buffers);\n                this._hookupCallbacks(future, callbacks);\n                return future.msg.header.msg_id;\n            }\n            /**\n             * Closes the sibling comm in the backend\n             * @param  data\n             * @param  callbacks\n             * @param  metadata\n             * @return msg id\n             */\n            close(data, callbacks, metadata, buffers) {\n                const future = this.jsServicesComm.close(data, metadata, buffers);\n                this._hookupCallbacks(future, callbacks);\n                return future.msg.header.msg_id;\n            }\n            /**\n             * Register a message handler\n             * @param  callback, which is given a message\n             */\n            on_msg(callback) {\n                this.jsServicesComm.onMsg = callback.bind(this);\n            }\n            /**\n             * Register a handler for when the comm is closed by the backend\n             * @param  callback, which is given a message\n             */\n            on_close(callback) {\n                this.jsServicesComm.onClose = callback.bind(this);\n            }\n            /**\n             * Hooks callback object up with @jupyterlab/services IKernelFuture\n             * @param  @jupyterlab/services IKernelFuture instance\n             * @param  callbacks\n             */\n            _hookupCallbacks(future, callbacks) {\n                if (callbacks) {\n                    future.onReply = function (msg) {\n                        if (callbacks.shell && callbacks.shell.reply) {\n                            callbacks.shell.reply(msg);\n                        }\n                    };\n                    future.onStdin = function (msg) {\n                        if (callbacks.input) {\n                            callbacks.input(msg);\n                        }\n                    };\n                    future.onIOPub = function (msg) {\n                        if (callbacks.iopub) {\n                            if (callbacks.iopub.status && msg.header.msg_type === 'status') {\n                                callbacks.iopub.status(msg);\n                            }\n                            else if (callbacks.iopub.clear_output &&\n                                msg.header.msg_type === 'clear_output') {\n                                callbacks.iopub.clear_output(msg);\n                            }\n                            else if (callbacks.iopub.output) {\n                                switch (msg.header.msg_type) {\n                                    case 'display_data':\n                                    case 'execute_result':\n                                    case 'stream':\n                                    case 'error':\n                                        callbacks.iopub.output(msg);\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }\n                        }\n                    };\n                }\n            }\n        }\n        services.Comm = Comm;\n    })(services = shims.services || (shims.services = {}));\n})(shims || (shims = {}));\n//# sourceMappingURL=services-shim.js.map"],"names":[],"sourceRoot":""}