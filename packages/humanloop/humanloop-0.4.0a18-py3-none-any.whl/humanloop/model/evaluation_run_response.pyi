# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.  To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:  ```bash pip install humanloop ```  To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:  ```bash npm i humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

    The version of the OpenAPI document: 4.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from humanloop import schemas  # noqa: F401


class EvaluationRunResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "evaluation_functions",
            "updated_at",
            "created_at",
            "evaluation_testset",
            "id",
            "config",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['EvaluationRunStatus']:
                return EvaluationRunStatus
        
            @staticmethod
            def config() -> typing.Type['ConfigResponse']:
                return ConfigResponse
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            
            
            class evaluation_functions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EvaluationFunctionResponse']:
                        return EvaluationFunctionResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EvaluationFunctionResponse'], typing.List['EvaluationFunctionResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'evaluation_functions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EvaluationFunctionResponse':
                    return super().__getitem__(i)
        
            @staticmethod
            def evaluation_testset() -> typing.Type['EvaluationTestsetResponse']:
                return EvaluationTestsetResponse
            
            
            class evaluation_function_aggregates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelConfigEvalFunctionAggregateResponse']:
                        return ModelConfigEvalFunctionAggregateResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelConfigEvalFunctionAggregateResponse'], typing.List['ModelConfigEvalFunctionAggregateResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'evaluation_function_aggregates':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelConfigEvalFunctionAggregateResponse':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "status": status,
                "config": config,
                "created_at": created_at,
                "updated_at": updated_at,
                "evaluation_functions": evaluation_functions,
                "evaluation_testset": evaluation_testset,
                "evaluation_function_aggregates": evaluation_function_aggregates,
            }
    
    evaluation_functions: MetaOapg.properties.evaluation_functions
    updated_at: MetaOapg.properties.updated_at
    created_at: MetaOapg.properties.created_at
    evaluation_testset: 'EvaluationTestsetResponse'
    id: MetaOapg.properties.id
    config: 'ConfigResponse'
    status: 'EvaluationRunStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'EvaluationRunStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> 'ConfigResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaluation_functions"]) -> MetaOapg.properties.evaluation_functions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaluation_testset"]) -> 'EvaluationTestsetResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaluation_function_aggregates"]) -> MetaOapg.properties.evaluation_function_aggregates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "config", "created_at", "updated_at", "evaluation_functions", "evaluation_testset", "evaluation_function_aggregates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'EvaluationRunStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> 'ConfigResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaluation_functions"]) -> MetaOapg.properties.evaluation_functions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaluation_testset"]) -> 'EvaluationTestsetResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaluation_function_aggregates"]) -> typing.Union[MetaOapg.properties.evaluation_function_aggregates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "config", "created_at", "updated_at", "evaluation_functions", "evaluation_testset", "evaluation_function_aggregates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        evaluation_functions: typing.Union[MetaOapg.properties.evaluation_functions, list, tuple, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        evaluation_testset: 'EvaluationTestsetResponse',
        id: typing.Union[MetaOapg.properties.id, str, ],
        config: 'ConfigResponse',
        status: 'EvaluationRunStatus',
        evaluation_function_aggregates: typing.Union[MetaOapg.properties.evaluation_function_aggregates, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EvaluationRunResponse':
        return super().__new__(
            cls,
            *args,
            evaluation_functions=evaluation_functions,
            updated_at=updated_at,
            created_at=created_at,
            evaluation_testset=evaluation_testset,
            id=id,
            config=config,
            status=status,
            evaluation_function_aggregates=evaluation_function_aggregates,
            _configuration=_configuration,
            **kwargs,
        )

from humanloop.model.config_response import ConfigResponse
from humanloop.model.evaluation_function_response import EvaluationFunctionResponse
from humanloop.model.evaluation_run_status import EvaluationRunStatus
from humanloop.model.evaluation_testset_response import EvaluationTestsetResponse
from humanloop.model.model_config_eval_function_aggregate_response import ModelConfigEvalFunctionAggregateResponse
