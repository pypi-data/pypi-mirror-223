[tool.poetry]
name = "loafer-ng"
version = "3.0.0"
description = "Asynchronous message dispatcher for concurrent tasks processing"
authors = [
    "George Y. Kussumoto <contato@georgeyk.com.br>",
]
maintainers = [
    "Osvaldo Santana Neto <loafer-ng@osantana.me>",
    "allisson <allisson@olist.com>",
    "cleberzavadniak <cleber.zavadniak@olist.com>",
    "danilo shiga <danilo.shiga@olist.com>",
    "lamenezes <luiz.menezes@olist.com>",
    "luizdepra <luiz.pra@olist.com>",
    "wiliamsouza <wiliamsouza83@gmail.com>",
    "GuilhermeVBeira <guilherme.vieira.beira@gmail.com>",
    "hartungstenio <hartung@live.com>",
]
repository = "https://github.com/osantana/loafer"
license = "MIT"
readme = "README.md"
packages = [
    { include = "loafer" },
    { include = "tests", format = "sdist" },
    { include = "examples", format = "sdist" },
    { include = "docs", format = "sdist" },
]

include = [
    { path = "CHANGES.rst", format = "sdist" },
    { path = "CONTRIBUTORS.rst", format = "sdist" },
    { path = "LICENSE", format = "sdist" },
    { path = "Makefile", format = "sdist" },
    { path = "pyproject.toml", format = "sdist" },
    { path = "poetry.lock", format = "sdist" },
    { path = ".pre-commit-config.yaml", format = "sdist" },
    { path = "env.local", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.10"
aiohttp = "^3.8.5"
aiobotocore = { version = "^2.5.2", extras = ["boto3"] }
cached-property = "^1.5.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-deadfixtures = "^2.2.1"
asynctest = "^0.13.0"

# doc
sphinx = "*"
sphinx-autobuild = "*"
sphinx-rtd-theme = "*"

# lint & format
pre-commit = "*"
black = "*"
ruff = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "7.4"
testpaths = "tests"
addopts = "-vv --cov=loafer --cov-report=term-missing"

[tool.black]
line-length = 120
target-version = ["py310", "py311"]

[tool.ruff]
line-length = 120
target-version = "py310"
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "E", # ruff-builtin - python codestyle (some rules disabled)
    "F", # pyflakes - check code for errors
    "W", # pycodestyle (warnings)
    "PLC", # pylint-convention
    "PLE", # pylint-error
    "PLW", # pylint-warning
    "ISC", # flake8-implicit-str-concat - check for problematic implicit str concat
    "ASYNC", # flake8-async - A flake8 plugin that checks for bad async / asyncio practices.
    "YTT", # flake8-2020 - fix Python's version comparisons
    "T10", # flake8-debugger - check for debugger invocations
    "UP", # pyupgrade - update python code style to newer versions
    "I", # isort - organize imports
    "N", # pep8-naming - force pep8 naming style
    "S", # flake8-bandit - detect potentially insecure code
    "ARG", # flake8-unused-arguments - check for unused arguments
    "BLE", # flake8-blind-except - forbid blind exception handling
    "C90", # mccabe - complexity
    "COM", # flake8-commas - keep/force trailing commas
    "DTZ", # flake8-datetimez - check for missing `tz=` args in datetime
    "ERA", # eradicate - remove unused commented code
    "PIE", # flake8-pie - add extra style checks to flake8
    "PT", # flake8-pytest-style - check for pytest test style
    "PTH", # flake8-use-pathlib - force use of Pathlib for paths (some rules disabled)
    "RET", # flake8-return - check for unnecessary code on function return
    "SIM", # flake8-simplify - run simplifications on the code
    "SLF", # flake8-self - check for private members access
    "T20", # flake8-print - check for print()'s in the code
    "TID", # flake8-tidy-imports - improve import commands
    "TRY", # tryceratops - force good practices on exception handling
    "ICN", # flake8-import-conventions - check for problematic import aliases
    "INP", # flake8-no-pep420 - check for packages without `__init__.py`
    "INT", # flake8-gettext - check for issues with i18n strings
    "A", # flake8-builtins - warn about built-in name shadowing
    "B", # flake8-bugbear - warn about common Python pitfalls
    "C4", # flake8-comprehensions - optimize and adjust comprehensions
    "Q", # flake8-quotes - check for usage of quotes
    "EXE", # flake8-executable - check for the right shebang in scripts
    "PGH", # pygrep-hooks - detect some problematic patterns in code.
    "RUF", # ruff - builtin ruff checks
    "TCH", # flake8-type-checking - check usage of type-checked imports
    "G", # flake8-logging-format - check for problems at log messages

    # disabled
    # "RSE", # flake8-raise - check for unnecessary parentesis on exception
    # "EM", # flake8-errmsg - force nice error messages in exceptions
    # "PLR", # pylint-refactor
    # "ANN", # flake8-annotations - force type annotations
    # "PYI", # flake8-pyi - check for type annotation stubs
    # "FBT", # flake8-boolean-trap - prevent boolean argument trap
]

ignore = [
    "TRY003", # too picky to not allowing long exception messages
    "N818", # we don't want to use Error in all exception class names because we prefer Exception
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Use of assert detected
    "PT011", # Allow broad exceptions for tests
    "SLF001", # FIXME: some tests access private methods
]
"examples/**/*.py" = ["T201"]  # ignore print in examples
"docs/**/*.py" = ["INP001"]  # ignore missing __init__.py in doc dir