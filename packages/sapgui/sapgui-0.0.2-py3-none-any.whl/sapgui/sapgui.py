import win32com.client
import subprocess
import pandas as pd
import time
import os

SAP_MODULE_NAME_P40 = r'001. P40 - ERP S/4 HANA Production'
SAP_MODULE_CODE = {r'001. P40 - ERP S/4 HANA Production': '900'}
SAP_APP_PATH = r'C:\Program Files (x86)\SAP\FrontEnd\SAPgui\\'
SAP_APP_FILE = 'saplogon.exe'
SAP_TMP_PATH = r'C:\temp\\'
SAP_TMP_FILE = 'tmp.txt'


class SapGui:
    """
    Class to use python to operate in SAP using SAP GUI Scripting.
    Please provide SAP module name as argument.
    """
    def __init__(self, sap_module_name: str):
        self.__sap_module = sap_module_name
        self.__sap_module_opened = False
        self.__sap_gui_auto = None
        self.__application = None
        self.__connection = None
        self.__session = None
        self.__sap_open()

    def __sap_open(self):
        """
        Method to open SAP module to operate on it.
        """
        try:
            if SAP_APP_FILE not in str(subprocess.check_output('tasklist')):
                subprocess.Popen(SAP_APP_PATH+SAP_APP_FILE)
                time.sleep(3)
            self.__sap_gui_auto = win32com.client.GetObject("SAPGUI")
            self.__application = self.__sap_gui_auto.GetScriptingEngine

            if self.__application.Connections.Count > 0:
                for i in range(0, self.__application.Connections.Count):
                    self.__connection = self.__application.Children(i)
                    info = self.__connection.Children(0).info.client
                    if info == SAP_MODULE_CODE[self.__sap_module]:
                        self.__session = self.__connection.Children(0)
                        self.__session.findById("wnd[0]").sendVKey(0)
                        self.__sap_module_opened = True
                        break
            if self.__sap_module_opened is not True:
                self.__connection = self.__application.OpenConnection(self.__sap_module)
                self.__session = self.__connection.Children(0)
                self.__session.findById("wnd[0]").sendVKey(0)
                self.__sap_module_opened = True
        except:
            self.__sap_module_opened = False

    def sap_open_check(self):
        """
        Method to check if SAP module was opened successfully.
        :return: true if SAP module was opened, false if not.
        """
        return self.__sap_module_opened

    def sap_run(self, func, *args):
        """
        Method to run generated SAP GUI script.
        :param func: function generated by SAP GUI Scripting.
        :param args: function parameters.
        :return: none.
        """
        if self.__sap_module_opened:
            func(self.__session, *args)


def sap_close():
    """
    Method to close all SAP instances.
    :return: none.
    """
    os.system(f'taskkill /F /IM {SAP_APP_FILE}')


def sap_download_tmp_file_del(tmp_file_name: str = SAP_TMP_FILE):
    if os.path.isfile(SAP_TMP_PATH+tmp_file_name):
        os.remove(SAP_TMP_PATH+tmp_file_name)


def sap_download_tmp_file(header_row: int, tmp_file_del: bool = True,
                          tmp_file_name: str = SAP_TMP_FILE):
    df = pd.read_csv(SAP_TMP_PATH+tmp_file_name, header=header_row,
                     delimiter="\t")
    label_drop = [x for x in df if 'Unnamed' in x]
    df.drop(label_drop, axis=1, inplace=True)
    if tmp_file_del:
        sap_download_tmp_file_del(tmp_file_name)
    return df
