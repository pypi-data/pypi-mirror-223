"""
    Security API reference

       # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from pensando_dss.psm.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class SecurityFirewallProfileSpec(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('icmp_active_session_limit',): {
            'inclusive_maximum': 32768,
            'inclusive_minimum': 0,
        },
        ('tcp_half_open_session_limit',): {
            'inclusive_maximum': 32768,
            'inclusive_minimum': 0,
        },
        ('udp_active_session_limit',): {
            'inclusive_maximum': 32768,
            'inclusive_minimum': 0,
        },
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'connection_tracking': (bool,),  # noqa: E501
            'detect_app': (bool,),  # noqa: E501
            'drop_timeout': (str,),  # noqa: E501
            'icmp_active_session_limit': (int,),  # noqa: E501
            'icmp_drop_timeout': (str,),  # noqa: E501
            'icmp_timeout': (str,),  # noqa: E501
            'session_idle_timeout': (str,),  # noqa: E501
            'tcp_close_timeout': (str,),  # noqa: E501
            'tcp_connection_setup_timeout': (str,),  # noqa: E501
            'tcp_drop_timeout': (str,),  # noqa: E501
            'tcp_half_closed_timeout': (str,),  # noqa: E501
            'tcp_half_open_session_limit': (int,),  # noqa: E501
            'tcp_timeout': (str,),  # noqa: E501
            'udp_active_session_limit': (int,),  # noqa: E501
            'udp_drop_timeout': (str,),  # noqa: E501
            'udp_timeout': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'connection_tracking': 'connection-tracking',  # noqa: E501
        'detect_app': 'detect-app',  # noqa: E501
        'drop_timeout': 'drop-timeout',  # noqa: E501
        'icmp_active_session_limit': 'icmp-active-session-limit',  # noqa: E501
        'icmp_drop_timeout': 'icmp-drop-timeout',  # noqa: E501
        'icmp_timeout': 'icmp-timeout',  # noqa: E501
        'session_idle_timeout': 'session-idle-timeout',  # noqa: E501
        'tcp_close_timeout': 'tcp-close-timeout',  # noqa: E501
        'tcp_connection_setup_timeout': 'tcp-connection-setup-timeout',  # noqa: E501
        'tcp_drop_timeout': 'tcp-drop-timeout',  # noqa: E501
        'tcp_half_closed_timeout': 'tcp-half-closed-timeout',  # noqa: E501
        'tcp_half_open_session_limit': 'tcp-half-open-session-limit',  # noqa: E501
        'tcp_timeout': 'tcp-timeout',  # noqa: E501
        'udp_active_session_limit': 'udp-active-session-limit',  # noqa: E501
        'udp_drop_timeout': 'udp-drop-timeout',  # noqa: E501
        'udp_timeout': 'udp-timeout',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SecurityFirewallProfileSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            connection_tracking (bool): Enable/disable Connection Tracking.. [optional]  # noqa: E501
            detect_app (bool): Set the Application Identification Detection config for DSCs.. [optional] if omitted the server will use the default value of False  # noqa: E501
            drop_timeout (str): Drop Timeout is the period for which a drop entry is installed for a denied non tcp/udp/icmp flow. Should be a valid time duration between 1s and 5m0s.. [optional] if omitted the server will use the default value of "60s"  # noqa: E501
            icmp_active_session_limit (int): Icmp active session limit config after which new requests will be dropped. Value should be between 0 and 32768.. [optional] if omitted the server will use the default value of 0  # noqa: E501
            icmp_drop_timeout (str): ICMP Drop Timeout is the period for which a drop entry is installed for a denied ICMP flow. Should be a valid time duration between 1s and 5m0s.. [optional] if omitted the server will use the default value of "60s"  # noqa: E501
            icmp_timeout (str): Icmp Timeout is the period for which a ICMP session is kept alive during inactivity. Should be a valid time duration between 1s and 48h0m0s.. [optional] if omitted the server will use the default value of "6s"  # noqa: E501
            session_idle_timeout (str): Session idle timeout removes/deletes the session/flow if there is inactivity; this value is superceded by any value specified in App object. Should be a valid time duration between 30s and 48h0m0s.. [optional] if omitted the server will use the default value of "90s"  # noqa: E501
            tcp_close_timeout (str): TCP Close Timeout is the time for which TCP session is kept after a FIN is seen. Should be a valid time duration between 1s and 5m0s.. [optional] if omitted the server will use the default value of "1s"  # noqa: E501
            tcp_connection_setup_timeout (str): TCP Connection Setup Timeout is the period TCP session is kept to see the response of a SYN. Should be a valid time duration between 1s and 1m0s.. [optional] if omitted the server will use the default value of "30s"  # noqa: E501
            tcp_drop_timeout (str): TCP Drop Timeout is the period for which a drop entry is installed for a denied TCP flow. Should be a valid time duration between 1s and 5m0s.. [optional] if omitted the server will use the default value of "90s"  # noqa: E501
            tcp_half_closed_timeout (str): TCP Half Closed Timeout is the time for which tCP session is kept when connection is half closed i.e. FIN sent by FIN_Ack not received. Should be a valid time duration between 1s and 48h0m0s.. [optional] if omitted the server will use the default value of "120s"  # noqa: E501
            tcp_half_open_session_limit (int): Tcp half open session limit config after which new open requests will be dropped. Value should be between 0 and 32768.. [optional] if omitted the server will use the default value of 0  # noqa: E501
            tcp_timeout (str): Tcp Timeout is the period for which a TCP session is kept alive during inactivity. Should be a valid time duration between 1s and 48h0m0s.. [optional] if omitted the server will use the default value of "3600s"  # noqa: E501
            udp_active_session_limit (int): Udp active session limit config after which new requests will be dropped. Value should be between 0 and 32768.. [optional] if omitted the server will use the default value of 0  # noqa: E501
            udp_drop_timeout (str): UDP Drop Timeout is the period for which a drop entry is installed for a denied UDP flow. Should be a valid time duration between 1s and 48h0m0s.. [optional] if omitted the server will use the default value of "60s"  # noqa: E501
            udp_timeout (str): Udp Timeout is the period for which a UDP session is kept alive during inactivity. Should be a valid time duration between 1s and 48h0m0s.. [optional] if omitted the server will use the default value of "30s"  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
