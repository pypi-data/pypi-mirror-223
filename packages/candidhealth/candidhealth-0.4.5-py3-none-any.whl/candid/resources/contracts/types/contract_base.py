# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.date import Date
from ...commons.types.regions import Regions
from .authorized_signatory import AuthorizedSignatory
from .contract_status import ContractStatus


class ContractBase(pydantic.BaseModel):
    effective_date: Date = pydantic.Field(description=("The starting day upon which the contract is effective\n"))
    expiration_date: typing.Optional[Date] = pydantic.Field(
        description=("An optional end day upon which the contract expires\n")
    )
    regions: Regions = pydantic.Field(
        description=(
            "The state(s) to which the contract's coverage extends.\n"
            'It may also be set to "national" for the entirety of the US.\n'
        )
    )
    contract_status: typing.Optional[ContractStatus]
    authorized_signatory: typing.Optional[AuthorizedSignatory]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
