{ "version": 3, "file": "OUTPUT_ROOT/temper-syntax/py/temper_syntax/pygments__preface.py", "sources": [ "-work/temper-syntax/pygments.temper.md" ], "sourcesContent": [ "# Lexer Schema\n\n## Rule Options\n\nUse a marker interface for various kinds of rules.\n\n    export /*sealed*/ class RuleOption {}\n\n### Rule\n\nThe most common case is a basic rule.\n\n    export class Rule extends RuleOption {\n      public regex: String;\n      public kind: TokenKind;\n      public state: String | Null = null;\n    }\n\n### Includes\n\nYou can also include other states into a state.\n\n    export class Include extends RuleOption {\n      public state: String;\n    }\n\n    export let include(state: String): Include { new Include(state) }\n\n### Inherit\n\nOr inherit from other base class rules.\n\n    export class Inherit extends Rule {}\n    export let inherit = new Inherit();\n\n## Token Kinds\n\n    export /*sealed*/ interface TokenKind {}\n\n### Simple Kinds\n\nThe token kinds need to map to pygments token kind objects, which should be easy\nenough to do with strings.\n\n    export class Kind extends TokenKind {\n      public name: builtins.String;\n    }\n\nAnd I'd like to make these static members of `Kind`, but we have a\n[codegen bug][temp-after-static] with that right now.\n\n    export let CommentMultiline: Kind = new Kind(\u0022Comment.Multiline\u0022);\n    export let CommentSingleline: Kind = new Kind(\u0022Comment.Singleline\u0022);\n    export let Keyword: Kind = new Kind(\u0022Keyword\u0022);\n    export let KeywordConstant: Kind = new Kind(\u0022Keyword.Constant\u0022);\n    export let KeywordDeclaration: Kind = new Kind(\u0022Keyword.Declaration\u0022);\n    export let Name: Kind = new Kind(\u0022Name\u0022);\n    export let NameBuiltin: Kind = new Kind(\u0022Name.Builtin\u0022);\n    export let NameDecorator: Kind = new Kind(\u0022Name.Decorator\u0022);\n    export let Number: Kind = new Kind(\u0022Number\u0022);\n    export let Operator: Kind = new Kind(\u0022Operator\u0022);\n    export let Punctuation: Kind = new Kind(\u0022Punctuation\u0022);\n    export let StringKind: Kind = new Kind(\u0022String\u0022);\n    export let StringInterpol: Kind = new Kind(\u0022String.Interpol\u0022);\n    export let Whitespace: Kind = new Kind(\u0022Whitespace\u0022);\n\n### Kind By Group\n\n    export class ByGroups extends TokenKind {\n      public kinds: List\u003cTokenKind\u003e;\n    }\n\n    export let bygroups(kinds: List\u003cTokenKind\u003e): ByGroups {\n      new ByGroups(kinds)\n    }\n\n### Using Another Lexer\n\nYou can [use token rules from another lexer][using-multiple-lexers] instead of\na simple token kind.\n\n    export class Using extends TokenKind {\n      public lexer: String;\n    }\n\n    export let using(lexer: String): Using { new Using(lexer) }\n\n[temp-after-static]: https://github.com/temper-lang/temper/issues/1628\n[using-multiple-lexers]: https://pygments.org/docs/lexerdevelopment/#using-multiple-lexers\n" ], "names": [ "return" ], "mappings": "AAAAA,SAAA;AAAA,SAAAA" }