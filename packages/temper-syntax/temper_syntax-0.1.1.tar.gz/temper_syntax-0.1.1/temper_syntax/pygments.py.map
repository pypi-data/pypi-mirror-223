{ "version": 3, "file": "OUTPUT_ROOT/temper-syntax/py/temper_syntax/pygments.py", "sources": [ "-work/temper-syntax/pygments.temper.md" ], "sourcesContent": [ "# Lexer Schema\n\n## Rule Options\n\nUse a marker interface for various kinds of rules.\n\n    export /*sealed*/ class RuleOption {}\n\n### Rule\n\nThe most common case is a basic rule.\n\n    export class Rule extends RuleOption {\n      public regex: String;\n      public kind: TokenKind;\n      public state: String | Null = null;\n    }\n\n### Includes\n\nYou can also include other states into a state.\n\n    export class Include extends RuleOption {\n      public state: String;\n    }\n\n    export let include(state: String): Include { new Include(state) }\n\n### Inherit\n\nOr inherit from other base class rules.\n\n    export class Inherit extends Rule {}\n    export let inherit = new Inherit();\n\n## Token Kinds\n\n    export /*sealed*/ interface TokenKind {}\n\n### Simple Kinds\n\nThe token kinds need to map to pygments token kind objects, which should be easy\nenough to do with strings.\n\n    export class Kind extends TokenKind {\n      public name: builtins.String;\n    }\n\nAnd I'd like to make these static members of `Kind`, but we have a\n[codegen bug][temp-after-static] with that right now.\n\n    export let CommentMultiline: Kind = new Kind(\u0022Comment.Multiline\u0022);\n    export let CommentSingleline: Kind = new Kind(\u0022Comment.Singleline\u0022);\n    export let Keyword: Kind = new Kind(\u0022Keyword\u0022);\n    export let KeywordConstant: Kind = new Kind(\u0022Keyword.Constant\u0022);\n    export let KeywordDeclaration: Kind = new Kind(\u0022Keyword.Declaration\u0022);\n    export let Name: Kind = new Kind(\u0022Name\u0022);\n    export let NameBuiltin: Kind = new Kind(\u0022Name.Builtin\u0022);\n    export let NameDecorator: Kind = new Kind(\u0022Name.Decorator\u0022);\n    export let Number: Kind = new Kind(\u0022Number\u0022);\n    export let Operator: Kind = new Kind(\u0022Operator\u0022);\n    export let Punctuation: Kind = new Kind(\u0022Punctuation\u0022);\n    export let StringKind: Kind = new Kind(\u0022String\u0022);\n    export let StringInterpol: Kind = new Kind(\u0022String.Interpol\u0022);\n    export let Whitespace: Kind = new Kind(\u0022Whitespace\u0022);\n\n### Kind By Group\n\n    export class ByGroups extends TokenKind {\n      public kinds: List\u003cTokenKind\u003e;\n    }\n\n    export let bygroups(kinds: List\u003cTokenKind\u003e): ByGroups {\n      new ByGroups(kinds)\n    }\n\n### Using Another Lexer\n\nYou can [use token rules from another lexer][using-multiple-lexers] instead of\na simple token kind.\n\n    export class Using extends TokenKind {\n      public lexer: String;\n    }\n\n    export let using(lexer: String): Using { new Using(lexer) }\n\n[temp-after-static]: https://github.com/temper-lang/temper/issues/1628\n[using-multiple-lexers]: https://pygments.org/docs/lexerdevelopment/#using-multiple-lexers\n" ], "names": [ "TemperObject", "Any", "Union", "Tuple", "RuleOption", "constructor", "this", "return", "Rule", "regex", "kind", "state", "Include", "Inherit", "TokenKind", "Kind", "name", "ByGroups", "kinds", "Using", "lexer", "include", "t#218", "t#226", "inherit", "t#227", "CommentMultiline", "t#229", "CommentSingleline", "t#231", "Keyword", "t#233", "KeywordConstant", "t#235", "KeywordDeclaration", "t#237", "Name", "t#239", "NameBuiltin", "t#241", "NameDecorator", "t#243", "Number", "t#245", "Operator", "t#247", "Punctuation", "t#249", "StringKind", "t#251", "StringInterpol", "t#253", "Whitespace", "bygroups", "t#211", "using", "t#207" ], "mappings": "A,wB,Y,I;A,mB,G,I,I,E,K,I,M,E,K,I;AAM4B,MAAAI,UAAA,CAAAJ,aAAW,EAAA;AAAX,WAAW,EAAA,AAAX;AAAW,MAAAK,eAAA,CAAAC,OAAA,IAAA,A,C,I;AAAA,IAAAC,SAAA;AAAA,IAAAA,SAAA;AAAA,WAAAA,SAAA;AAAX,KAAW,UAAAD,OAAA;AAAA,IAAAA,OAAA,CAAAD,eAAA;AAMtB,MAAAG,IAAA,CAAAJ,UAGuB,EAAA;AAF3B,EAAAK,SAAK,CAAE;AACP,EAAAC,QAAI,CAAE;AACN,EAAAC,SAAK,CAAE,oBAAoB;AAHvB,WAGuB,EAAA,AAHvB,EACJ,WAAa,CACb,WAAe,CACf,YAA2B,CAAA;AAHC,MAAAN,eAAA,CAAAC,OAAA,CAC5B,CAAAG,SAAK,CAAE,MAAM,CACb,CAAAC,QAAI,CAAE,YAAS,CACf,CAAAC,KAAK,CAAE,oBAAa,EAAA,AAApB,IAA2B,AAHC,IAAA,A,C,I;AAG5B,IAAAA,SAAK,CAAE,oBAAa,EAAA,AAApB,CAAAA,KAAK;AAHuB,IAAAJ,SAGD,CAAA,AAHC,OAGD;AAHC,MAGL,AAAvB,CAAAI,SAAK,AAAL,GAAuB,IAAI,CAAA;AAA3B,MAAAA,SAAK,EAAkB,KAAI;AAF3B,IAAAL,OAAA,CAAAG,SAAK,EAAA,AAAL,CAAAA;AACA,IAAAH,OAAA,CAAAI,QAAI,EAAA,AAAJ,CAAAA;AACA,IAAAJ,OAAA,CAAAK,SAAK,EAAA,AAAL,CAAAA,SAAK;AAHuB,IAAAJ,SAGD,EAAA,AAA3B;AAA2B,UAAA,AAHC,CAAAA,SAGD;AAHvB,KAAwB,UAAAD,OAAA,CAC5B,CAAAG,SAAK,CAAE,MAAM,CACb,CAAAC,QAAI,CAAE,YAAS,CACf,CAAAC,KAAK,CAAE,oBAAa,EAAA,AAApB,IAA2B,AAHC;AAG5B,IAAAA,SAAK,CAAE,oBAAa,EAAA,AAApB,CAAAA,KAAK;AAHuB,IAAAL,OAAA,CAAAD,eAAA,CAC5BI,SAAa,CACb,CAAAC,QAAe,CACf,CAAAC,SAA2B,CAAA;AAF3B;AAAA,YAAAL,QAAA;AAAA,IAAAC,UAAO,OAAM;AAAb,IAAAA,UAAA,GAAAD,QAAA,CAAAG;AAAA,WAAAF,UAAO;AACP;AAAA,WAAAD,QAAA;AAAA,IAAAC,UAAM,aAAS;AAAf,IAAAA,UAAA,GAAAD,QAAA,CAAAI;AAAA,WAAAH,UAAM;AACN;AAAA,YAAAD,QAAA;AAAA,IAAAC,UAAO,qBAAa;AAApB,IAAAA,UAAA,GAAAD,QAAA,CAAAK;AAAA,WAAAJ,UAAO;AAOH,MAAAK,OAAA,CAAAR,UACS,EAAA;AAAb,EAAAO,SAAK,CAAE,MAAM;AADT,WACS,EAAA,AADT,EACJ,WAAa,EAAA;AADkB,MAAAN,eAAA,CAAAC,OAAA,CAC/B,CAAAK,SAAK,CAAE,MAAM,AADkB,IAAA,A,C,I;AAAA,IAAAJ,SAClB,CAAA,AADkB,OAClB;AAAb,IAAAD,OAAA,CAAAK,SAAK,EAAA,AAAL,CAAAA,SAAK;AAD0B,IAAAJ,SAClB,EAAA,AAAb;AAAa,UAAA,AADkB,CAAAA,SAClB;AADT,KAA2B,UAAAD,OAAA,CAC/B,CAAAK,SAAK,CAAE,MAAM,AADkB;AAAA,IAAAL,OAAA,CAAAD,eAAA,CAC/BM,SAAa,CAAA;AAAb;AAAA,YAAAL,QAAA;AAAA,IAAAC,UAAO,OAAM;AAAb,IAAAA,UAAA,GAAAD,QAAA,CAAAK;AAAA,WAAAJ,UAAO;AASH,MAAAM,OAAA,CAAAL,IAAqB,EAAA;AAArB,WAAqB,EAAA,AAArB;AAAqB,MAAAH,eAAA,CAAAC,OAAA,IAAA,A,C,I;AAAA,IAAAC,SAAA;AAAA,IAAAA,SAAA;AAAA,WAAAA,SAAA;AAArB,KAAqB,UAAAD,OAAA;AAAA,IAAAA,OAAA,CAAAD,eAAA;AAKN,MAAAS,SAAA,CAAAd,aAAU,EAAA;AAAV,WAAU,EAAA,AAAV;AAOf,MAAAe,IAAA,CAAAD,SACiB,EAAA;AAArB,EAAAE,QAAI,CAAW,MAAM;AADjB,WACiB,EAAA,AADjB,EACJ,UAAqB,EAAA;AADM,MAAAX,eAAA,CAAAC,QAAA,CAC3B,CAAAU,QAAI,CAAW,MAAM,AADM,IAAA,A,C,I;AAAA,IAAAT,UACN,CAAA,AADM,OACN;AAArB,IAAAD,QAAA,CAAAU,QAAI,EAAA,AAAJ,CAAAA,QAAI;AADuB,IAAAT,UACN,EAAA,AAArB;AAAqB,UAAA,AADM,CAAAA,UACN;AADjB,KAAuB,UAAAD,QAAA,CAC3B,CAAAU,QAAI,CAAW,MAAM,AADM;AAAA,IAAAV,QAAA,CAAAD,eAAA,CAC3BW,QAAqB,CAAA;AAArB;AAAA,WAAAV,QAAA;AAAA,IAAAC,UAAe,OAAM;AAArB,IAAAA,UAAA,GAAAD,QAAA,CAAAU;AAAA,WAAAT,UAAe;AAuBX,MAAAU,QAAA,CAAAH,SACkB,EAAA;AAAtB,EAAAI,SAAK,CAAE,yBAAe;AADlB,WACkB,EAAA,AADlB,EACJ,WAAsB,EAAA;AADS,MAAAb,eAAA,CAAAC,QAAA,CAC/B,CAAAY,SAAK,CAAE,yBAAe,AADS,IAAA,A,C,I;AAAA,IAAAX,UACT,CAAA,AADS,OACT;AAAtB,IAAAD,QAAA,CAAAY,SAAK,EAAA,AAAL,CAAAA,SAAK;AAD0B,IAAAX,UACT,EAAA,AAAtB;AAAsB,UAAA,AADS,CAAAA,UACT;AADlB,KAA2B,UAAAD,QAAA,CAC/B,CAAAY,SAAK,CAAE,yBAAe,AADS;AAAA,IAAAZ,QAAA,CAAAD,eAAA,CAC/Ba,SAAsB,CAAA;AAAtB;AAAA,YAAAZ,QAAA;AAAA,IAAAC,UAAO,0BAAe;AAAtB,IAAAA,UAAA,GAAAD,QAAA,CAAAY;AAAA,WAAAX,UAAO;AAYH,MAAAY,KAAA,CAAAL,SACS,EAAA;AAAb,EAAAM,SAAK,CAAE,MAAM;AADT,WACS,EAAA,AADT,EACJ,WAAa,EAAA;AADe,MAAAf,eAAA,CAAAC,QAAA,CAC5B,CAAAc,SAAK,CAAE,MAAM,AADe,IAAA,A,C,I;AAAA,IAAAb,UACf,CAAA,AADe,OACf;AAAb,IAAAD,QAAA,CAAAc,SAAK,EAAA,AAAL,CAAAA,SAAK;AADuB,IAAAb,UACf,EAAA,AAAb;AAAa,UAAA,AADe,CAAAA,UACf;AADT,KAAwB,UAAAD,QAAA,CAC5B,CAAAc,SAAK,CAAE,MAAM,AADe;AAAA,IAAAd,QAAA,CAAAD,eAAA,CAC5Be,SAAa,CAAA;AAAb;AAAA,YAAAd,QAAA;AAAA,IAAAC,UAAO,OAAM;AAAb,IAAAA,UAAA,GAAAD,QAAA,CAAAc;AAAA,WAAAb,UAAO;AAxDT,GAAI,CAAAc,OAAO,CAAA,AAACV,SAAK,CAAE,MAAuC,IAAA,AAA9B,UAAO,CAAA;AAAP,EAAAJ,SAAA;AAAU,EAAAe,KAAkB,CAAA,AAAlB,UAAkB,EAAA,AAAd,CAAAV,OAAO,CAACD,SAAK,CAAC;AAA5B,EAAAJ,SAAA,EAAU,CAAAe,KAAkB;AAAE,QAAA,AAA9B,CAAAf;AAOdgB,KAAa,CAAA,AAAb,UAAa,EAAA,AAAT,CAAAV,OAAO,EAAE;AAAvBW,OAAO,CAAA,AAAP,UAAO,EAAG,CAAAD;AAkBeE,KAA6B,CAAA,AAA7B,OAA6B,EAAA,AAAzB,CAAAV,IAAI,CAAC,mBAAmB,CAAC;AAAtDW,iBAAgB,CAAE,OAAI,EAAG,CAAAD;AACCE,KAA8B,CAAA,AAA9B,OAA8B,EAAA,AAA1B,CAAAZ,IAAI,CAAC,oBAAoB,CAAC;AAAxDa,kBAAiB,CAAE,OAAI,EAAG,CAAAD;AACVE,KAAmB,CAAA,AAAnB,OAAmB,EAAA,AAAf,CAAAd,IAAI,CAAC,SAAS,CAAC;AAAnCe,OAAO,CAAE,OAAI,EAAG,CAAAD;AACQE,KAA4B,CAAA,AAA5B,OAA4B,EAAA,AAAxB,CAAAhB,IAAI,CAAC,kBAAkB,CAAC;AAApDiB,gBAAe,CAAE,OAAI,EAAG,CAAAD;AACGE,KAA+B,CAAA,AAA/B,OAA+B,EAAA,AAA3B,CAAAlB,IAAI,CAAC,qBAAqB,CAAC;AAA1DmB,mBAAkB,CAAE,OAAI,EAAG,CAAAD;AACdE,KAAgB,CAAA,AAAhB,OAAgB,EAAA,AAAZ,CAAApB,IAAI,CAAC,MAAM,CAAC;AAA7BqB,IAAI,CAAE,OAAI,EAAG,CAAAD;AACOE,KAAwB,CAAA,AAAxB,OAAwB,EAAA,AAApB,CAAAtB,IAAI,CAAC,cAAc,CAAC;AAA5CuB,YAAW,CAAE,OAAI,EAAG,CAAAD;AACEE,KAA0B,CAAA,AAA1B,OAA0B,EAAA,AAAtB,CAAAxB,IAAI,CAAC,gBAAgB,CAAC;AAAhDyB,cAAa,CAAE,OAAI,EAAG,CAAAD;AACPE,KAAkB,CAAA,AAAlB,OAAkB,EAAA,AAAd,CAAA1B,IAAI,CAAC,QAAQ,CAAC;AAAjC2B,MAAM,CAAE,OAAI,EAAG,CAAAD;AACEE,KAAoB,CAAA,AAApB,OAAoB,EAAA,AAAhB,CAAA5B,IAAI,CAAC,UAAU,CAAC;AAArC6B,QAAQ,CAAE,OAAI,EAAG,CAAAD;AACGE,KAAuB,CAAA,AAAvB,OAAuB,EAAA,AAAnB,CAAA9B,IAAI,CAAC,aAAa,CAAC;AAA3C+B,WAAW,CAAE,OAAI,EAAG,CAAAD;AACDE,KAAkB,CAAA,AAAlB,OAAkB,EAAA,AAAd,CAAAhC,IAAI,CAAC,QAAQ,CAAC;AAArCiC,WAAU,CAAE,OAAI,EAAG,CAAAD;AACIE,KAA2B,CAAA,AAA3B,OAA2B,EAAA,AAAvB,CAAAlC,IAAI,CAAC,iBAAiB,CAAC;AAAlDmC,eAAc,CAAE,OAAI,EAAG,CAAAD;AACJE,KAAsB,CAAA,AAAtB,OAAsB,EAAA,AAAlB,CAAApC,IAAI,CAAC,YAAY,CAAC;AAAzCqC,UAAU,CAAE,OAAI,EAAG,CAAAD;AAQvB,GAAI,CAAAE,QAAQ,CAAA,AAACnC,SAAK,CAAE,yBAE1B,IAAA,AAF4C,WAAQ,CAAA;AAAR,EAAAX,UAAA;AAC3C,EAAA+C,KAAmB,CAAA,AAAnB,WAAmB,EAAA,AAAf,CAAArC,QAAQ,CAACC,SAAK,CAAC;AADwB,EAAAX,UAAA,EAC3C,CAAA+C,KAAmB;AACpB,QAAA,AAF4C,CAAA/C;AAatC,GAAI,CAAAgD,KAAK,CAAA,AAACnC,SAAK,CAAE,MAAmC,IAAA,AAA1B,QAAK,CAAA;AAAL,EAAAb,UAAA;AAAQ,EAAAiD,KAAgB,CAAA,AAAhB,QAAgB,EAAA,AAAZ,CAAArC,KAAK,CAACC,SAAK,CAAC;AAAxB,EAAAb,UAAA,EAAQ,CAAAiD,KAAgB;AAAE,QAAA,AAA1B,CAAAjD,UAA0B;AA/E3DA,WAAA,UA+E2D,KAAA;AAAA,SAAAA" }