{ "version": 3, "file": "OUTPUT_ROOT/temper-syntax/py/temper_syntax/temper_pygments.py", "sources": [ "-work/temper-syntax/temper-pygments.temper.md" ], "sourcesContent": [ "# Temper Pygments Lexer\n\n## Lexer class\n\nWe can't easily access backend classes, so we can't subclass\n`pygments.lexer.RegexLexer`, but we can define a separate class that can then\nbe subclassed in Python or elsewhere.\n\nTODO Maybe define an independent Lexer type and just create an instance here?\n\n    export class TemperLexer {\n\nThese indicators seems somewhat redundant to me, but they follow the examples in\nthe [Pygments documentation][pygments-lexer-docs].\n\n      public name: String = \u0022Temper\u0022;\n      public aliases: List\u003cString\u003e = [\u0022temper\u0022];\n      public filenames: List\u003cString\u003e = [\u0022*.temper\u0022];\n\n### Token rules\n\nMain thing, though, is the list of rules for definition tokens.\n\n      public tokens: Map\u003cString, List\u003cRuleOption\u003e\u003e = new Map([\n\n#### Root\n\n        new Pair(\u0022root\u0022, [\n          new Rule(raw\u0022\\s+\u0022, Whitespace),\n          new Rule(\u0022//.*?\u0024\u0022, CommentSingleline),\n          new Rule(raw\u0022/\\*\u0022, CommentMultiline, \u0022nestedcomment\u0022),\n          new Rule(\n            words(\u0022false\u0022, \u0022NaN\u0022, \u0022null\u0022, \u0022true\u0022, \u0022void\u0022),\n            KeywordConstant,\n          ),\n          new Rule(\n            words(\n              \u0022class\u0022, \u0022interface\u0022, \u0022let\u0022, \u0022private\u0022, \u0022public\u0022, \u0022sealed\u0022, \u0022var\u0022,\n            ),\n            KeywordDeclaration,\n          ),\n          new Rule(\n            words(\n              \u0022do\u0022, \u0022else\u0022, \u0022export\u0022, \u0022extends\u0022, \u0022fn\u0022, \u0022if\u0022, \u0022import\u0022, \u0022is\u0022,\n              \u0022match\u0022, \u0022new\u0022, \u0022orelse\u0022,\n            ),\n            Keyword,\n          ),\n          new Rule(\n            words(\n              \u0022AnyValue\u0022, \u0022Boolean\u0022, \u0022Float64\u0022, \u0022Function\u0022, \u0022Int\u0022, \u0022List\u0022,\n              \u0022ListBuilder\u0022, \u0022Listed\u0022, \u0022Map\u0022, \u0022MapBuilder\u0022, \u0022MapKey\u0022, \u0022Mapped\u0022,\n              \u0022NoResult\u0022, \u0022Null\u0022, \u0022String\u0022, \u0022StringSlice\u0022, \u0022Void\u0022,\n            ),\n            NameBuiltin,\n          ),\n          new Rule(\u0022\\\u0022\u0022, StringKind, \u0022string\u0022),\n          new Rule(\u0022[-=+*\u0026|\u003c\u003e]+|/=?\u0022, Operator),\n          new Rule(\u0022[{}();:.,]\u0022, Punctuation),\n          new Rule(raw\u0022\\d+\\.?\\d*|\\.\\d+\u0022, Number),\n          new Rule(\u0022@\u0024{nameRegex}\u0022, NameDecorator),\n          new Rule(nameRegex, Name),\n        ].as\u003cList\u003cRuleOption\u003e\u003e()),\n\n#### Multiline/Nested Comments\n\nWe plan to support nested comments soon, so just implement that already here.\nThe technique here is based on the `nestedcomment` for the [D Language lexer for\nPygments][dlang-nestedcomment].\n\n        new Pair(\u0022nestedcomment\u0022, [\n          new Rule(raw\u0022[^*/]+\u0022, CommentMultiline),\n          new Rule(raw\u0022/\\*\u0022, CommentMultiline, \u0022#push\u0022),\n          new Rule(raw\u0022\\*/\u0022, CommentMultiline, \u0022#pop\u0022),\n          new Rule(raw\u0022[*/]\u0022, CommentMultiline),\n        ].as\u003cList\u003cRuleOption\u003e\u003e()),\n\n#### Strings\n\n        new Pair(\u0022interpolation\u0022, [\n          new Rule(\u0022}\u0022, StringInterpol, \u0022#pop\u0022),\n          include(\u0022root\u0022),\n        ].as\u003cList\u003cRuleOption\u003e\u003e()),\n\nI'm not sure if order matters here. Seems simpler, but if I don't exclude `\u0024{`\nfrom core string chars, I don't get interp.\n\n        new Pair(\u0022string\u0022, [\n          new Rule(\u0022\\\u0022\u0022, StringKind, \u0022#pop\u0022),\n          new Rule(raw\u0022\\\u0024\\{\u0022, StringInterpol, \u0022interpolation\u0022),\n          new Rule(\u0022(?:[^\\\u0022\u0024]|\\\\\u0024[^{])+\u0022, StringKind),\n        ].as\u003cList\u003cRuleOption\u003e\u003e()),\n\n      ]);\n\n    }\n\n## Helper functions and values\n\nBe sloppy with names for now. TODO More complete Unicode support.\n\n    let nameRegex = \u0022[_\u003c\u003cLu\u003e\u003e\u003c\u003cLl\u003e\u003e][_\u003c\u003cLu\u003e\u003e\u003c\u003cLl\u003e\u003e0-9]*\u0022;\n\n    let words(...names: List\u003cString\u003e): String {\n      \u0022\\\\b(?:\u0024{names.join(\u0022|\u0022) { (x);; x }})\\\\b\u0022\n    }\n\n## Imports and links\n\n    let { ... } = import(\u0022./pygments\u0022);\n\n[dlang-nestedcomment]: https://github.com/pygments/pygments/blob/d0acfff1121f9ee3696b01a9077ebe9990216634/pygments/lexers/d.py#L242\n[issue1631]: https://github.com/temper-lang/temper/issues/1631\n[pygments-lexer-docs]: https://pygments.org/docs/lexerdevelopment/\n" ], "names": [ "TemperObject", "cast_by_type", "Pair", "Pair#255", "map_constructor", "map_constructor#256", "list_join", "list_join#257", "str_cat", "str_cat#258", "Tuple", "Any", "Callable", "tuple", "RuleOption", "Rule", "Include", "Whitespace", "Kind", "CommentSingleline", "CommentMultiline", "KeywordConstant", "KeywordDeclaration", "Keyword", "NameBuiltin", "StringKind", "Operator", "Punctuation", "Number", "NameDecorator", "Name", "StringInterpol", "include", "Inherit", "TokenKind", "ByGroups", "bygroups", "Using", "using", "inherit", "TemperLexer", "name", "aliases", "filenames", "tokens", "constructor", "this", "return", "t#207", "t#209", "t#210", "t#211", "t#212", "t#213", "t#214", "t#215", "t#216", "t#217", "t#218", "t#219", "t#220", "t#221", "t#222", "t#223", "t#224", "t#225", "t#226", "t#227", "t#228", "t#229", "t#230", "t#231", "t#232", "t#233", "t#234", "t#235", "t#236", "t#237", "t#238", "t#133", "t#139", "t#143", "t#148", "words", "names", "fn", "x", "t#242", "t#243", "nameRegex" ], "mappings": "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" }