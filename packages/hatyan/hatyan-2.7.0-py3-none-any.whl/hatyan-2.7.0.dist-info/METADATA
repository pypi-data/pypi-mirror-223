Metadata-Version: 2.1
Name: hatyan
Version: 2.7.0
Summary: hatyan is a tidal analysis and prediction tool of Rijkswaterstaat
Home-page: https://github.com/Deltares/hatyan
Author: Jelmer Veenstra
Author-email: Jelmer.Veenstra@Deltares.nl
License: GNU Lesser General Public License v3 (LGPLv3)
Keywords: hatyan,tidal analysis,tidal prediction
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: scipy (>=1.5.4)
Requires-Dist: numpy (>=1.18.4)
Requires-Dist: matplotlib (>=3.2.1)
Requires-Dist: pandas (>=1.2.0)
Requires-Dist: netCDF4 (>=1.5.3)
Requires-Dist: pyproj (>=2.2.0)
Requires-Dist: sip (>=4.19.8)
Requires-Dist: requests
Requires-Dist: statsmodels
Requires-Dist: xarray
Provides-Extra: complete
Requires-Dist: bump2version (>=0.5.11) ; extra == 'complete'
Requires-Dist: flake8 ; extra == 'complete'
Requires-Dist: pytest ; extra == 'complete'
Requires-Dist: pytest-cov ; extra == 'complete'
Requires-Dist: twine ; extra == 'complete'
Requires-Dist: jupyter ; extra == 'complete'
Requires-Dist: notebook ; extra == 'complete'
Requires-Dist: mkdocs ; extra == 'complete'
Requires-Dist: mkdocs-material ; extra == 'complete'
Requires-Dist: mkdocs-jupyter ; extra == 'complete'
Requires-Dist: mkdocstrings-python ; extra == 'complete'
Requires-Dist: mkdocs-exclude ; extra == 'complete'
Provides-Extra: test
Requires-Dist: bump2version (>=0.5.11) ; extra == 'test'
Requires-Dist: flake8 ; extra == 'test'
Requires-Dist: pytest ; extra == 'test'
Requires-Dist: pytest-cov ; extra == 'test'
Requires-Dist: twine ; extra == 'test'
Requires-Dist: jupyter ; extra == 'test'
Requires-Dist: notebook ; extra == 'test'
Requires-Dist: mkdocs ; extra == 'test'
Requires-Dist: mkdocs-material ; extra == 'test'
Requires-Dist: mkdocs-jupyter ; extra == 'test'
Requires-Dist: mkdocstrings-python ; extra == 'test'
Requires-Dist: mkdocs-exclude ; extra == 'test'

[![codecov](https://img.shields.io/codecov/c/github/deltares/hatyan.svg?style=flat-square)](https://app.codecov.io/gh/deltares/hatyan)
[![pytest-hmcenv](https://github.com/Deltares/hatyan/actions/workflows/pytest-hmcenv.yml/badge.svg?branch=main)](https://github.com/Deltares/hatyan/actions/workflows/pytest-devenv.yml)
[![pytest-py38](https://github.com/Deltares/hatyan/actions/workflows/pytest-py38.yml/badge.svg?branch=main)](https://github.com/Deltares/hatyan/actions/workflows/pytest-py38.yml)
[![pytest-py39](https://github.com/Deltares/hatyan/actions/workflows/pytest-py39.yml/badge.svg?branch=main)](https://github.com/Deltares/hatyan/actions/workflows/pytest-py39.yml)
[![pytest-py310](https://github.com/Deltares/hatyan/actions/workflows/pytest-py310.yml/badge.svg?branch=main)](https://github.com/Deltares/hatyan/actions/workflows/pytest-py310.yml)
[![pytest-py311](https://github.com/Deltares/hatyan/actions/workflows/pytest-py311.yml/badge.svg?branch=main)](https://github.com/Deltares/hatyan/actions/workflows/pytest-py311.yml)
[![sigrid-publish](https://github.com/Deltares/hatyan/actions/workflows/sigrid-publish.yml/badge.svg?branch=main)](https://github.com/Deltares/hatyan/actions/workflows/sigrid-publish.yml)
[![pypi-upload](https://github.com/Deltares/hatyan/actions/workflows/pypi-upload.yml/badge.svg?event=release)](https://github.com/Deltares/hatyan/actions/workflows/pypi-upload.yml)
[![Supported versions](https://img.shields.io/pypi/pyversions/hatyan.svg)](https://pypi.org/project/hatyan)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Deltares_hatyan&metric=alert_status)](https://sonarcloud.io/dashboard?id=Deltares_hatyan)
[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/Deltares/hatyan/HEAD?urlpath=/tree/docs/notebooks)
[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6885342.svg)](https://doi.org/10.5281/zenodo.6885342)

# hatyan

A Python package for harmonic tidal analysis and prediction, based on the FORTRAN version and developed for Rijkswaterstaat. Hatyan contains the methods to derive water level extremes (high and low waters) and several other water level indicators (Kenmerkende Waarden). Furthermore, hatyan provides easier access to Rijkswaterstaat data via their data distribution layer (DataDistributieLaag, DDL).

## Information

- install with ``pip install hatyan -U``
- [online documentation](https://deltares.github.io/hatyan) with contributing guide, tutorials/examples, API reference and a convenient search box.
- [docs folder](https://github.com/Deltares/hatyan/tree/main/docs) with background information
- Bug or feature request? Create a [GitHub issue](https://github.com/Deltares/dfm_tools/issues)
