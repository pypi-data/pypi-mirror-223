# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_hierarchy.ipynb.

# %% auto 0
__all__ = ['compute_hierarchy']

# %% ../nbs/01_hierarchy.ipynb 7
def compute_hierarchy(G, metric="pykrack"):
    """
    Compute one of the possible hierarchy scores
    
    Parameters
    ----------
    G
        Directed NetworkX graph
    metric : str
        Type of hierarchy metric to compute. Accepted types are:
        'pykrack' for this module's implementation of the Krackhardt score.
        'rsnakrack' for the sna implementation in R.
        'hierarchy_flow' for the Luo and Magee 2011 as implemented in the NetworkX package.

    Returns
    -------
    score : float
        One of the possible hierarchy scores
    """
    
    import networkx as nx # Be mindful of scoping!
    from itertools import product

    #Ensure Graph is DirectedGraph
    if not G.is_directed():
        raise Exception
    #Ensure Graph is of DiGraph() format
    G = nx.DiGraph(G)

    if metric == "pykrack": #Python implementation
        #Compute transitive closure of graph to get the reachability graph
            #[contains an edge (i,j) if there is a path from i to j in the original graph]
        acyclic = 0
        try:
            nx.find_cycle(G)
        except:
            print("Acyclic graph")
            acyclic = 1
        if acyclic == 1:
            Gr = nx.transitive_closure_dag(G)
        else:
            Gr = nx.transitive_closure(G, reflexive=None)
        symmetric_dyads = 0
        non_null_dyads = 0
        n = len(Gr.nodes())
        #Count the number of non-null symmetric dyads
        for pair in product(Gr.nodes(), Gr.nodes()):
            if Gr.has_edge(pair[0],pair[1]) or Gr.has_edge(pair[1],pair[0]): #Non-null dyad
                non_null_dyads+=1
                if  Gr.has_edge(pair[0],pair[1]) == Gr.has_edge(pair[1],pair[0]): #Symmetric!
                    symmetric_dyads+=1
        #Raise exception if graph has no edges!
        if non_null_dyads == 0:
            raise Exception
        score = 1 - (symmetric_dyads / non_null_dyads)
    
    elif metric == "rsnakrack": #R implementation from the sna package
        #Be wary of scoping again!
        from rpy2.robjects.packages import importr

        try:
            base = importr("base")
            sna = importr("sna")
            score = sna.hierarchy(nx.to_numpy_array(G), measure="krackhardt")[0]
        except:
            print("R package sna was not found. Please install manually!")
            print("Computing hierarchy flow instead")
            snafail_flag = 1
            score = nx.flow_hierarchy(G)
    
    elif metric == "hierarchy_flow": #Networkx's hierarchy flow implementation
        score = nx.flow_hierarchy(G)

    # elif metric == "all": #This will eventually return a dict with all metrics

    else: # metric argument broken
        raise Exception



    return score

