from contextlib import contextmanager
import bolt_expressions.sources as sources
import inspect
import re

from ./raw_operations import StoreExpressionValue, GetExpressionValue
from ./comparison import ExpressionComparison


store_expression_value = StoreExpressionValue()
get_expression_value = GetExpressionValue()


class ScoreSource(sources.ScoreSource):
    def __eq__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '==', other)
        return super().__eq__(other)

    def __ne__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '!=', other)
        return super().__ne__(other)

    def __lt__(self, other):
        return ExpressionComparison(self, '<', other)

    def __gt__(self, other):
        return ExpressionComparison(self, '>', other)

    def __le__(self, other):
        return ExpressionComparison(self, '<=', other)

    def __ge__(self, other):
        return ExpressionComparison(self, '>=', other)

    @contextmanager
    def __branch__(self):
        if ExpressionComparison(self, '==', None):
            yield True

    def __not__(self):
        return ExpressionComparison(self, '!=', None)

    def exists(self):
        return ExpressionComparison(self, '==', None, check_exists=True)

    @contextmanager
    def store(self, mode='result', type='int', scale=1):
        with store_expression_value(self, mode, type, scale):
            yield True

    def get(self, scale=None):
        return get_expression_value(self, scale)

class DataSource(sources.DataSource):
    def __eq__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '==', other)
        return super().__eq__(other)

    def __ne__(self, other):
        if is_comparison_case():
            return ExpressionComparison(self, '!=', other)
        return super().__ne__(other)

    def __lt__(self, other):
        return ExpressionComparison(self, '<', other)

    def __gt__(self, other):
        return ExpressionComparison(self, '>', other)

    def __le__(self, other):
        return ExpressionComparison(self, '<=', other)

    def __ge__(self, other):
        return ExpressionComparison(self, '>=', other)

    @contextmanager
    def __branch__(self):
        if ExpressionComparison(self, '==', None):
            yield True

    def __not__(self):
        return ExpressionComparison(self, '!=', None)

    def exists(self):
        return ExpressionComparison(self, '==', None, check_exists=True)

    @contextmanager
    def store(self, mode='result', type='int', scale=1):
        with store_expression_value(self, mode, type, scale):
            yield True

    def get(self, scale=None):
        return get_expression_value(self, scale)

def is_comparison_case() -> bool:
    """Determines whether a comparison dunder method call was intended to compare."""

    frame = inspect.getouterframes(inspect.currentframe(), 2)[2]
    output = re.compile(r"sources.|optimizer.").search(frame.filename) == None
    # print([' ', '+'][output], frame.filename)
    return output
