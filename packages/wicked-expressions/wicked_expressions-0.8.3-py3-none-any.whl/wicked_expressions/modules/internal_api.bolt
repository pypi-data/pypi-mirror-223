from typing import Any
import bolt_expressions.node as be_node
import bolt_expressions.api as be_api

from ./config import Config
from ./safe_load import safe_load
import ./sources as sources


class Scoreboard(be_api.Scoreboard):
    def objective(self, name: str, criteria: str = 'dummy', prefixed=True, display_name=None):
        if prefixed:
            name = self._expr.opts.objective_prefix + name

        if criteria == None:
            criteria = 'dummy'

        if name not in self.added_objectives:
            self.added_objectives.add(name)
            self.create_objective(name, criteria, display_name)

        return Score(self, name)

    def create_objective(self, objective_id: str, criteria: str, display_name: str | dict):
        if isinstance(display_name, str):
            display_name = display_name

        with safe_load('scoreboard_setup', append=True):
            if display_name is None:
                scoreboard objectives add objective_id criteria
            else:
                scoreboard objectives add objective_id criteria display_name

class Score(be_api.Score):
    def __getitem__(self, scoreholder: str | list[str]) -> sources.ScoreSource | list[sources.ScoreSource]:
        if isinstance(scoreholder, str):
            return sources.ScoreSource.create(scoreholder, self.objective)

        score_sources = []
        for holder in scoreholder:
            score_sources.append(sources.ScoreSource.create(holder, self.objective))
        return score_sources

class Data(be_api.Data):
    def storage(self, resource_location: str):
        return sources.DataSource.create("storage", resource_location)

    def entity(self, entity: str):
        return sources.DataSource.create("entity", entity)

    def block(self, position: str):
        return sources.DataSource.create("block", position)
