# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class OptionsSymbol(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Options Symbol
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            ticker = schemas.StrSchema
            strike_price = schemas.NumberSchema
            expiration_date = schemas.StrSchema
            is_mini_option = schemas.BoolSchema
        
            @staticmethod
            def underlying_symbol() -> typing.Type['UnderlyingSymbol']:
                return UnderlyingSymbol
            local_id = schemas.StrSchema
            security_type = schemas.AnyTypeSchema
            listing_exchange = schemas.AnyTypeSchema
            is_quotable = schemas.BoolSchema
            is_tradable = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "ticker": ticker,
                "strike_price": strike_price,
                "expiration_date": expiration_date,
                "is_mini_option": is_mini_option,
                "underlying_symbol": underlying_symbol,
                "local_id": local_id,
                "security_type": security_type,
                "listing_exchange": listing_exchange,
                "is_quotable": is_quotable,
                "is_tradable": is_tradable,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticker"]) -> MetaOapg.properties.ticker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strike_price"]) -> MetaOapg.properties.strike_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration_date"]) -> MetaOapg.properties.expiration_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_mini_option"]) -> MetaOapg.properties.is_mini_option: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["underlying_symbol"]) -> 'UnderlyingSymbol': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["local_id"]) -> MetaOapg.properties.local_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security_type"]) -> MetaOapg.properties.security_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["listing_exchange"]) -> MetaOapg.properties.listing_exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_quotable"]) -> MetaOapg.properties.is_quotable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_tradable"]) -> MetaOapg.properties.is_tradable: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["ticker"], typing_extensions.Literal["strike_price"], typing_extensions.Literal["expiration_date"], typing_extensions.Literal["is_mini_option"], typing_extensions.Literal["underlying_symbol"], typing_extensions.Literal["local_id"], typing_extensions.Literal["security_type"], typing_extensions.Literal["listing_exchange"], typing_extensions.Literal["is_quotable"], typing_extensions.Literal["is_tradable"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticker"]) -> typing.Union[MetaOapg.properties.ticker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strike_price"]) -> typing.Union[MetaOapg.properties.strike_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration_date"]) -> typing.Union[MetaOapg.properties.expiration_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_mini_option"]) -> typing.Union[MetaOapg.properties.is_mini_option, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["underlying_symbol"]) -> typing.Union['UnderlyingSymbol', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["local_id"]) -> typing.Union[MetaOapg.properties.local_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security_type"]) -> typing.Union[MetaOapg.properties.security_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["listing_exchange"]) -> typing.Union[MetaOapg.properties.listing_exchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_quotable"]) -> typing.Union[MetaOapg.properties.is_quotable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_tradable"]) -> typing.Union[MetaOapg.properties.is_tradable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["ticker"], typing_extensions.Literal["strike_price"], typing_extensions.Literal["expiration_date"], typing_extensions.Literal["is_mini_option"], typing_extensions.Literal["underlying_symbol"], typing_extensions.Literal["local_id"], typing_extensions.Literal["security_type"], typing_extensions.Literal["listing_exchange"], typing_extensions.Literal["is_quotable"], typing_extensions.Literal["is_tradable"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        ticker: typing.Union[MetaOapg.properties.ticker, str, schemas.Unset] = schemas.unset,
        strike_price: typing.Union[MetaOapg.properties.strike_price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        expiration_date: typing.Union[MetaOapg.properties.expiration_date, str, schemas.Unset] = schemas.unset,
        is_mini_option: typing.Union[MetaOapg.properties.is_mini_option, bool, schemas.Unset] = schemas.unset,
        underlying_symbol: typing.Union['UnderlyingSymbol', schemas.Unset] = schemas.unset,
        local_id: typing.Union[MetaOapg.properties.local_id, str, schemas.Unset] = schemas.unset,
        security_type: typing.Union[MetaOapg.properties.security_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        listing_exchange: typing.Union[MetaOapg.properties.listing_exchange, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        is_quotable: typing.Union[MetaOapg.properties.is_quotable, bool, schemas.Unset] = schemas.unset,
        is_tradable: typing.Union[MetaOapg.properties.is_tradable, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'OptionsSymbol':
        return super().__new__(
            cls,
            *args,
            id=id,
            ticker=ticker,
            strike_price=strike_price,
            expiration_date=expiration_date,
            is_mini_option=is_mini_option,
            underlying_symbol=underlying_symbol,
            local_id=local_id,
            security_type=security_type,
            listing_exchange=listing_exchange,
            is_quotable=is_quotable,
            is_tradable=is_tradable,
            _configuration=_configuration,
            **kwargs,
        )

from snaptrade_client.model.underlying_symbol import UnderlyingSymbol
