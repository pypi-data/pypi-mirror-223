Metadata-Version: 2.1
Name: fern-nixtla
Version: 0.0.4
Summary: 
Requires-Python: >=3.8,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: httpx (==0.23.3)
Requires-Dist: pandas (>=2.0.3,<3.0.0)
Requires-Dist: pydantic (>=1.9.2,<2.0.0)
Description-Content-Type: text/markdown

# Nixtla &nbsp; [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Statistical%20Forecasting%20Algorithms%20by%20Nixtla%20&url=https://github.com/Nixtla/statsforecast&via=nixtlainc&hashtags=StatisticalModels,TimeSeries,Forecasting) &nbsp;[![Slack](https://img.shields.io/badge/Slack-4A154B?&logo=slack&logoColor=white)](https://join.slack.com/t/nixtlacommunity/shared_invite/zt-1pmhan9j5-F54XR20edHk0UtYAPcW4KQ)

<div align="center">
<img src="https://raw.githubusercontent.com/Nixtla/neuralforecast/main/nbs/imgs_indx/logo_mid.png">
<h1 align="center">NixtlaTS</h1>
<h3 align="center">Forecast using TimeGPT</h3>
    
[![CI](https://github.com/fern-nixtla/nixtla-python/actions/workflows/ci.yml/badge.svg?branch=main)](.github/workflows/ci.yml)
[![Python](https://img.shields.io/pypi/pyversions/fern-nixtla)](https://pypi.org/project/fern-nixtla/)
[![pypi](https://img.shields.io/pypi/v/fern-nixtla.svg)](https://pypi.python.org/pypi/fern-nixtla)
[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://github.com/Nixtla/nixtlats/blob/main/LICENSE)
[![docs](https://img.shields.io/website-up-down-green-red/http/nixtla.github.io/nixtla.svg?label=docs)](https://nixtla.github.io/nixtla/)
[![Downloads](https://pepy.tech/badge/nixtlats)](https://pepy.tech/project/nixtlats)
[![fern shield](https://img.shields.io/badge/%F0%9F%8C%BF-SDK%20generated%20by%20Fern-brightgreen)](https://github.com/fern-api/fern)
    
**NixtlaTS** offers a collection of classes and methods to interact with the API of TimeGPT.
</div>

Certainly, adding a bit of personality and visual appeal can make your README stand out. Here's a reworked version:

---

# 🕰️ TimeGPT: Revolutionizing Time-Series Analysis

Developed by Nixtla, TimeGPT is a cutting-edge generative pre-trained transformer model dedicated to prediction tasks. 🚀 By leveraging the most extensive dataset ever – financial, weather, energy, and sales data – TimeGPT brings unparalleled time-series analysis right to your terminal! 👩‍💻👨‍💻

In seconds, TimeGPT can discern complex patterns and predict future data points, transforming the landscape of data science and predictive analytics.

## ⚙️ Fine-Tuning: For Precision Prediction

In addition to its core capabilities, TimeGPT supports fine-tuning, enhancing its specialization for specific prediction tasks. 🎯 This feature is like training a machine learning model on a targeted data subset to improve its task-specific performance, making TimeGPT an even more versatile tool for your predictive needs.

## 🔄 `NixtlaTS`: Your Gateway to TimeGPT

With `NixtlaTS`, you can easily interact with TimeGPT through simple API calls, making the power of TimeGPT readily accessible in your projects.

## 💻 Installation

Get `NixtlaTS` up and running with a simple pip command:

```python
pip install fern-nixtla>=0.1.0
```

## 🎈 Quick Start

Get started with TimeGPT now:

```python
from nixtla import TimeGPT
timegpt = TimeGPT(token=os.environ['TIMEGPT_TOKEN'])
fcst_df = timegpt.forecast(df, h=24, freq='H', level=[80, 90])
```

## 💻 Advanced

### HTTP Client

The SDK also exports a typed HTTP client that you can use to directly
interact with the APIs if you want.

```python
from nixtla.client import Nixtla
from nixtla.client.types import MultiSeriesInput

client = Nixtla(token="YOUR_TOKEN")
response = client.timegpt_multi_series_historic(
    freq='H',
    level=[80, 90],
    x=MultiSeriesInput(
        columns=["unique_id", "ds", "ex_1", "ex_2"],
        data=[["ts_0", "2021-01-01", 0.2, 0.67], ["ts_1", "2021-01-02", 0.4, 0.7]]
    ),
)
```

#### Async HTTP Client

If you want an async client, just import AsyncNixtla

```python
from nixtla.client import AsyncNixtla
from nixtla.client.types import MultiSeriesInput

import asyncio

client = AsyncNixtla(token="YOUR_TOKEN")

async def create_multi_series_historic() -> None:
    response = client.timegpt_multi_series_historic(
        freq='H',
        level=[80, 90],
        x=MultiSeriesInput(
            columns=["unique_id", "ds", "ex_1", "ex_2"],
            data=[["ts_0", "2021-01-01", 0.2, 0.67], ["ts_1", "2021-01-02", 0.4, 0.7]]
        ),
    )

asyncio.run(create_multi_series_historic())
```

#### Timeouts

By default, the client is configured to have a timeout of 60 seconds.
You can customize this value at client instantiation.

```python
from nixtla.client import Nixtla

client = Nixtla(token="YOUR_TOKEN", timeout=15)
```

#### Handling Exceptions

All exceptions thrown by the HTTP Client will sublcass [nixtla.ApiError](./src/nixtla/core/api_error.py).

```python
from nixtla.core import ApiError

try:
  client.validate_token()
except APIError as e:
  # handle any api related error
```

![](./nbs/img/forecast_readme.png)

