# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/timegpt.ipynb.

__all__ = ['logger']

import logging
import inspect
import pandas as pd # type: ignore
from typing import List, Optional, Union

from .client import Nixtla, SingleSeriesForecast


logger = logging.getLogger()

# %% ../nbs/timegpt.ipynb 7
class TimeGPT:
    """
    A class used to interact with the TimeGPT API.
    """

    def __init__(self, token: str):
        """
        Constructs all the necessary attributes for the TimeGPT object.

        Parameters
        ----------
        token : str
            The authorization token to interact with the TimeGPT API.
        """
        self.client = Nixtla(environment="https://dashboard.nixtla.io/api", token=token)
        self.weights_x: pd.DataFrame = None

    def _validate_inputs(
        self,
        df: pd.DataFrame,
        X_df: pd.DataFrame,
        id_col: str,
        time_col: str,
        target_col: str,
    ):
        renamer = {
            id_col: "unique_id",
            time_col: "ds",
            target_col: "y",
        }
        df = df.rename(columns=renamer)
        if df.dtypes.ds != "object":
            df["ds"] = df["ds"].astype(str)
        drop_uid = False
        if "unique_id" not in df.columns:
            # Insert unique_id column
            df = df.assign(unique_id="ts_0")
            drop_uid = True
        if X_df is not None:
            X_df = X_df.rename(columns=renamer)
            if "unique_id" not in X_df.columns:
                X_df = X_df.assign(unique_id="ts_0")
            if X_df.dtypes.ds != "object":
                X_df["ds"] = X_df["ds"].astype(str)
        return df, X_df, drop_uid

    def _validate_outputs(
        self,
        fcst_df: pd.DataFrame,
        id_col: str,
        time_col: str,
        target_col: str,
        drop_uid: bool,
    ):
        renamer = {
            "unique_id": id_col,
            "ds": time_col,
            "target_col": target_col,
        }
        if drop_uid:
            fcst_df = fcst_df.drop(columns="unique_id")
        fcst_df = fcst_df.rename(columns=renamer)
        return fcst_df

    def _infer_freq(self, df: pd.DataFrame):
        unique_id = df.iloc[0]["unique_id"]
        df_id = df.query("unique_id == @unique_id")
        freq = pd.infer_freq(df_id["ds"])
        if freq is None:
            raise Exception(
                "Could not infer frequency of ds column. This could be due to "
                "inconsistent intervals. Please check your data for missing, "
                "duplicated or irregular timestamps"
            )
        return freq

    def _resample_dataframe(
        self,
        df: pd.DataFrame,
        freq: str,
    ):
        df = df.copy()
        df["ds"] = pd.to_datetime(df["ds"])
        resampled_df = df.set_index("ds").groupby("unique_id").resample(freq).bfill()
        resampled_df = resampled_df.drop(columns="unique_id").reset_index()
        resampled_df["ds"] = resampled_df["ds"].astype(str)
        return resampled_df

    def _preprocess_dataframes(
        self,
        df: pd.DataFrame,
        h: int,
        X_df: Optional[pd.DataFrame],
        freq: str,
    ):
        """Returns Y_df and X_df dataframes in the structure expected by the endpoints."""
        y_cols = ["unique_id", "ds", "y"]
        Y_df = df[y_cols]
        if Y_df["y"].isna().any():
            raise Exception("Your target variable contains NA, please check")
        # Azul: efficient this code
        # and think about returning dates that are not in the training set
        Y_df = self._resample_dataframe(Y_df, freq)
        x_cols = []
        if X_df is not None:
            x_cols = X_df.drop(columns=["unique_id", "ds"]).columns.to_list()
            if not all(col in df.columns for col in x_cols):
                raise Exception(
                    "You must include the exogenous variables in the `df` object, "
                    f'exogenous variables {",".join(x_cols)}'
                )
            if len(X_df) != df["unique_id"].nunique() * h:
                raise Exception(
                    f"You have to pass the {h} future values of your "
                    "exogenous variables for each time series"
                )
            X_df_history = df[["unique_id", "ds"] + x_cols]
            X_df = pd.concat([X_df_history, X_df])
            if X_df[x_cols].isna().any().any():
                raise Exception(
                    "Some of your exogenous variables contain NA, please check"
                )
            X_df = X_df.sort_values(["unique_id", "ds"]).reset_index(drop=True)
            X_df = self._resample_dataframe(X_df, freq)
        return Y_df, X_df, x_cols

    def _get_to_dict_args(self):
        to_dict_args = {"orient": "split"}
        if "index" in inspect.signature(pd.DataFrame.to_dict).parameters:
            to_dict_args["index"] = False
        return to_dict_args

    def _transform_dataframes(self, Y_df: pd.DataFrame, X_df: pd.DataFrame):
        # contruction of y and x for the payload
        to_dict_args = self._get_to_dict_args()
        y = Y_df.to_dict(**to_dict_args)
        x = X_df.to_dict(**to_dict_args) if X_df is not None else None
        return y, x

    def _hit_multi_series_endpoint(
        self,
        Y_df: pd.DataFrame,
        X_df: pd.DataFrame,
        x_cols: List[str],
        h: int,
        freq: str,
        finetune_steps: int,
        clean_ex_first: bool,
        level: Optional[List[Union[int, float]]],
    ):
        # restrict input only if we dont want
        # to finetune the model
        restrict_input = finetune_steps == 0
        if restrict_input:
            model_params = self.client.timegpt_model_params(request=SingleSeriesForecast(freq=freq))
            input_size, model_horizon = (
                model_params["input_size"],
                model_params["horizon"],
            )
            if level is not None:
                # add sufficient info to compute
                # conformal interval
                input_size = 3 * input_size + max(model_horizon, h)
        else:
            input_size = model_horizon = None
        # restricting the inputs if necessary
        if restrict_input:
            Y_df = Y_df.groupby("unique_id").tail(input_size)
            if X_df is not None:
                X_df = X_df.groupby("unique_id").tail(
                    input_size + h
                )  # history plus exogenous
        y, x = self._transform_dataframes(Y_df, X_df)
        response_timegpt = self.client.timegpt_multi_series(
            y=y,
            x=x,
            fh=h,
            freq=freq,
            level=level,
            finetune_steps=finetune_steps,
            clean_ex_first=clean_ex_first,
        )
        if "weights_x" in response_timegpt["data"]:
            self.weights_x = pd.DataFrame(
                {
                    "features": x_cols,
                    "weights": response_timegpt["data"]["weights_x"],
                }
            )
        return pd.DataFrame(**response_timegpt["data"]["forecast"])

    def _hit_multi_series_historic_endpoint(
        self,
        Y_df: pd.DataFrame,
        freq: str,
        level: Optional[List[Union[int, float]]],
    ):
        y, x = self._transform_dataframes(Y_df, None)
        response_timegpt = self.client.timegpt_multi_series_historic(
            freq=freq,
            level=level,
            y=y
        )
        return pd.DataFrame(**response_timegpt["data"]["forecast"])

    def _multi_series(
        self,
        df: pd.DataFrame,
        h: int,
        freq: Optional[str],
        X_df: Optional[pd.DataFrame],
        level: Optional[List[Union[int, float]]],
        finetune_steps: int,
        clean_ex_first: bool,
        add_history: bool,
    ):
        if freq is None:
            freq = self._infer_freq(df)
        Y_df, X_df, x_cols = self._preprocess_dataframes(
            df=df,
            h=h,
            X_df=X_df,
            freq=freq,
        )
        fcst_df = self._hit_multi_series_endpoint(
            Y_df=Y_df,
            X_df=X_df,
            h=h,
            freq=freq,
            clean_ex_first=clean_ex_first,
            finetune_steps=finetune_steps,
            x_cols=x_cols,
            level=level,
        )
        if add_history:
            fitted_df = self._hit_multi_series_historic_endpoint(
                Y_df=Y_df,
                freq=freq,
                level=level,
            )
            fitted_df = fitted_df.drop(columns="y")
            fcst_df = pd.concat([fitted_df, fcst_df]).sort_values(["unique_id", "ds"])
        return fcst_df

    def forecast(
        self,
        df: pd.DataFrame,
        h: int,
        freq: Optional[str] = None,
        id_col: str = "unique_id",
        time_col: str = "ds",
        target_col: str = "y",
        X_df: Optional[pd.DataFrame] = None,
        level: Optional[List[Union[int, float]]] = None,
        finetune_steps: int = 0,
        clean_ex_first: bool = True,
        validate_token: bool = False,
        add_history: bool = False,
    ):
        """Forecast your time series using TimeGPT.

        Parameters
        ----------
        df : pandas.DataFrame
            The DataFrame on which the function will operate. Expected to contain at least the following columns:
            - time_col:
                Column name in `df` that contains the time indices of the time series. This is typically a datetime
                column with regular intervals, e.g., hourly, daily, monthly data points.
            - target_col:
                Column name in `df` that contains the target variable of the time series, i.e., the variable we
                wish to predict or analyze.
            Additionally, you can pass multiple time series (stacked in the dataframe) considering an additional column:
            - id_col:
                Column name in `df` that identifies unique time series. Each unique value in this column
                corresponds to a unique time series.
        h : int
            Forecast horizon.
        freq : str
            Frequency of the data. By default, the freq will be inferred automatically.
            See [pandas' available frequencies](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases).
        id_col : str (default='unique_id')
            Column that identifies each serie.
        time_col : str (default='ds')
            Column that identifies each timestep, its values can be timestamps or integers.
        target_col : str (default='y')
            Column that contains the target.
        X_df : pandas.DataFrame, optional (default=None)
            DataFrame with [`unique_id`, `ds`] columns and `df`'s future exogenous.
        level : List[float], optional (default=None)
            Confidence levels between 0 and 100 for prediction intervals.
        finetune_steps : int (default=0)
            Number of steps used to finetune TimeGPT in the
            new data.
        clean_ex_first : bool (default=True)
            Clean exogenous signal before making forecasts
            using TimeGPT.
        validate_token : bool (default=False)
            If True, validates token before
            sending requests.
        add_history : bool (default=False)
            Return fitted values of the model.

        Returns
        -------
        fcsts_df : pandas.DataFrame
            DataFrame with TimeGPT forecasts for point predictions and probabilistic
            predictions (if level is not None).
        """
        if not self.client.validate_token():
            raise Exception(
                "Token not valid, please go to https://dashboard.nixtla.io/ to get yours"
            )

        df, X_df, drop_uid = self._validate_inputs(
            df=df,
            X_df=X_df,
            id_col=id_col,
            time_col=time_col,
            target_col=target_col,
        )
        fcst_df = self._multi_series(
            df=df,
            h=h,
            freq=freq,
            X_df=X_df,
            level=level,
            finetune_steps=finetune_steps,
            clean_ex_first=clean_ex_first,
            add_history=add_history,
        )
        fcst_df = self._validate_outputs(
            fcst_df=fcst_df,
            id_col=id_col,
            time_col=time_col,
            target_col=target_col,
            drop_uid=drop_uid,
        )
        return fcst_df
