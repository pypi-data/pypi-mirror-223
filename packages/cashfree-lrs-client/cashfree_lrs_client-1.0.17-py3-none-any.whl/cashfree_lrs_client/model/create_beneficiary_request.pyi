# coding: utf-8

"""
    Cashfree LRS

    CashFree LRS APIs (v2)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cashfree_lrs_client import schemas  # noqa: F401


class CreateBeneficiaryRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "account_number",
            "beneficiary_id",
            "country",
            "address",
            "city",
            "account_holder_name",
            "swift_code",
            "bank_address",
            "bank_name",
            "bank_country",
            "state",
            "postal_code",
        }
        
        class properties:
            
            
            class beneficiary_id(
                schemas.StrSchema
            ):
                pass
            
            
            class account_holder_name(
                schemas.StrSchema
            ):
                pass
            
            
            class account_number(
                schemas.StrSchema
            ):
                pass
            
            
            class swift_code(
                schemas.StrSchema
            ):
                pass
            
            
            class bank_name(
                schemas.StrSchema
            ):
                pass
            
            
            class bank_address(
                schemas.StrSchema
            ):
                pass
            
            
            class bank_country(
                schemas.StrSchema
            ):
                pass
            
            
            class address(
                schemas.StrSchema
            ):
                pass
            
            
            class city(
                schemas.StrSchema
            ):
                pass
            
            
            class state(
                schemas.StrSchema
            ):
                pass
            
            
            class country(
                schemas.StrSchema
            ):
                pass
            
            
            class postal_code(
                schemas.StrSchema
            ):
                pass
            
            
            class iban(
                schemas.StrSchema
            ):
                pass
            
            
            class routing_number(
                schemas.StrSchema
            ):
                pass
            
            
            class sort_code(
                schemas.StrSchema
            ):
                pass
            
            
            class transit_code(
                schemas.StrSchema
            ):
                pass
            
            
            class bsb_number(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "beneficiary_id": beneficiary_id,
                "account_holder_name": account_holder_name,
                "account_number": account_number,
                "swift_code": swift_code,
                "bank_name": bank_name,
                "bank_address": bank_address,
                "bank_country": bank_country,
                "address": address,
                "city": city,
                "state": state,
                "country": country,
                "postal_code": postal_code,
                "iban": iban,
                "routing_number": routing_number,
                "sort_code": sort_code,
                "transit_code": transit_code,
                "bsb_number": bsb_number,
            }
    
    account_number: MetaOapg.properties.account_number
    beneficiary_id: MetaOapg.properties.beneficiary_id
    country: MetaOapg.properties.country
    address: MetaOapg.properties.address
    city: MetaOapg.properties.city
    account_holder_name: MetaOapg.properties.account_holder_name
    swift_code: MetaOapg.properties.swift_code
    bank_address: MetaOapg.properties.bank_address
    bank_name: MetaOapg.properties.bank_name
    bank_country: MetaOapg.properties.bank_country
    state: MetaOapg.properties.state
    postal_code: MetaOapg.properties.postal_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiary_id"]) -> MetaOapg.properties.beneficiary_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_holder_name"]) -> MetaOapg.properties.account_holder_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["swift_code"]) -> MetaOapg.properties.swift_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_name"]) -> MetaOapg.properties.bank_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_address"]) -> MetaOapg.properties.bank_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_country"]) -> MetaOapg.properties.bank_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iban"]) -> MetaOapg.properties.iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_number"]) -> MetaOapg.properties.routing_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort_code"]) -> MetaOapg.properties.sort_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transit_code"]) -> MetaOapg.properties.transit_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bsb_number"]) -> MetaOapg.properties.bsb_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["beneficiary_id", "account_holder_name", "account_number", "swift_code", "bank_name", "bank_address", "bank_country", "address", "city", "state", "country", "postal_code", "iban", "routing_number", "sort_code", "transit_code", "bsb_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiary_id"]) -> MetaOapg.properties.beneficiary_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_holder_name"]) -> MetaOapg.properties.account_holder_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["swift_code"]) -> MetaOapg.properties.swift_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_name"]) -> MetaOapg.properties.bank_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_address"]) -> MetaOapg.properties.bank_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_country"]) -> MetaOapg.properties.bank_country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iban"]) -> typing.Union[MetaOapg.properties.iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_number"]) -> typing.Union[MetaOapg.properties.routing_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort_code"]) -> typing.Union[MetaOapg.properties.sort_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transit_code"]) -> typing.Union[MetaOapg.properties.transit_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bsb_number"]) -> typing.Union[MetaOapg.properties.bsb_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["beneficiary_id", "account_holder_name", "account_number", "swift_code", "bank_name", "bank_address", "bank_country", "address", "city", "state", "country", "postal_code", "iban", "routing_number", "sort_code", "transit_code", "bsb_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_number: typing.Union[MetaOapg.properties.account_number, str, ],
        beneficiary_id: typing.Union[MetaOapg.properties.beneficiary_id, str, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        city: typing.Union[MetaOapg.properties.city, str, ],
        account_holder_name: typing.Union[MetaOapg.properties.account_holder_name, str, ],
        swift_code: typing.Union[MetaOapg.properties.swift_code, str, ],
        bank_address: typing.Union[MetaOapg.properties.bank_address, str, ],
        bank_name: typing.Union[MetaOapg.properties.bank_name, str, ],
        bank_country: typing.Union[MetaOapg.properties.bank_country, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        postal_code: typing.Union[MetaOapg.properties.postal_code, str, ],
        iban: typing.Union[MetaOapg.properties.iban, str, schemas.Unset] = schemas.unset,
        routing_number: typing.Union[MetaOapg.properties.routing_number, str, schemas.Unset] = schemas.unset,
        sort_code: typing.Union[MetaOapg.properties.sort_code, str, schemas.Unset] = schemas.unset,
        transit_code: typing.Union[MetaOapg.properties.transit_code, str, schemas.Unset] = schemas.unset,
        bsb_number: typing.Union[MetaOapg.properties.bsb_number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateBeneficiaryRequest':
        return super().__new__(
            cls,
            *_args,
            account_number=account_number,
            beneficiary_id=beneficiary_id,
            country=country,
            address=address,
            city=city,
            account_holder_name=account_holder_name,
            swift_code=swift_code,
            bank_address=bank_address,
            bank_name=bank_name,
            bank_country=bank_country,
            state=state,
            postal_code=postal_code,
            iban=iban,
            routing_number=routing_number,
            sort_code=sort_code,
            transit_code=transit_code,
            bsb_number=bsb_number,
            _configuration=_configuration,
            **kwargs,
        )
