# coding: utf-8

"""
    Cashfree LRS

    CashFree LRS APIs (v2)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Contact: nextgenapi@cashfree.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cashfree_lrs_client import schemas  # noqa: F401


class CreateRemitterRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "account_number",
            "bank_code",
            "address",
            "nationality",
            "city",
            "purpose",
            "remitter_id",
            "name",
            "state",
            "ifsc",
            "pan",
            "postal_code",
        }
        
        class properties:
            
            
            class remitter_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 1
        
            @staticmethod
            def purpose() -> typing.Type['Purpose']:
                return Purpose
            
            
            class account_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 9
            
            
            class ifsc(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 11
                    min_length = 8
            
            
            class pan(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 10
                    min_length = 10
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 3
            
            
            class address(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 200
                    min_length = 3
            
            
            class city(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 3
            
            
            class state(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 3
            
            
            class postal_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 6
                    min_length = 6
            
            
            class nationality(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2
                    min_length = 2
                    enum_value_to_name = {
                        "IN": "IN",
                        "US": "US",
                    }
                
                @schemas.classproperty
                def IN(cls):
                    return cls("IN")
                
                @schemas.classproperty
                def US(cls):
                    return cls("US")
            
            
            class bank_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
            
            
            class phone_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 10
                    min_length = 10
            
            
            class email(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'email'
                    max_length = 50
                    min_length = 5
            __annotations__ = {
                "remitter_id": remitter_id,
                "purpose": purpose,
                "account_number": account_number,
                "ifsc": ifsc,
                "pan": pan,
                "name": name,
                "address": address,
                "city": city,
                "state": state,
                "postal_code": postal_code,
                "nationality": nationality,
                "bank_code": bank_code,
                "phone_number": phone_number,
                "email": email,
            }
    
    account_number: MetaOapg.properties.account_number
    bank_code: MetaOapg.properties.bank_code
    address: MetaOapg.properties.address
    nationality: MetaOapg.properties.nationality
    city: MetaOapg.properties.city
    purpose: 'Purpose'
    remitter_id: MetaOapg.properties.remitter_id
    name: MetaOapg.properties.name
    state: MetaOapg.properties.state
    ifsc: MetaOapg.properties.ifsc
    pan: MetaOapg.properties.pan
    postal_code: MetaOapg.properties.postal_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remitter_id"]) -> MetaOapg.properties.remitter_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> 'Purpose': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ifsc"]) -> MetaOapg.properties.ifsc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pan"]) -> MetaOapg.properties.pan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_code"]) -> MetaOapg.properties.bank_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["remitter_id", "purpose", "account_number", "ifsc", "pan", "name", "address", "city", "state", "postal_code", "nationality", "bank_code", "phone_number", "email", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remitter_id"]) -> MetaOapg.properties.remitter_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> 'Purpose': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ifsc"]) -> MetaOapg.properties.ifsc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pan"]) -> MetaOapg.properties.pan: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_code"]) -> MetaOapg.properties.bank_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union[MetaOapg.properties.phone_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["remitter_id", "purpose", "account_number", "ifsc", "pan", "name", "address", "city", "state", "postal_code", "nationality", "bank_code", "phone_number", "email", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_number: typing.Union[MetaOapg.properties.account_number, str, ],
        bank_code: typing.Union[MetaOapg.properties.bank_code, str, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        nationality: typing.Union[MetaOapg.properties.nationality, str, ],
        city: typing.Union[MetaOapg.properties.city, str, ],
        purpose: 'Purpose',
        remitter_id: typing.Union[MetaOapg.properties.remitter_id, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        ifsc: typing.Union[MetaOapg.properties.ifsc, str, ],
        pan: typing.Union[MetaOapg.properties.pan, str, ],
        postal_code: typing.Union[MetaOapg.properties.postal_code, str, ],
        phone_number: typing.Union[MetaOapg.properties.phone_number, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateRemitterRequest':
        return super().__new__(
            cls,
            *_args,
            account_number=account_number,
            bank_code=bank_code,
            address=address,
            nationality=nationality,
            city=city,
            purpose=purpose,
            remitter_id=remitter_id,
            name=name,
            state=state,
            ifsc=ifsc,
            pan=pan,
            postal_code=postal_code,
            phone_number=phone_number,
            email=email,
            _configuration=_configuration,
            **kwargs,
        )

from cashfree_lrs_client.model.purpose import Purpose
