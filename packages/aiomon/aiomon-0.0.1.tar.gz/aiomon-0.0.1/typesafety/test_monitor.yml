- case: invalid_protocol_monitor_data
  main: |
    import sys
    from typing import AnyStr, Optional
    
    from aiomon.base import MonitorOutputData, MonitorStorageData
    from aiomon.impl.monitor import Monitor
    
    class InvalidKVMonitorStorage:
      def __init__(self) -> None:
        self.__data: MonitorStorageData = {}
  
      async def update(self, name: int, value: str) -> None:
        self.__data[str(name)] = value
    
    class StrFormatter:
      def format_(
        self,
        metrics: MonitorOutputData,
        fields_only: Optional[set[str]] = None,
      ) -> str:
        sys.stderr.write(f"fields_only: {fields_only}\n")
        return str(metrics)
    
    class KVStdErrMonitorOutput:
      async def write(self, formatted_metrics: AnyStr) -> None:
          if isinstance(formatted_metrics, bytes):
            sys.stderr.write(formatted_metrics.decode("utf-8"))
          else:
            sys.stderr.write(formatted_metrics)
          sys.stderr.flush()
    
    Monitor(
      name="test-monitor",
      output=KVStdErrMonitorOutput(),
      formatter=StrFormatter(),
      storage=InvalidKVMonitorStorage(),
    )
  out: |
    main:35: error: Argument "storage" to "Monitor" has incompatible type "InvalidKVMonitorStorage"; expected "MonitorStorage[Any] | ExportableMonitorStorage"  [arg-type]
    main:35: note: Following member(s) of "InvalidKVMonitorStorage" have conflicts:
    main:35: note:     Expected:
    main:35: note:         def update(self, name: str, value: Any) -> Coroutine[Any, Any, None]
    main:35: note:     Got:
    main:35: note:         def update(self, name: int, value: str) -> Coroutine[Any, Any, None]
    main:35: note: "InvalidKVMonitorStorage" is missing following "ExportableMonitorStorage" protocol member:
    main:35: note:     get_data
    main:35: note:     Expected:
    main:35: note:         def update(self, name: str, value: Any) -> Coroutine[Any, Any, None]
    main:35: note:     Got:
    main:35: note:         def update(self, name: int, value: str) -> Coroutine[Any, Any, None]
