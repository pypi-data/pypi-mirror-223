[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiomon"
dynamic = ["version"]
description = 'Simple asyncio-based monitor for healthchecks and metrics'
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["asyncio", "monitor", "monitoring", "healthcheck", "metrics"]
authors = [
  { name = "Lev Rubel", email = "rubel.lev@gmail.com" },
]
include = ["CHANGELOG.md"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "aiorwlock>=1.3.0,<2.0.0",
  "typing_extensions>=4.7.1,<5.0.0; python_version <= '3.7'"
]

[project.urls]
Documentation = "https://github.com/levchik/aiomon#readme"
Issues = "https://github.com/levchik/aiomon/issues"
Source = "https://github.com/levchik/aiomon"

[tool.hatch.version]
path = "src/aiomon/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=7,<8",
  "coverage-conditional-plugin>=0.9.0,<1.0.0",
  "pytest>=7.4.0,<8.0.0",
  "pytest-asyncio>=0.21.0,<1.0.0",
  "pytest-mypy-plugins>=2.0.0,<3.0.0",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests typesafety}"
test-cov = "coverage run -m pytest {args:tests typesafety}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov-report-xml = [
  "- coverage combine",
  "coverage xml",
]
cov = [
  "test-cov",
  "cov-report",
]
cov-xml = [
  "test-cov",
  "cov-report-xml",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/aiomon tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 79
skip-string-normalization = true

[tool.mypy]
check_untyped_defs = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
warn_no_return = false
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "tests.*"
]
disable_error_code = [
    "func-returns-value",
    "no-untyped-def"
]

[tool.ruff]
target-version = "py37"
line-length = 79
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["aiomon"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py"
]

[tool.coverage.run]
plugins = ["coverage_conditional_plugin"]
source_pkgs = ["aiomon", "tests"]
branch = true
parallel = true
omit = [
  "src/aiomon/__about__.py",
  "tests/*",
]

[tool.coverage.paths]
aiomon = ["src/aiomon", "*/aiomon/src/aiomon"]
tests = ["tests", "*/aiomon/tests"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    '''class .*\bProtocol.*\):''',
    '''@(abc\.)?abstractmethod'''
]
show_missing = true
fail_under = 85

[tool.coverage.coverage_conditional_plugin.rules]
py-gte-38 = "sys_version_info >= (3, 8)"
py-lt-38 = "sys_version_info < (3, 8)"
