# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 2.0.5
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from firefly_iii_client import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "email",
        }
        
        class properties:
            email = schemas.StrSchema
            blocked = schemas.BoolSchema
        
            @staticmethod
            def blocked_code() -> typing.Type['UserBlockedCodeProperty']:
                return UserBlockedCodeProperty
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def role() -> typing.Type['UserRoleProperty']:
                return UserRoleProperty
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "email": email,
                "blocked": blocked,
                "blocked_code": blocked_code,
                "created_at": created_at,
                "role": role,
                "updated_at": updated_at,
            }
    
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocked"]) -> MetaOapg.properties.blocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocked_code"]) -> 'UserBlockedCodeProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> 'UserRoleProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "blocked", "blocked_code", "created_at", "role", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocked"]) -> typing.Union[MetaOapg.properties.blocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocked_code"]) -> typing.Union['UserBlockedCodeProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union['UserRoleProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "blocked", "blocked_code", "created_at", "role", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        blocked: typing.Union[MetaOapg.properties.blocked, bool, schemas.Unset] = schemas.unset,
        blocked_code: typing.Union['UserBlockedCodeProperty', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        role: typing.Union['UserRoleProperty', schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *_args,
            email=email,
            blocked=blocked,
            blocked_code=blocked_code,
            created_at=created_at,
            role=role,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from firefly_iii_client.model.user_blocked_code_property import UserBlockedCodeProperty
from firefly_iii_client.model.user_role_property import UserRoleProperty
