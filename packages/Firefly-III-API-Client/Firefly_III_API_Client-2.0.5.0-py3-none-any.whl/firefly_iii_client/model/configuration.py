# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 2.0.5
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from firefly_iii_client import schemas  # noqa: F401


class Configuration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "editable",
            "title",
            "value",
        }
        
        class properties:
            editable = schemas.BoolSchema
        
            @staticmethod
            def title() -> typing.Type['ConfigValueFilter']:
                return ConfigValueFilter
        
            @staticmethod
            def value() -> typing.Type['PolymorphicProperty']:
                return PolymorphicProperty
            __annotations__ = {
                "editable": editable,
                "title": title,
                "value": value,
            }
    
    editable: MetaOapg.properties.editable
    title: 'ConfigValueFilter'
    value: 'PolymorphicProperty'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editable"]) -> MetaOapg.properties.editable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'ConfigValueFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> 'PolymorphicProperty': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["editable", "title", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editable"]) -> MetaOapg.properties.editable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> 'ConfigValueFilter': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> 'PolymorphicProperty': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["editable", "title", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        editable: typing.Union[MetaOapg.properties.editable, bool, ],
        title: 'ConfigValueFilter',
        value: 'PolymorphicProperty',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Configuration':
        return super().__new__(
            cls,
            *_args,
            editable=editable,
            title=title,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )

from firefly_iii_client.model.config_value_filter import ConfigValueFilter
from firefly_iii_client.model.polymorphic_property import PolymorphicProperty
