# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 2.0.5
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from firefly_iii_client import schemas  # noqa: F401


class AutocompleteAccount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "currency_name",
            "currency_symbol",
            "name",
            "id",
            "name_with_balance",
            "type",
            "currency_code",
            "currency_id",
            "currency_decimal_places",
        }
        
        class properties:
            currency_code = schemas.StrSchema
            currency_decimal_places = schemas.Int32Schema
            currency_id = schemas.StrSchema
            currency_name = schemas.StrSchema
            currency_symbol = schemas.StrSchema
            id = schemas.StrSchema
            name = schemas.StrSchema
            name_with_balance = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "currency_code": currency_code,
                "currency_decimal_places": currency_decimal_places,
                "currency_id": currency_id,
                "currency_name": currency_name,
                "currency_symbol": currency_symbol,
                "id": id,
                "name": name,
                "name_with_balance": name_with_balance,
                "type": type,
            }
    
    currency_name: MetaOapg.properties.currency_name
    currency_symbol: MetaOapg.properties.currency_symbol
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    name_with_balance: MetaOapg.properties.name_with_balance
    type: MetaOapg.properties.type
    currency_code: MetaOapg.properties.currency_code
    currency_id: MetaOapg.properties.currency_id
    currency_decimal_places: MetaOapg.properties.currency_decimal_places
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> MetaOapg.properties.currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_decimal_places"]) -> MetaOapg.properties.currency_decimal_places: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_id"]) -> MetaOapg.properties.currency_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_name"]) -> MetaOapg.properties.currency_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_with_balance"]) -> MetaOapg.properties.name_with_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency_code", "currency_decimal_places", "currency_id", "currency_name", "currency_symbol", "id", "name", "name_with_balance", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> MetaOapg.properties.currency_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_decimal_places"]) -> MetaOapg.properties.currency_decimal_places: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_id"]) -> MetaOapg.properties.currency_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_name"]) -> MetaOapg.properties.currency_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_with_balance"]) -> MetaOapg.properties.name_with_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency_code", "currency_decimal_places", "currency_id", "currency_name", "currency_symbol", "id", "name", "name_with_balance", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        currency_name: typing.Union[MetaOapg.properties.currency_name, str, ],
        currency_symbol: typing.Union[MetaOapg.properties.currency_symbol, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        name_with_balance: typing.Union[MetaOapg.properties.name_with_balance, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        currency_code: typing.Union[MetaOapg.properties.currency_code, str, ],
        currency_id: typing.Union[MetaOapg.properties.currency_id, str, ],
        currency_decimal_places: typing.Union[MetaOapg.properties.currency_decimal_places, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AutocompleteAccount':
        return super().__new__(
            cls,
            *_args,
            currency_name=currency_name,
            currency_symbol=currency_symbol,
            name=name,
            id=id,
            name_with_balance=name_with_balance,
            type=type,
            currency_code=currency_code,
            currency_id=currency_id,
            currency_decimal_places=currency_decimal_places,
            _configuration=_configuration,
            **kwargs,
        )
