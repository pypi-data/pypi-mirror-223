# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 2.0.5
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from firefly_iii_client import schemas  # noqa: F401


class RecurrenceStore(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "repeat_until",
            "title",
            "transactions",
            "type",
            "first_date",
            "repetitions",
        }
        
        class properties:
            first_date = schemas.DateSchema
            
            
            class repeat_until(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'repeat_until':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class repetitions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RecurrenceRepetitionStore']:
                        return RecurrenceRepetitionStore
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RecurrenceRepetitionStore'], typing.List['RecurrenceRepetitionStore']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'repetitions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RecurrenceRepetitionStore':
                    return super().__getitem__(i)
            title = schemas.StrSchema
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RecurrenceTransactionStore']:
                        return RecurrenceTransactionStore
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RecurrenceTransactionStore'], typing.List['RecurrenceTransactionStore']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RecurrenceTransactionStore':
                    return super().__getitem__(i)
        
            @staticmethod
            def type() -> typing.Type['RecurrenceTransactionType']:
                return RecurrenceTransactionType
            active = schemas.BoolSchema
            apply_rules = schemas.BoolSchema
            description = schemas.StrSchema
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class nr_of_repetitions(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nr_of_repetitions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "first_date": first_date,
                "repeat_until": repeat_until,
                "repetitions": repetitions,
                "title": title,
                "transactions": transactions,
                "type": type,
                "active": active,
                "apply_rules": apply_rules,
                "description": description,
                "notes": notes,
                "nr_of_repetitions": nr_of_repetitions,
            }
    
    repeat_until: MetaOapg.properties.repeat_until
    title: MetaOapg.properties.title
    transactions: MetaOapg.properties.transactions
    type: 'RecurrenceTransactionType'
    first_date: MetaOapg.properties.first_date
    repetitions: MetaOapg.properties.repetitions
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_date"]) -> MetaOapg.properties.first_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repeat_until"]) -> MetaOapg.properties.repeat_until: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repetitions"]) -> MetaOapg.properties.repetitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'RecurrenceTransactionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apply_rules"]) -> MetaOapg.properties.apply_rules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nr_of_repetitions"]) -> MetaOapg.properties.nr_of_repetitions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["first_date", "repeat_until", "repetitions", "title", "transactions", "type", "active", "apply_rules", "description", "notes", "nr_of_repetitions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_date"]) -> MetaOapg.properties.first_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repeat_until"]) -> MetaOapg.properties.repeat_until: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repetitions"]) -> MetaOapg.properties.repetitions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'RecurrenceTransactionType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apply_rules"]) -> typing.Union[MetaOapg.properties.apply_rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nr_of_repetitions"]) -> typing.Union[MetaOapg.properties.nr_of_repetitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first_date", "repeat_until", "repetitions", "title", "transactions", "type", "active", "apply_rules", "description", "notes", "nr_of_repetitions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        repeat_until: typing.Union[MetaOapg.properties.repeat_until, None, str, date, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, ],
        type: 'RecurrenceTransactionType',
        first_date: typing.Union[MetaOapg.properties.first_date, str, date, ],
        repetitions: typing.Union[MetaOapg.properties.repetitions, list, tuple, ],
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        apply_rules: typing.Union[MetaOapg.properties.apply_rules, bool, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        nr_of_repetitions: typing.Union[MetaOapg.properties.nr_of_repetitions, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecurrenceStore':
        return super().__new__(
            cls,
            *_args,
            repeat_until=repeat_until,
            title=title,
            transactions=transactions,
            type=type,
            first_date=first_date,
            repetitions=repetitions,
            active=active,
            apply_rules=apply_rules,
            description=description,
            notes=notes,
            nr_of_repetitions=nr_of_repetitions,
            _configuration=_configuration,
            **kwargs,
        )

from firefly_iii_client.model.recurrence_repetition_store import RecurrenceRepetitionStore
from firefly_iii_client.model.recurrence_transaction_store import RecurrenceTransactionStore
from firefly_iii_client.model.recurrence_transaction_type import RecurrenceTransactionType
