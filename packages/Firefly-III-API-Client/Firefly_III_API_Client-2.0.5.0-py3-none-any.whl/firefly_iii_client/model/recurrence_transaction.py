# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 2.0.5
    Contact: james@firefly-iii.org
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from firefly_iii_client import schemas  # noqa: F401


class RecurrenceTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "amount",
            "description",
        }
        
        class properties:
            amount = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class bill_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bill_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            budget_id = schemas.StrSchema
            
            
            class budget_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'budget_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            category_id = schemas.StrSchema
            category_name = schemas.StrSchema
            currency_code = schemas.StrSchema
            currency_decimal_places = schemas.Int32Schema
            currency_id = schemas.StrSchema
            currency_symbol = schemas.StrSchema
            
            
            class destination_iban(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'destination_iban':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            destination_id = schemas.StrSchema
            destination_name = schemas.StrSchema
        
            @staticmethod
            def destination_type() -> typing.Type['AccountTypeProperty']:
                return AccountTypeProperty
            
            
            class foreign_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'amount'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_currency_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_currency_decimal_places(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_decimal_places':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_currency_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class foreign_currency_symbol(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'foreign_currency_symbol':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            id = schemas.StrSchema
            
            
            class piggy_bank_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'piggy_bank_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class piggy_bank_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'piggy_bank_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class source_iban(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'string'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source_iban':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            source_id = schemas.StrSchema
            source_name = schemas.StrSchema
        
            @staticmethod
            def source_type() -> typing.Type['AccountTypeProperty']:
                return AccountTypeProperty
            
            
            class tags(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "amount": amount,
                "description": description,
                "bill_id": bill_id,
                "bill_name": bill_name,
                "budget_id": budget_id,
                "budget_name": budget_name,
                "category_id": category_id,
                "category_name": category_name,
                "currency_code": currency_code,
                "currency_decimal_places": currency_decimal_places,
                "currency_id": currency_id,
                "currency_symbol": currency_symbol,
                "destination_iban": destination_iban,
                "destination_id": destination_id,
                "destination_name": destination_name,
                "destination_type": destination_type,
                "foreign_amount": foreign_amount,
                "foreign_currency_code": foreign_currency_code,
                "foreign_currency_decimal_places": foreign_currency_decimal_places,
                "foreign_currency_id": foreign_currency_id,
                "foreign_currency_symbol": foreign_currency_symbol,
                "id": id,
                "piggy_bank_id": piggy_bank_id,
                "piggy_bank_name": piggy_bank_name,
                "source_iban": source_iban,
                "source_id": source_id,
                "source_name": source_name,
                "source_type": source_type,
                "tags": tags,
            }
    
    amount: MetaOapg.properties.amount
    description: MetaOapg.properties.description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_id"]) -> MetaOapg.properties.bill_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_name"]) -> MetaOapg.properties.bill_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget_id"]) -> MetaOapg.properties.budget_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget_name"]) -> MetaOapg.properties.budget_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> MetaOapg.properties.currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_decimal_places"]) -> MetaOapg.properties.currency_decimal_places: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_id"]) -> MetaOapg.properties.currency_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_symbol"]) -> MetaOapg.properties.currency_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_iban"]) -> MetaOapg.properties.destination_iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_id"]) -> MetaOapg.properties.destination_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_name"]) -> MetaOapg.properties.destination_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_type"]) -> 'AccountTypeProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_amount"]) -> MetaOapg.properties.foreign_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_code"]) -> MetaOapg.properties.foreign_currency_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_decimal_places"]) -> MetaOapg.properties.foreign_currency_decimal_places: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_id"]) -> MetaOapg.properties.foreign_currency_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreign_currency_symbol"]) -> MetaOapg.properties.foreign_currency_symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["piggy_bank_id"]) -> MetaOapg.properties.piggy_bank_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["piggy_bank_name"]) -> MetaOapg.properties.piggy_bank_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_iban"]) -> MetaOapg.properties.source_iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_id"]) -> MetaOapg.properties.source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_name"]) -> MetaOapg.properties.source_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_type"]) -> 'AccountTypeProperty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "description", "bill_id", "bill_name", "budget_id", "budget_name", "category_id", "category_name", "currency_code", "currency_decimal_places", "currency_id", "currency_symbol", "destination_iban", "destination_id", "destination_name", "destination_type", "foreign_amount", "foreign_currency_code", "foreign_currency_decimal_places", "foreign_currency_id", "foreign_currency_symbol", "id", "piggy_bank_id", "piggy_bank_name", "source_iban", "source_id", "source_name", "source_type", "tags", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_id"]) -> typing.Union[MetaOapg.properties.bill_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_name"]) -> typing.Union[MetaOapg.properties.bill_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget_id"]) -> typing.Union[MetaOapg.properties.budget_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget_name"]) -> typing.Union[MetaOapg.properties.budget_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> typing.Union[MetaOapg.properties.category_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_name"]) -> typing.Union[MetaOapg.properties.category_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> typing.Union[MetaOapg.properties.currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_decimal_places"]) -> typing.Union[MetaOapg.properties.currency_decimal_places, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_id"]) -> typing.Union[MetaOapg.properties.currency_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_symbol"]) -> typing.Union[MetaOapg.properties.currency_symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_iban"]) -> typing.Union[MetaOapg.properties.destination_iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_id"]) -> typing.Union[MetaOapg.properties.destination_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_name"]) -> typing.Union[MetaOapg.properties.destination_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_type"]) -> typing.Union['AccountTypeProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_amount"]) -> typing.Union[MetaOapg.properties.foreign_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_code"]) -> typing.Union[MetaOapg.properties.foreign_currency_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_decimal_places"]) -> typing.Union[MetaOapg.properties.foreign_currency_decimal_places, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_id"]) -> typing.Union[MetaOapg.properties.foreign_currency_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreign_currency_symbol"]) -> typing.Union[MetaOapg.properties.foreign_currency_symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["piggy_bank_id"]) -> typing.Union[MetaOapg.properties.piggy_bank_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["piggy_bank_name"]) -> typing.Union[MetaOapg.properties.piggy_bank_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_iban"]) -> typing.Union[MetaOapg.properties.source_iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_id"]) -> typing.Union[MetaOapg.properties.source_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_name"]) -> typing.Union[MetaOapg.properties.source_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_type"]) -> typing.Union['AccountTypeProperty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "description", "bill_id", "bill_name", "budget_id", "budget_name", "category_id", "category_name", "currency_code", "currency_decimal_places", "currency_id", "currency_symbol", "destination_iban", "destination_id", "destination_name", "destination_type", "foreign_amount", "foreign_currency_code", "foreign_currency_decimal_places", "foreign_currency_id", "foreign_currency_symbol", "id", "piggy_bank_id", "piggy_bank_name", "source_iban", "source_id", "source_name", "source_type", "tags", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        bill_id: typing.Union[MetaOapg.properties.bill_id, None, str, schemas.Unset] = schemas.unset,
        bill_name: typing.Union[MetaOapg.properties.bill_name, None, str, schemas.Unset] = schemas.unset,
        budget_id: typing.Union[MetaOapg.properties.budget_id, str, schemas.Unset] = schemas.unset,
        budget_name: typing.Union[MetaOapg.properties.budget_name, None, str, schemas.Unset] = schemas.unset,
        category_id: typing.Union[MetaOapg.properties.category_id, str, schemas.Unset] = schemas.unset,
        category_name: typing.Union[MetaOapg.properties.category_name, str, schemas.Unset] = schemas.unset,
        currency_code: typing.Union[MetaOapg.properties.currency_code, str, schemas.Unset] = schemas.unset,
        currency_decimal_places: typing.Union[MetaOapg.properties.currency_decimal_places, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currency_id: typing.Union[MetaOapg.properties.currency_id, str, schemas.Unset] = schemas.unset,
        currency_symbol: typing.Union[MetaOapg.properties.currency_symbol, str, schemas.Unset] = schemas.unset,
        destination_iban: typing.Union[MetaOapg.properties.destination_iban, None, str, schemas.Unset] = schemas.unset,
        destination_id: typing.Union[MetaOapg.properties.destination_id, str, schemas.Unset] = schemas.unset,
        destination_name: typing.Union[MetaOapg.properties.destination_name, str, schemas.Unset] = schemas.unset,
        destination_type: typing.Union['AccountTypeProperty', schemas.Unset] = schemas.unset,
        foreign_amount: typing.Union[MetaOapg.properties.foreign_amount, None, str, schemas.Unset] = schemas.unset,
        foreign_currency_code: typing.Union[MetaOapg.properties.foreign_currency_code, None, str, schemas.Unset] = schemas.unset,
        foreign_currency_decimal_places: typing.Union[MetaOapg.properties.foreign_currency_decimal_places, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        foreign_currency_id: typing.Union[MetaOapg.properties.foreign_currency_id, None, str, schemas.Unset] = schemas.unset,
        foreign_currency_symbol: typing.Union[MetaOapg.properties.foreign_currency_symbol, None, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        piggy_bank_id: typing.Union[MetaOapg.properties.piggy_bank_id, None, str, schemas.Unset] = schemas.unset,
        piggy_bank_name: typing.Union[MetaOapg.properties.piggy_bank_name, None, str, schemas.Unset] = schemas.unset,
        source_iban: typing.Union[MetaOapg.properties.source_iban, None, str, schemas.Unset] = schemas.unset,
        source_id: typing.Union[MetaOapg.properties.source_id, str, schemas.Unset] = schemas.unset,
        source_name: typing.Union[MetaOapg.properties.source_name, str, schemas.Unset] = schemas.unset,
        source_type: typing.Union['AccountTypeProperty', schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecurrenceTransaction':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            description=description,
            bill_id=bill_id,
            bill_name=bill_name,
            budget_id=budget_id,
            budget_name=budget_name,
            category_id=category_id,
            category_name=category_name,
            currency_code=currency_code,
            currency_decimal_places=currency_decimal_places,
            currency_id=currency_id,
            currency_symbol=currency_symbol,
            destination_iban=destination_iban,
            destination_id=destination_id,
            destination_name=destination_name,
            destination_type=destination_type,
            foreign_amount=foreign_amount,
            foreign_currency_code=foreign_currency_code,
            foreign_currency_decimal_places=foreign_currency_decimal_places,
            foreign_currency_id=foreign_currency_id,
            foreign_currency_symbol=foreign_currency_symbol,
            id=id,
            piggy_bank_id=piggy_bank_id,
            piggy_bank_name=piggy_bank_name,
            source_iban=source_iban,
            source_id=source_id,
            source_name=source_name,
            source_type=source_type,
            tags=tags,
            _configuration=_configuration,
            **kwargs,
        )

from firefly_iii_client.model.account_type_property import AccountTypeProperty
