/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/momentum-xyz/posbus-client/py/odyssey_posbus_client */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "pbc.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: umid.UMID ---
//
extern long long int umid_UMID_CTor();
extern GoInt umid_UMID_len(long long int handle);
extern char umid_UMID_elem(long long int handle, GoInt _idx);
extern void umid_UMID_set(long long int handle, GoInt _idx, char _vl);

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping struct: compat.DecodeResult ---
//
extern long long int compat_DecodeResult_CTor();
extern long unsigned int compat_DecodeResult_Type_Get(long long int handle);
extern void compat_DecodeResult_Type_Set(long long int handle, long unsigned int val);
extern long long int compat_DecodeResult_Data_Get(long long int handle);
extern void compat_DecodeResult_Data_Set(long long int handle, long long int val);
extern long long int compat_Decode(long long int b);
extern long long int compat_Encode(long long int msg);
extern long long int compat_NewHandshake(char* token, long long int userID, long long int sessionID);
extern long long int compat_NewHighFive(long long int myfrom, long long int to, char* msg);
extern long long int compat_NewLock(long long int uuid);
extern long long int compat_NewObjectTransform(long long int id, long long int position, long long int rotation, long long int scale);
extern long long int compat_NewTeleportRequest(long long int uuid);
extern long long int compat_NewUnlock(long long int uuid);

// --- wrapping slice: []posbus.MsgType ---
//
extern long long int Slice_posbus_MsgType_CTor();
extern GoInt Slice_posbus_MsgType_len(long long int handle);
extern long unsigned int Slice_posbus_MsgType_elem(long long int handle, GoInt _idx);
extern long long int Slice_posbus_MsgType_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_posbus_MsgType_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_posbus_MsgType_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []posbus.ObjectDefinition ---
//
extern long long int Slice_posbus_ObjectDefinition_CTor();
extern GoInt Slice_posbus_ObjectDefinition_len(long long int handle);
extern long long int Slice_posbus_ObjectDefinition_elem(long long int handle, GoInt _idx);
extern long long int Slice_posbus_ObjectDefinition_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_posbus_ObjectDefinition_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_posbus_ObjectDefinition_append(long long int handle, long long int _vl);

// --- wrapping slice: []posbus.UserData ---
//
extern long long int Slice_posbus_UserData_CTor();
extern GoInt Slice_posbus_UserData_len(long long int handle);
extern long long int Slice_posbus_UserData_elem(long long int handle, GoInt _idx);
extern long long int Slice_posbus_UserData_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_posbus_UserData_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_posbus_UserData_append(long long int handle, long long int _vl);

// --- wrapping slice: []posbus.UserTransform ---
//
extern long long int Slice_posbus_UserTransform_CTor();
extern GoInt Slice_posbus_UserTransform_len(long long int handle);
extern long long int Slice_posbus_UserTransform_elem(long long int handle, GoInt _idx);
extern long long int Slice_posbus_UserTransform_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_posbus_UserTransform_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_posbus_UserTransform_append(long long int handle, long long int _vl);

// --- wrapping slice: []posbus.VisualEffect ---
//
extern long long int Slice_posbus_VisualEffect_CTor();
extern GoInt Slice_posbus_VisualEffect_len(long long int handle);
extern long long int Slice_posbus_VisualEffect_elem(long long int handle, GoInt _idx);
extern long long int Slice_posbus_VisualEffect_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_posbus_VisualEffect_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_posbus_VisualEffect_append(long long int handle, long long int _vl);

// --- wrapping slice: []entry.SlotType ---
//
extern long long int Slice_entry_SlotType_CTor();
extern GoInt Slice_entry_SlotType_len(long long int handle);
extern char* Slice_entry_SlotType_elem(long long int handle, GoInt _idx);
extern long long int Slice_entry_SlotType_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_entry_SlotType_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_entry_SlotType_append(long long int handle, char* _vl);

// --- wrapping slice: []umid.UMID ---
//
extern long long int Slice_umid_UMID_CTor();
extern GoInt Slice_umid_UMID_len(long long int handle);
extern long long int Slice_umid_UMID_elem(long long int handle, GoInt _idx);
extern long long int Slice_umid_UMID_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_umid_UMID_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_umid_UMID_append(long long int handle, long long int _vl);

// --- wrapping slice: []reflect.Type ---
//
extern long long int Slice_reflect_Type_CTor();
extern GoInt Slice_reflect_Type_len(long long int handle);
extern long long int Slice_reflect_Type_elem(long long int handle, GoInt _idx);
extern long long int Slice_reflect_Type_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_reflect_Type_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_reflect_Type_append(long long int handle, long long int _vl);

// --- wrapping slice: posbus.PBEthAddress ---
//
extern long long int posbus_PBEthAddress_CTor();
extern GoInt posbus_PBEthAddress_len(long long int handle);
extern char posbus_PBEthAddress_elem(long long int handle, GoInt _idx);
extern void posbus_PBEthAddress_set(long long int handle, GoInt _idx, char _vl);

// --- wrapping slice: posbus.PBUint256 ---
//
extern long long int posbus_PBUint256_CTor();
extern GoInt posbus_PBUint256_len(long long int handle);
extern long long unsigned int posbus_PBUint256_elem(long long int handle, GoInt _idx);
extern void posbus_PBUint256_set(long long int handle, GoInt _idx, long long unsigned int _vl);

// --- wrapping map: map[entry.SlotType]*posbus.StringAnyMap ---
//
extern long long int Map_entry_SlotType_Ptr_posbus_StringAnyMap_CTor();
extern GoInt Map_entry_SlotType_Ptr_posbus_StringAnyMap_len(long long int handle);
extern long long int Map_entry_SlotType_Ptr_posbus_StringAnyMap_elem(long long int handle, char* _ky);
extern char Map_entry_SlotType_Ptr_posbus_StringAnyMap_contains(long long int handle, char* _ky);
extern void Map_entry_SlotType_Ptr_posbus_StringAnyMap_set(long long int handle, char* _ky, long long int _vl);
extern void Map_entry_SlotType_Ptr_posbus_StringAnyMap_delete(long long int handle, char* _ky);
extern long long int Map_entry_SlotType_Ptr_posbus_StringAnyMap_keys(long long int handle);
extern long unsigned int posbus_Message_GetType(long long int _handle);
extern long long int posbus_Message_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_Message_SizeMUS(long long int _handle);
extern long long int posbus_Message_UnmarshalMUS(long long int _handle, long long int buf);

// --- wrapping struct: posbus.UserTransform ---
//
extern long long int posbus_UserTransform_CTor();
extern long long int posbus_UserTransform_ID_Get(long long int handle);
extern long long int posbus_UserTransform_Transform_Get(long long int handle);
extern void posbus_UserTransform_Transform_Set(long long int handle, long long int val);
extern long long int posbus_UserTransform_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserTransform_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserTransform_SizeMUS(long long int _handle);
extern long unsigned int posbus_UserTransform_GetType(long long int _handle);

// --- wrapping struct: posbus.AddPendingStake ---
//
extern long long int posbus_AddPendingStake_CTor();
extern long long int posbus_AddPendingStake_TransactionID_Get(long long int handle);
extern long long int posbus_AddPendingStake_OdysseyId_Get(long long int handle);
extern long long int posbus_AddPendingStake_Wallet_Get(long long int handle);
extern long long int posbus_AddPendingStake_Amount_Get(long long int handle);
extern char* posbus_AddPendingStake_Comment_Get(long long int handle);
extern void posbus_AddPendingStake_Comment_Set(long long int handle, char* val);
extern long long int posbus_AddPendingStake_Kind_Get(long long int handle);
extern void posbus_AddPendingStake_Kind_Set(long long int handle, long long int val);
extern long long int posbus_AddPendingStake_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AddPendingStake_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AddPendingStake_SizeMUS(long long int _handle);
extern long unsigned int posbus_AddPendingStake_GetType(long long int _handle);

// --- wrapping struct: posbus.LockObjectResponse ---
//
extern long long int posbus_LockObjectResponse_CTor();
extern long long int posbus_LockObjectResponse_ID_Get(long long int handle);
extern long unsigned int posbus_LockObjectResponse_Result_Get(long long int handle);
extern void posbus_LockObjectResponse_Result_Set(long long int handle, long unsigned int val);
extern long long int posbus_LockObjectResponse_LockOwner_Get(long long int handle);
extern long long int posbus_LockObjectResponse_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_LockObjectResponse_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_LockObjectResponse_SizeMUS(long long int _handle);
extern long unsigned int posbus_LockObjectResponse_GetType(long long int _handle);

// --- wrapping struct: posbus.UserAction ---
//
extern long long int posbus_UserAction_CTor();
extern long unsigned int posbus_UserAction_Value_Get(long long int handle);
extern void posbus_UserAction_Value_Set(long long int handle, long unsigned int val);
extern long long int posbus_UserAction_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserAction_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserAction_SizeMUS(long long int _handle);
extern long unsigned int posbus_UserAction_GetType(long long int _handle);

// --- wrapping struct: posbus.UserData ---
//
extern long long int posbus_UserData_CTor();
extern long long int posbus_UserData_ID_Get(long long int handle);
extern char* posbus_UserData_Name_Get(long long int handle);
extern void posbus_UserData_Name_Set(long long int handle, char* val);
extern char* posbus_UserData_Avatar_Get(long long int handle);
extern void posbus_UserData_Avatar_Set(long long int handle, char* val);
extern long long int posbus_UserData_Transform_Get(long long int handle);
extern void posbus_UserData_Transform_Set(long long int handle, long long int val);
extern char posbus_UserData_IsGuest_Get(long long int handle);
extern void posbus_UserData_IsGuest_Set(long long int handle, char val);
extern long long int posbus_UserData_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserData_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserData_SizeMUS(long long int _handle);
extern long unsigned int posbus_UserData_GetType(long long int _handle);

// --- wrapping struct: posbus.TriggerVisualEffects ---
//
extern long long int posbus_TriggerVisualEffects_CTor();
extern long long int posbus_TriggerVisualEffects_Effects_Get(long long int handle);
extern void posbus_TriggerVisualEffects_Effects_Set(long long int handle, long long int val);
extern long long int posbus_TriggerVisualEffects_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_TriggerVisualEffects_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_TriggerVisualEffects_SizeMUS(long long int _handle);
extern long unsigned int posbus_TriggerVisualEffects_GetType(long long int _handle);

// --- wrapping struct: posbus.UserStakedToOdyssey ---
//
extern long long int posbus_UserStakedToOdyssey_CTor();
extern char* posbus_UserStakedToOdyssey_TransactionHash_Get(long long int handle);
extern void posbus_UserStakedToOdyssey_TransactionHash_Set(long long int handle, char* val);
extern char* posbus_UserStakedToOdyssey_Wallet_Get(long long int handle);
extern void posbus_UserStakedToOdyssey_Wallet_Set(long long int handle, char* val);
extern long long int posbus_UserStakedToOdyssey_ObjectID_Get(long long int handle);
extern char* posbus_UserStakedToOdyssey_Amount_Get(long long int handle);
extern void posbus_UserStakedToOdyssey_Amount_Set(long long int handle, char* val);
extern char* posbus_UserStakedToOdyssey_Comment_Get(long long int handle);
extern void posbus_UserStakedToOdyssey_Comment_Set(long long int handle, char* val);
extern long long int posbus_UserStakedToOdyssey_Kind_Get(long long int handle);
extern void posbus_UserStakedToOdyssey_Kind_Set(long long int handle, long long int val);
extern long long int posbus_UserStakedToOdyssey_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserStakedToOdyssey_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UserStakedToOdyssey_SizeMUS(long long int _handle);
extern long unsigned int posbus_UserStakedToOdyssey_GetType(long long int _handle);

// --- wrapping struct: posbus.ObjectDefinition ---
//
extern long long int posbus_ObjectDefinition_CTor();
extern long long int posbus_ObjectDefinition_ID_Get(long long int handle);
extern long long int posbus_ObjectDefinition_ParentID_Get(long long int handle);
extern long long int posbus_ObjectDefinition_AssetType_Get(long long int handle);
extern char posbus_ObjectDefinition_AssetFormat_Get(long long int handle);
extern void posbus_ObjectDefinition_AssetFormat_Set(long long int handle, char val);
extern char* posbus_ObjectDefinition_Name_Get(long long int handle);
extern void posbus_ObjectDefinition_Name_Set(long long int handle, char* val);
extern long long int posbus_ObjectDefinition_Transform_Get(long long int handle);
extern void posbus_ObjectDefinition_Transform_Set(long long int handle, long long int val);
extern char posbus_ObjectDefinition_IsEditable_Get(long long int handle);
extern void posbus_ObjectDefinition_IsEditable_Set(long long int handle, char val);
extern char posbus_ObjectDefinition_TetheredToParent_Get(long long int handle);
extern void posbus_ObjectDefinition_TetheredToParent_Set(long long int handle, char val);
extern char posbus_ObjectDefinition_ShowOnMiniMap_Get(long long int handle);
extern void posbus_ObjectDefinition_ShowOnMiniMap_Set(long long int handle, char val);
extern long long int posbus_ObjectDefinition_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ObjectDefinition_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ObjectDefinition_SizeMUS(long long int _handle);
extern long unsigned int posbus_ObjectDefinition_GetType(long long int _handle);

// --- wrapping struct: posbus.TeleportRequest ---
//
extern long long int posbus_TeleportRequest_CTor();
extern long long int posbus_TeleportRequest_Target_Get(long long int handle);
extern long long int posbus_TeleportRequest_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_TeleportRequest_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_TeleportRequest_SizeMUS(long long int _handle);
extern long unsigned int posbus_TeleportRequest_GetType(long long int _handle);

// --- wrapping struct: posbus.AttributeValueChanged ---
//
extern long long int posbus_AttributeValueChanged_CTor();
extern long long int posbus_AttributeValueChanged_PluginID_Get(long long int handle);
extern char* posbus_AttributeValueChanged_AttributeName_Get(long long int handle);
extern void posbus_AttributeValueChanged_AttributeName_Set(long long int handle, char* val);
extern char* posbus_AttributeValueChanged_ChangeType_Get(long long int handle);
extern void posbus_AttributeValueChanged_ChangeType_Set(long long int handle, char* val);
extern long long int posbus_AttributeValueChanged_Value_Get(long long int handle);
extern void posbus_AttributeValueChanged_Value_Set(long long int handle, long long int val);
extern long long int posbus_AttributeValueChanged_TargetID_Get(long long int handle);
extern long long int posbus_AttributeValueChanged_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AttributeValueChanged_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AttributeValueChanged_SizeMUS(long long int _handle);
extern long unsigned int posbus_AttributeValueChanged_GetType(long long int _handle);

// --- wrapping struct: posbus.FlyToMe ---
//
extern long long int posbus_FlyToMe_CTor();
extern long long int posbus_FlyToMe_Pilot_Get(long long int handle);
extern char* posbus_FlyToMe_PilotName_Get(long long int handle);
extern void posbus_FlyToMe_PilotName_Set(long long int handle, char* val);
extern long long int posbus_FlyToMe_ObjectID_Get(long long int handle);
extern long long int posbus_FlyToMe_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_FlyToMe_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_FlyToMe_SizeMUS(long long int _handle);
extern long unsigned int posbus_FlyToMe_GetType(long long int _handle);

// --- wrapping struct: posbus.HandShake ---
//
extern long long int posbus_HandShake_CTor();
extern long long int posbus_HandShake_HandshakeVersion_Get(long long int handle);
extern void posbus_HandShake_HandshakeVersion_Set(long long int handle, long long int val);
extern long long int posbus_HandShake_ProtocolVersion_Get(long long int handle);
extern void posbus_HandShake_ProtocolVersion_Set(long long int handle, long long int val);
extern char* posbus_HandShake_Token_Get(long long int handle);
extern void posbus_HandShake_Token_Set(long long int handle, char* val);
extern long long int posbus_HandShake_UserId_Get(long long int handle);
extern long long int posbus_HandShake_SessionId_Get(long long int handle);
extern long long int posbus_HandShake_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_HandShake_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_HandShake_SizeMUS(long long int _handle);
extern long unsigned int posbus_HandShake_GetType(long long int _handle);

// --- wrapping struct: posbus.LockObject ---
//
extern long long int posbus_LockObject_CTor();
extern long long int posbus_LockObject_ID_Get(long long int handle);
extern long long int posbus_LockObject_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_LockObject_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_LockObject_SizeMUS(long long int _handle);
extern long unsigned int posbus_LockObject_GetType(long long int _handle);

// --- wrapping struct: posbus.AddUsers ---
//
extern long long int posbus_AddUsers_CTor();
extern long long int posbus_AddUsers_Users_Get(long long int handle);
extern void posbus_AddUsers_Users_Set(long long int handle, long long int val);
extern long long int posbus_AddUsers_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AddUsers_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AddUsers_SizeMUS(long long int _handle);
extern long unsigned int posbus_AddUsers_GetType(long long int _handle);

// --- wrapping struct: posbus.ObjectTransform ---
//
extern long long int posbus_ObjectTransform_CTor();
extern long long int posbus_ObjectTransform_ID_Get(long long int handle);
extern long long int posbus_ObjectTransform_Transform_Get(long long int handle);
extern void posbus_ObjectTransform_Transform_Set(long long int handle, long long int val);
extern long long int posbus_ObjectTransform_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ObjectTransform_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ObjectTransform_SizeMUS(long long int _handle);
extern long unsigned int posbus_ObjectTransform_GetType(long long int _handle);

// --- wrapping struct: posbus.Notification ---
//
extern long long int posbus_Notification_CTor();
extern long unsigned int posbus_Notification_NotifyType_Get(long long int handle);
extern void posbus_Notification_NotifyType_Set(long long int handle, long unsigned int val);
extern char* posbus_Notification_Value_Get(long long int handle);
extern void posbus_Notification_Value_Set(long long int handle, char* val);
extern long long int posbus_Notification_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_Notification_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_Notification_SizeMUS(long long int _handle);
extern long unsigned int posbus_Notification_GetType(long long int _handle);

// --- wrapping struct: posbus.Signal ---
//
extern long long int posbus_Signal_CTor();
extern long unsigned int posbus_Signal_Value_Get(long long int handle);
extern void posbus_Signal_Value_Set(long long int handle, long unsigned int val);
extern long long int posbus_Signal_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_Signal_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_Signal_SizeMUS(long long int _handle);
extern long unsigned int posbus_Signal_GetType(long long int _handle);

// --- wrapping struct: posbus.UnlockObject ---
//
extern long long int posbus_UnlockObject_CTor();
extern long long int posbus_UnlockObject_ID_Get(long long int handle);
extern long long int posbus_UnlockObject_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UnlockObject_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UnlockObject_SizeMUS(long long int _handle);
extern long unsigned int posbus_UnlockObject_GetType(long long int _handle);

// --- wrapping struct: posbus.VisualEffect ---
//
extern long long int posbus_VisualEffect_CTor();
extern char* posbus_VisualEffect_Name_Get(long long int handle);
extern void posbus_VisualEffect_Name_Set(long long int handle, char* val);
extern long long int posbus_VisualEffect_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_VisualEffect_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_VisualEffect_SizeMUS(long long int _handle);

// --- wrapping struct: posbus.AddObjects ---
//
extern long long int posbus_AddObjects_CTor();
extern long long int posbus_AddObjects_Objects_Get(long long int handle);
extern void posbus_AddObjects_Objects_Set(long long int handle, long long int val);
extern long long int posbus_AddObjects_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AddObjects_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_AddObjects_SizeMUS(long long int _handle);
extern long unsigned int posbus_AddObjects_GetType(long long int _handle);

// --- wrapping struct: posbus.HighFive ---
//
extern long long int posbus_HighFive_CTor();
extern long long int posbus_HighFive_SenderID_Get(long long int handle);
extern long long int posbus_HighFive_ReceiverID_Get(long long int handle);
extern char* posbus_HighFive_Message_Get(long long int handle);
extern void posbus_HighFive_Message_Set(long long int handle, char* val);
extern long long int posbus_HighFive_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_HighFive_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_HighFive_SizeMUS(long long int _handle);
extern long unsigned int posbus_HighFive_GetType(long long int _handle);

// --- wrapping struct: posbus.RemoveUsers ---
//
extern long long int posbus_RemoveUsers_CTor();
extern long long int posbus_RemoveUsers_Users_Get(long long int handle);
extern void posbus_RemoveUsers_Users_Set(long long int handle, long long int val);
extern long long int posbus_RemoveUsers_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_RemoveUsers_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_RemoveUsers_SizeMUS(long long int _handle);
extern long unsigned int posbus_RemoveUsers_GetType(long long int _handle);

// --- wrapping struct: posbus.SetWorld ---
//
extern long long int posbus_SetWorld_CTor();
extern long long int posbus_SetWorld_ID_Get(long long int handle);
extern char* posbus_SetWorld_Name_Get(long long int handle);
extern void posbus_SetWorld_Name_Set(long long int handle, char* val);
extern long long int posbus_SetWorld_Avatar_Get(long long int handle);
extern long long int posbus_SetWorld_Owner_Get(long long int handle);
extern long long int posbus_SetWorld_Avatar3DAssetID_Get(long long int handle);
extern long long int posbus_SetWorld_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_SetWorld_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_SetWorld_SizeMUS(long long int _handle);
extern long unsigned int posbus_SetWorld_GetType(long long int _handle);

// --- wrapping struct: posbus.RemoveObjects ---
//
extern long long int posbus_RemoveObjects_CTor();
extern long long int posbus_RemoveObjects_Objects_Get(long long int handle);
extern void posbus_RemoveObjects_Objects_Set(long long int handle, long long int val);
extern long long int posbus_RemoveObjects_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_RemoveObjects_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_RemoveObjects_SizeMUS(long long int _handle);
extern long unsigned int posbus_RemoveObjects_GetType(long long int _handle);

// --- wrapping struct: posbus.UsersTransformList ---
//
extern long long int posbus_UsersTransformList_CTor();
extern long long int posbus_UsersTransformList_Value_Get(long long int handle);
extern void posbus_UsersTransformList_Value_Set(long long int handle, long long int val);
extern long long int posbus_UsersTransformList_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UsersTransformList_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_UsersTransformList_SizeMUS(long long int _handle);
extern long unsigned int posbus_UsersTransformList_GetType(long long int _handle);

// --- wrapping struct: posbus.ActivityUpdate ---
//
extern long long int posbus_ActivityUpdate_CTor();
extern long long int posbus_ActivityUpdate_ActivityId_Get(long long int handle);
extern char* posbus_ActivityUpdate_ChangeType_Get(long long int handle);
extern void posbus_ActivityUpdate_ChangeType_Set(long long int handle, char* val);
extern long long int posbus_ActivityUpdate_Data_Get(long long int handle);
extern void posbus_ActivityUpdate_Data_Set(long long int handle, long long int val);
extern long long int posbus_ActivityUpdate_UserId_Get(long long int handle);
extern long long int posbus_ActivityUpdate_ObjectId_Get(long long int handle);
extern long long int posbus_ActivityUpdate_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ActivityUpdate_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ActivityUpdate_SizeMUS(long long int _handle);
extern long unsigned int posbus_ActivityUpdate_GetType(long long int _handle);

// --- wrapping struct: posbus.GenericMessage ---
//
extern long long int posbus_GenericMessage_CTor();
extern char* posbus_GenericMessage_Topic_Get(long long int handle);
extern void posbus_GenericMessage_Topic_Set(long long int handle, char* val);
extern long long int posbus_GenericMessage_Data_Get(long long int handle);
extern void posbus_GenericMessage_Data_Set(long long int handle, long long int val);
extern long long int posbus_GenericMessage_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_GenericMessage_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_GenericMessage_SizeMUS(long long int _handle);
extern long unsigned int posbus_GenericMessage_GetType(long long int _handle);

// --- wrapping struct: posbus.MyTransform ---
//
extern long long int posbus_MyTransform_CTor();
extern long long int posbus_MyTransform_Position_Get(long long int handle);
extern void posbus_MyTransform_Position_Set(long long int handle, long long int val);
extern long long int posbus_MyTransform_Rotation_Get(long long int handle);
extern void posbus_MyTransform_Rotation_Set(long long int handle, long long int val);
extern long long int posbus_MyTransform_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_MyTransform_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_MyTransform_SizeMUS(long long int _handle);
extern long unsigned int posbus_MyTransform_GetType(long long int _handle);

// --- wrapping struct: posbus.ObjectData ---
//
extern long long int posbus_ObjectData_CTor();
extern long long int posbus_ObjectData_ID_Get(long long int handle);
extern long long int posbus_ObjectData_Entries_Get(long long int handle);
extern void posbus_ObjectData_Entries_Set(long long int handle, long long int val);
extern long long int posbus_ObjectData_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ObjectData_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_ObjectData_SizeMUS(long long int _handle);
extern long unsigned int posbus_ObjectData_GetType(long long int _handle);

// --- wrapping map: posbus.EventStart ---
//
extern long long int posbus_EventStart_CTor();
extern GoInt posbus_EventStart_len(long long int handle);
extern char* posbus_EventStart_elem(long long int handle, char* _ky);
extern char posbus_EventStart_contains(long long int handle, char* _ky);
extern void posbus_EventStart_set(long long int handle, char* _ky, char* _vl);
extern void posbus_EventStart_delete(long long int handle, char* _ky);
extern long long int posbus_EventStart_keys(long long int handle);
extern long long int posbus_EventStart_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_EventStart_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_EventStart_SizeMUS(long long int _handle);
extern long unsigned int posbus_EventStart_GetType(long long int _handle);

// --- wrapping map: posbus.StringAnyMap ---
//
extern long long int posbus_StringAnyMap_CTor();
extern GoInt posbus_StringAnyMap_len(long long int handle);
extern long long int posbus_StringAnyMap_elem(long long int handle, char* _ky);
extern char posbus_StringAnyMap_contains(long long int handle, char* _ky);
extern void posbus_StringAnyMap_set(long long int handle, char* _ky, long long int _vl);
extern void posbus_StringAnyMap_delete(long long int handle, char* _ky);
extern long long int posbus_StringAnyMap_keys(long long int handle);
extern long long int posbus_StringAnyMap_MarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_StringAnyMap_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int posbus_StringAnyMap_SizeMUS(long long int _handle);
extern long long int posbus_NewGenericMessage(char* topic, char* data);
extern long long int posbus_BinMessage(long long int m);
extern char* posbus_DecodeTo(long long int buf, long long int m);
extern long long int posbus_MessageDataTypeById(long unsigned int id);
extern long unsigned int posbus_MessageIdByName(char* name);
extern char* posbus_MessageNameById(long unsigned int id);
extern long long int posbus_NewMessageOfType(long unsigned int msgType);
extern long long int posbus_WSMessage(long long int m);
extern long long int posbus_Decode(long long int buf);
extern long unsigned int posbus_MsgTypeId(long long int m);
extern char* posbus_MsgTypeName(long long int m);
extern long long int posbus_ExtraTypes();
extern long long int posbus_GetMessageIds();
extern long unsigned int posbus_MessageType(long long int buf);
extern char* posbus_MessageTypeNameById(long unsigned int id);

// --- wrapping struct: cmath.Transform ---
//
extern long long int cmath_Transform_CTor();
extern long long int cmath_Transform_Position_Get(long long int handle);
extern void cmath_Transform_Position_Set(long long int handle, long long int val);
extern long long int cmath_Transform_Rotation_Get(long long int handle);
extern void cmath_Transform_Rotation_Set(long long int handle, long long int val);
extern long long int cmath_Transform_Scale_Get(long long int handle);
extern void cmath_Transform_Scale_Set(long long int handle, long long int val);
extern long long int cmath_Transform_MarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_Transform_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_Transform_SizeMUS(long long int _handle);

// --- wrapping struct: cmath.TransformNoScale ---
//
extern long long int cmath_TransformNoScale_CTor();
extern long long int cmath_TransformNoScale_Position_Get(long long int handle);
extern void cmath_TransformNoScale_Position_Set(long long int handle, long long int val);
extern long long int cmath_TransformNoScale_Rotation_Get(long long int handle);
extern void cmath_TransformNoScale_Rotation_Set(long long int handle, long long int val);
extern long long int cmath_TransformNoScale_MarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_TransformNoScale_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_TransformNoScale_SizeMUS(long long int _handle);
extern char* cmath_TransformNoScale_CopyToBuffer(long long int _handle, long long int b);
extern long long int cmath_TransformNoScale_Copy(long long int _handle);

// --- wrapping struct: cmath.Vec3 ---
//
extern long long int cmath_Vec3_CTor();
extern float cmath_Vec3_X_Get(long long int handle);
extern void cmath_Vec3_X_Set(long long int handle, float val);
extern float cmath_Vec3_Y_Get(long long int handle);
extern void cmath_Vec3_Y_Set(long long int handle, float val);
extern float cmath_Vec3_Z_Get(long long int handle);
extern void cmath_Vec3_Z_Set(long long int handle, float val);
extern long long int cmath_Vec3_MarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_Vec3_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_Vec3_SizeMUS(long long int _handle);
extern void cmath_Vec3_Plus(long long int _handle, long long int v2, char goRun);
extern long long int cmath_Vec3_ToVec3f64(long long int _handle);

// --- wrapping struct: cmath.Vec3f64 ---
//
extern long long int cmath_Vec3f64_CTor();
extern double cmath_Vec3f64_X_Get(long long int handle);
extern void cmath_Vec3f64_X_Set(long long int handle, double val);
extern double cmath_Vec3f64_Y_Get(long long int handle);
extern void cmath_Vec3f64_Y_Set(long long int handle, double val);
extern double cmath_Vec3f64_Z_Get(long long int handle);
extern void cmath_Vec3f64_Z_Set(long long int handle, double val);
extern long long int cmath_Vec3f64_MarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_Vec3f64_UnmarshalMUS(long long int _handle, long long int buf);
extern long long int cmath_Vec3f64_SizeMUS(long long int _handle);
extern long long int cmath_Vec3f64_ToVec3(long long int _handle);
extern long long int cmath_MNan32Vec3();
extern long long int cmath_MultiplyN(long long int v, float n);
extern long long int cmath_Add(long long int v1, long long int v2);
extern long long int cmath_DefaultPosition();
extern double cmath_Distance(long long int x, long long int y);
extern float cmath_MNaN32();

#ifdef __cplusplus
}
#endif
