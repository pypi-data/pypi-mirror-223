"""
Package compat provide function to workaround autogenerated binding libraries.

  - umid.UMID type, which is aliased uuid.UUD, which in turn is alias for [16]byte.
    Replace with direct/primative byte slice as input.

  - bytes encode/decode functions, workaround for serveral issues:
    posbus.Message is interface, after which reflection needs to be used to determine actual message type.
    And there is a nested map to any/interface{}, which needs to be handled.
    If external application wants to use their own eventloop (and websocket), instead of the callback mechanism.

"""
# python wrapper for package github.com/momentum-xyz/posbus-client/pbc/compat within overall package pbc
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -name=pbc -rename -dynamic-link=true -output=odyssey_posbus_client github.com/momentum-xyz/posbus-client/pbc/compat github.com/momentum-xyz/ubercontroller/pkg/posbus github.com/momentum-xyz/ubercontroller/pkg/cmath

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _pbc
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from pbc import compat
# and then refer to everything using compat. prefix
# packages imported by this package listed below:

from . import cmath
from . import posbus



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct compat.DecodeResult
class DecodeResult(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pbc.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pbc.IncRef(self.handle)
		else:
			self.handle = _pbc.compat_DecodeResult_CTor()
			_pbc.IncRef(self.handle)
			if  0 < len(args):
				self.Type = args[0]
			if "Type" in kwargs:
				self.Type = kwargs["Type"]
			if  1 < len(args):
				self.Data = args[1]
			if "Data" in kwargs:
				self.Data = kwargs["Data"]
	def __del__(self):
		_pbc.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'compat.DecodeResult{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'compat.DecodeResult ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def type(self):
		return _pbc.compat_DecodeResult_Type_Get(self.handle)
	@type.setter
	def type(self, value):
		if isinstance(value, go.GoClass):
			_pbc.compat_DecodeResult_Type_Set(self.handle, value.handle)
		else:
			_pbc.compat_DecodeResult_Type_Set(self.handle, value)
	@property
	def data(self):
		return go.Slice_byte(handle=_pbc.compat_DecodeResult_Data_Get(self.handle))
	@data.setter
	def data(self, value):
		if isinstance(value, go.GoClass):
			_pbc.compat_DecodeResult_Data_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def decode(b):
	"""Decode([]int b) object, str"""
	return DecodeResult(handle=_pbc.compat_Decode(b.handle))


# ---- Functions ---
def encode(msg):
	"""Encode(object msg) []int, str"""
	return go.Slice_byte(handle=_pbc.compat_Encode(msg.handle))
def new_handshake(token, userID, sessionID):
	"""NewHandshake(str token, []int userID, []int sessionID) object"""
	return posbus.HandShake(handle=_pbc.compat_NewHandshake(token, userID.handle, sessionID.handle))
def new_high_five(myfrom, to, msg):
	"""NewHighFive([]int from, []int to, str msg) object"""
	return posbus.HighFive(handle=_pbc.compat_NewHighFive(myfrom.handle, to.handle, msg))
def new_lock(uuid):
	"""NewLock([]int uuid) object"""
	return posbus.LockObject(handle=_pbc.compat_NewLock(uuid.handle))
def new_object_transform(id, position, rotation, scale):
	"""NewObjectTransform([]int id, object position, object rotation, object scale) object"""
	return posbus.ObjectTransform(handle=_pbc.compat_NewObjectTransform(id.handle, position.handle, rotation.handle, scale.handle))
def new_teleport_request(uuid):
	"""NewTeleportRequest([]int uuid) object"""
	return posbus.TeleportRequest(handle=_pbc.compat_NewTeleportRequest(uuid.handle))
def new_unlock(uuid):
	"""NewUnlock([]int uuid) object"""
	return posbus.UnlockObject(handle=_pbc.compat_NewUnlock(uuid.handle))


