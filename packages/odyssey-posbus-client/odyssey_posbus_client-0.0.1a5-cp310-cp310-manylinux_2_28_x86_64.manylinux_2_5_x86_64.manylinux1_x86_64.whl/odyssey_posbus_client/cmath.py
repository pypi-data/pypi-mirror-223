
# python wrapper for package github.com/momentum-xyz/ubercontroller/pkg/cmath within overall package pbc
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -name=pbc -rename -dynamic-link=true -output=odyssey_posbus_client github.com/momentum-xyz/posbus-client/pbc/compat github.com/momentum-xyz/ubercontroller/pkg/posbus github.com/momentum-xyz/ubercontroller/pkg/cmath

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _pbc
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from pbc import cmath
# and then refer to everything using cmath. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
Float32Bytes = 4


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct cmath.Transform
class Transform(go.GoClass):
	"""Transform represent a transformation for an object in 3D space.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pbc.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pbc.IncRef(self.handle)
		else:
			self.handle = _pbc.cmath_Transform_CTor()
			_pbc.IncRef(self.handle)
			if  0 < len(args):
				self.Position = args[0]
			if "Position" in kwargs:
				self.Position = kwargs["Position"]
			if  1 < len(args):
				self.Rotation = args[1]
			if "Rotation" in kwargs:
				self.Rotation = kwargs["Rotation"]
			if  2 < len(args):
				self.Scale = args[2]
			if "Scale" in kwargs:
				self.Scale = kwargs["Scale"]
	def __del__(self):
		_pbc.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.Transform{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.Transform ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def position(self):
		return Vec3(handle=_pbc.cmath_Transform_Position_Get(self.handle))
	@position.setter
	def position(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Transform_Position_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def rotation(self):
		return Vec3(handle=_pbc.cmath_Transform_Rotation_Get(self.handle))
	@rotation.setter
	def rotation(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Transform_Rotation_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def scale(self):
		return Vec3(handle=_pbc.cmath_Transform_Scale_Get(self.handle))
	@scale.setter
	def scale(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Transform_Scale_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def marshal_mus(self, buf):
		"""MarshalMUS([]int buf) int
		
		MarshalMUS fills buf with the MUS encoding of v.
		"""
		return _pbc.cmath_Transform_MarshalMUS(self.handle, buf.handle)
	def unmarshal_mus(self, buf):
		"""UnmarshalMUS([]int buf) int, str
		
		UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
		"""
		return _pbc.cmath_Transform_UnmarshalMUS(self.handle, buf.handle)
	def size_mus(self):
		"""SizeMUS() int
		
		SizeMUS returns the size of the MUS-encoded v.
		"""
		return _pbc.cmath_Transform_SizeMUS(self.handle)

# Python type for struct cmath.TransformNoScale
class TransformNoScale(go.GoClass):
	"""TransformNoScale represents a transformation for an object in 3D space that has no scale.\nFor example, users don't have a scale in the current system.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pbc.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pbc.IncRef(self.handle)
		else:
			self.handle = _pbc.cmath_TransformNoScale_CTor()
			_pbc.IncRef(self.handle)
			if  0 < len(args):
				self.Position = args[0]
			if "Position" in kwargs:
				self.Position = kwargs["Position"]
			if  1 < len(args):
				self.Rotation = args[1]
			if "Rotation" in kwargs:
				self.Rotation = kwargs["Rotation"]
	def __del__(self):
		_pbc.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.TransformNoScale{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.TransformNoScale ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def position(self):
		return Vec3(handle=_pbc.cmath_TransformNoScale_Position_Get(self.handle))
	@position.setter
	def position(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_TransformNoScale_Position_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def rotation(self):
		return Vec3(handle=_pbc.cmath_TransformNoScale_Rotation_Get(self.handle))
	@rotation.setter
	def rotation(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_TransformNoScale_Rotation_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def marshal_mus(self, buf):
		"""MarshalMUS([]int buf) int
		
		MarshalMUS fills buf with the MUS encoding of v.
		"""
		return _pbc.cmath_TransformNoScale_MarshalMUS(self.handle, buf.handle)
	def unmarshal_mus(self, buf):
		"""UnmarshalMUS([]int buf) int, str
		
		UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
		"""
		return _pbc.cmath_TransformNoScale_UnmarshalMUS(self.handle, buf.handle)
	def size_mus(self):
		"""SizeMUS() int
		
		SizeMUS returns the size of the MUS-encoded v.
		"""
		return _pbc.cmath_TransformNoScale_SizeMUS(self.handle)
	def copy_to_buffer(self, b):
		"""CopyToBuffer([]int b) str"""
		return _pbc.cmath_TransformNoScale_CopyToBuffer(self.handle, b.handle)
	def copy(self):
		"""Copy() object"""
		return TransformNoScale(handle=_pbc.cmath_TransformNoScale_Copy(self.handle))

# Python type for struct cmath.Vec3
class Vec3(go.GoClass):
	"""Vec3 is a three dimensional vector.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pbc.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pbc.IncRef(self.handle)
		else:
			self.handle = _pbc.cmath_Vec3_CTor()
			_pbc.IncRef(self.handle)
			if  0 < len(args):
				self.X = args[0]
			if "X" in kwargs:
				self.X = kwargs["X"]
			if  1 < len(args):
				self.Y = args[1]
			if "Y" in kwargs:
				self.Y = kwargs["Y"]
			if  2 < len(args):
				self.Z = args[2]
			if "Z" in kwargs:
				self.Z = kwargs["Z"]
	def __del__(self):
		_pbc.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.Vec3{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.Vec3 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def x(self):
		return _pbc.cmath_Vec3_X_Get(self.handle)
	@x.setter
	def x(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Vec3_X_Set(self.handle, value.handle)
		else:
			_pbc.cmath_Vec3_X_Set(self.handle, value)
	@property
	def y(self):
		return _pbc.cmath_Vec3_Y_Get(self.handle)
	@y.setter
	def y(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Vec3_Y_Set(self.handle, value.handle)
		else:
			_pbc.cmath_Vec3_Y_Set(self.handle, value)
	@property
	def z(self):
		return _pbc.cmath_Vec3_Z_Get(self.handle)
	@z.setter
	def z(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Vec3_Z_Set(self.handle, value.handle)
		else:
			_pbc.cmath_Vec3_Z_Set(self.handle, value)
	def marshal_mus(self, buf):
		"""MarshalMUS([]int buf) int
		
		MarshalMUS fills buf with the MUS encoding of v.
		"""
		return _pbc.cmath_Vec3_MarshalMUS(self.handle, buf.handle)
	def unmarshal_mus(self, buf):
		"""UnmarshalMUS([]int buf) int, str
		
		UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
		"""
		return _pbc.cmath_Vec3_UnmarshalMUS(self.handle, buf.handle)
	def size_mus(self):
		"""SizeMUS() int
		
		SizeMUS returns the size of the MUS-encoded v.
		"""
		return _pbc.cmath_Vec3_SizeMUS(self.handle)
	def plus(self, v2, goRun=False):
		"""Plus(object v2) """
		_pbc.cmath_Vec3_Plus(self.handle, v2.handle, goRun)
	def to_vec3f64(self):
		"""ToVec3f64() object"""
		return Vec3f64(handle=_pbc.cmath_Vec3_ToVec3f64(self.handle))

# Python type for struct cmath.Vec3f64
class Vec3f64(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pbc.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pbc.IncRef(self.handle)
		else:
			self.handle = _pbc.cmath_Vec3f64_CTor()
			_pbc.IncRef(self.handle)
			if  0 < len(args):
				self.X = args[0]
			if "X" in kwargs:
				self.X = kwargs["X"]
			if  1 < len(args):
				self.Y = args[1]
			if "Y" in kwargs:
				self.Y = kwargs["Y"]
			if  2 < len(args):
				self.Z = args[2]
			if "Z" in kwargs:
				self.Z = kwargs["Z"]
	def __del__(self):
		_pbc.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.Vec3f64{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'cmath.Vec3f64 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def x(self):
		return _pbc.cmath_Vec3f64_X_Get(self.handle)
	@x.setter
	def x(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Vec3f64_X_Set(self.handle, value.handle)
		else:
			_pbc.cmath_Vec3f64_X_Set(self.handle, value)
	@property
	def y(self):
		return _pbc.cmath_Vec3f64_Y_Get(self.handle)
	@y.setter
	def y(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Vec3f64_Y_Set(self.handle, value.handle)
		else:
			_pbc.cmath_Vec3f64_Y_Set(self.handle, value)
	@property
	def z(self):
		return _pbc.cmath_Vec3f64_Z_Get(self.handle)
	@z.setter
	def z(self, value):
		if isinstance(value, go.GoClass):
			_pbc.cmath_Vec3f64_Z_Set(self.handle, value.handle)
		else:
			_pbc.cmath_Vec3f64_Z_Set(self.handle, value)
	def marshal_mus(self, buf):
		"""MarshalMUS([]int buf) int
		
		MarshalMUS fills buf with the MUS encoding of v.
		"""
		return _pbc.cmath_Vec3f64_MarshalMUS(self.handle, buf.handle)
	def unmarshal_mus(self, buf):
		"""UnmarshalMUS([]int buf) int, str
		
		UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
		"""
		return _pbc.cmath_Vec3f64_UnmarshalMUS(self.handle, buf.handle)
	def size_mus(self):
		"""SizeMUS() int
		
		SizeMUS returns the size of the MUS-encoded v.
		"""
		return _pbc.cmath_Vec3f64_SizeMUS(self.handle)
	def to_vec3(self):
		"""ToVec3() object"""
		return Vec3(handle=_pbc.cmath_Vec3f64_ToVec3(self.handle))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def add(v1, v2):
	"""Add(object v1, object v2) object"""
	return Vec3(handle=_pbc.cmath_Add(v1.handle, v2.handle))
def default_position():
	"""DefaultPosition() object
	
	DefaultPosition FIXME: Magic numbers ?
	"""
	return Vec3(handle=_pbc.cmath_DefaultPosition())
def m_nan32_vec3():
	"""MNan32Vec3() object"""
	return Vec3(handle=_pbc.cmath_MNan32Vec3())
def multiply_n(v, n):
	"""MultiplyN(object v, float n) object"""
	return Vec3(handle=_pbc.cmath_MultiplyN(v.handle, n))


# ---- Functions ---
def m_na_n32():
	"""MNaN32() float"""
	return _pbc.cmath_MNaN32()
def distance(x, y):
	"""Distance(object x, object y) float"""
	return _pbc.cmath_Distance(x.handle, y.handle)


