# coding: utf-8

"""
    ETAPI

    External Trilium API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: zadam.apps@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    constr,
    validator,
)


class Attribute(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    attribute_id: Optional[constr(strict=True)] = Field(
        None, alias="attributeId"
    )
    note_id: Optional[constr(strict=True)] = Field(None, alias="noteId")
    type: Optional[StrictStr] = None
    name: Optional[constr(strict=True)] = None
    value: Optional[StrictStr] = None
    position: Optional[StrictInt] = None
    is_inheritable: Optional[StrictBool] = Field(None, alias="isInheritable")
    utc_date_modified: Optional[constr(strict=True)] = Field(
        None, alias="utcDateModified"
    )
    __properties = [
        "attributeId",
        "noteId",
        "type",
        "name",
        "value",
        "position",
        "isInheritable",
        "utcDateModified",
    ]

    @validator("attribute_id")
    def attribute_id_validate_regular_expression(cls, v):
        if not re.match(r"[a-zA-Z0-9_]{4,32}", v):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return v

    @validator("note_id")
    def note_id_validate_regular_expression(cls, v):
        if not re.match(r"[a-zA-Z0-9_]{4,32}", v):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return v

    @validator("type")
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ("label", "relation"):
            raise ValueError(
                "must validate the enum values ('label', 'relation')"
            )
        return v

    @validator("name")
    def name_validate_regular_expression(cls, v):
        if not re.match(r"^[^\s]+", v):
            raise ValueError(r"must validate the regular expression /^[^\s]+/")
        return v

    @validator("utc_date_modified")
    def utc_date_modified_validate_regular_expression(cls, v):
        if not re.match(
            r"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z",
            v,
        ):
            raise ValueError(
                r"must validate the regular expression /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z/"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Attribute:
        """Create an instance of Attribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Attribute:
        """Create an instance of Attribute from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Attribute.parse_obj(obj)

        _obj = Attribute.parse_obj(
            {
                "attribute_id": obj.get("attributeId"),
                "note_id": obj.get("noteId"),
                "type": obj.get("type"),
                "name": obj.get("name"),
                "value": obj.get("value"),
                "position": obj.get("position"),
                "is_inheritable": obj.get("isInheritable"),
                "utc_date_modified": obj.get("utcDateModified"),
            }
        )
        return _obj
