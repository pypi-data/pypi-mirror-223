# coding: utf-8

"""
    ETAPI

    External Trilium API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: zadam.apps@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from trilium_client.models.branch import Branch
from trilium_client.models.note import Note


class NoteWithBranch(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    note: Optional[Note] = None
    branch: Optional[Branch] = None
    __properties = ["note", "branch"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NoteWithBranch:
        """Create an instance of NoteWithBranch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of note
        if self.note:
            _dict["note"] = self.note.to_dict()
        # override the default output from pydantic by calling `to_dict()` of branch
        if self.branch:
            _dict["branch"] = self.branch.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NoteWithBranch:
        """Create an instance of NoteWithBranch from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NoteWithBranch.parse_obj(obj)

        _obj = NoteWithBranch.parse_obj(
            {
                "note": Note.from_dict(obj.get("note"))
                if obj.get("note") is not None
                else None,
                "branch": Branch.from_dict(obj.get("branch"))
                if obj.get("branch") is not None
                else None,
            }
        )
        return _obj
