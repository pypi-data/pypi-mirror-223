# coding: utf-8

"""
    ETAPI

    External Trilium API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: zadam.apps@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    constr,
    validator,
)


class CreateNoteDef(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    parent_note_id: constr(strict=True) = Field(..., alias="parentNoteId")
    title: StrictStr = ...
    type: StrictStr = ...
    mime: Optional[StrictStr] = Field(
        None,
        description="this needs to be specified only for note types 'code', 'file', 'image'.",
    )
    content: StrictStr = ...
    note_position: Optional[StrictInt] = Field(
        None,
        alias="notePosition",
        description="Position of the note in the parent. Normal ordering is 10, 20, 30 ...  So if you want to create a note on the first position, use e.g. 5, for second position 15, for last e.g. 1000000 ",
    )
    prefix: Optional[StrictStr] = Field(
        None,
        description="Prefix is branch (placement) specific title prefix for the note.  Let's say you have your note placed into two different places in the tree,  but you want to change the title a bit in one of the placements. For this you can use prefix. ",
    )
    is_expanded: Optional[StrictBool] = Field(
        None,
        alias="isExpanded",
        description="true if this note (as a folder) should appear expanded",
    )
    note_id: Optional[constr(strict=True)] = Field(None, alias="noteId")
    branch_id: Optional[constr(strict=True)] = Field(None, alias="branchId")
    __properties = [
        "parentNoteId",
        "title",
        "type",
        "mime",
        "content",
        "notePosition",
        "prefix",
        "isExpanded",
        "noteId",
        "branchId",
    ]

    @validator("parent_note_id")
    def parent_note_id_validate_regular_expression(cls, v):
        if not re.match(r"[a-zA-Z0-9_]{4,32}", v):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return v

    @validator("type")
    def type_validate_enum(cls, v):
        if v not in (
            "text",
            "code",
            "file",
            "image",
            "search",
            "book",
            "relationMap",
            "render",
        ):
            raise ValueError(
                "must validate the enum values ('text', 'code', 'file', 'image', 'search', 'book', 'relationMap', 'render')"
            )
        return v

    @validator("note_id")
    def note_id_validate_regular_expression(cls, v):
        if not re.match(r"[a-zA-Z0-9_]{4,32}", v):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return v

    @validator("branch_id")
    def branch_id_validate_regular_expression(cls, v):
        if not re.match(r"[a-zA-Z0-9_]{4,32}", v):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateNoteDef:
        """Create an instance of CreateNoteDef from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateNoteDef:
        """Create an instance of CreateNoteDef from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateNoteDef.parse_obj(obj)

        _obj = CreateNoteDef.parse_obj(
            {
                "parent_note_id": obj.get("parentNoteId"),
                "title": obj.get("title"),
                "type": obj.get("type"),
                "mime": obj.get("mime"),
                "content": obj.get("content"),
                "note_position": obj.get("notePosition"),
                "prefix": obj.get("prefix"),
                "is_expanded": obj.get("isExpanded"),
                "note_id": obj.get("noteId"),
                "branch_id": obj.get("branchId"),
            }
        )
        return _obj
