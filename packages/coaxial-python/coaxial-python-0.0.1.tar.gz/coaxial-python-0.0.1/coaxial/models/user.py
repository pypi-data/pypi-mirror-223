# coding: utf-8

"""
    The Coaxial API

    The Coaxial REST API. Please see https://docs.coaxial.ai for more details.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: team@coaxial.ai
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from coaxial.models.user_info import UserInfo

class User(BaseModel):
    """
    The User model
    """
    base_user_id: Optional[Any] = Field(..., alias="baseUser_id")
    email: Optional[Any] = Field(...)
    first: Optional[Any] = Field(...)
    id: Optional[Any] = Field(...)
    imported_at: Optional[Any] = Field(...)
    last: Optional[Any] = Field(...)
    modified_at: Optional[Any] = Field(...)
    resource_list: Optional[Any] = Field(...)
    source_metadata: UserInfo = Field(...)
    __properties = ["baseUser_id", "email", "first", "id", "imported_at", "last", "modified_at", "resource_list", "source_metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "imported_at",
                            "modified_at",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source_metadata
        if self.source_metadata:
            _dict['source_metadata'] = self.source_metadata.to_dict()
        # set to None if base_user_id (nullable) is None
        # and __fields_set__ contains the field
        if self.base_user_id is None and "base_user_id" in self.__fields_set__:
            _dict['baseUser_id'] = None

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if first (nullable) is None
        # and __fields_set__ contains the field
        if self.first is None and "first" in self.__fields_set__:
            _dict['first'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if imported_at (nullable) is None
        # and __fields_set__ contains the field
        if self.imported_at is None and "imported_at" in self.__fields_set__:
            _dict['imported_at'] = None

        # set to None if last (nullable) is None
        # and __fields_set__ contains the field
        if self.last is None and "last" in self.__fields_set__:
            _dict['last'] = None

        # set to None if modified_at (nullable) is None
        # and __fields_set__ contains the field
        if self.modified_at is None and "modified_at" in self.__fields_set__:
            _dict['modified_at'] = None

        # set to None if resource_list (nullable) is None
        # and __fields_set__ contains the field
        if self.resource_list is None and "resource_list" in self.__fields_set__:
            _dict['resource_list'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "base_user_id": obj.get("baseUser_id"),
            "email": obj.get("email"),
            "first": obj.get("first"),
            "id": obj.get("id"),
            "imported_at": obj.get("imported_at"),
            "last": obj.get("last"),
            "modified_at": obj.get("modified_at"),
            "resource_list": obj.get("resource_list"),
            "source_metadata": UserInfo.from_dict(obj.get("source_metadata")) if obj.get("source_metadata") is not None else None
        })
        return _obj


