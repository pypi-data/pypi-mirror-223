# coding: utf-8

"""
    The Coaxial API

    The Coaxial REST API. Please see https://docs.coaxial.ai for more details.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: team@coaxial.ai
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from coaxial.models.function import Function

class IntegrateFunctionResponse(BaseModel):
    """
    IntegrateFunctionResponse
    """
    function: Function = Field(...)
    __properties = ["function"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntegrateFunctionResponse:
        """Create an instance of IntegrateFunctionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of function
        if self.function:
            _dict['function'] = self.function.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntegrateFunctionResponse:
        """Create an instance of IntegrateFunctionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntegrateFunctionResponse.parse_obj(obj)

        _obj = IntegrateFunctionResponse.parse_obj({
            "function": Function.from_dict(obj.get("function")) if obj.get("function") is not None else None
        })
        return _obj


