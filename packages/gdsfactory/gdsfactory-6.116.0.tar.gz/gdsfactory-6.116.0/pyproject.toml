# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html

[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core >=3.2,<4"]

[project]
authors = [{name = "gdsfactory community", email = "contact@gdsfactory.com"}]
classifiers = [
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Operating System :: OS Independent"
]
dependencies = [
  "click",
  "flatdict",
  "gdstk",
  "jinja2",
  "loguru",
  "matplotlib",
  "numpy",
  "omegaconf",
  "orjson",
  "pandas",
  "pydantic<2.0",
  "pyyaml",
  "qrcode",
  "rectpack",
  "scipy",
  "shapely",
  "toolz",
  "tqdm",
  "types-PyYAML",
  "typing_extensions",
  "watchdog",
  "rich"
]
description = "python library to generate GDS layouts"
keywords = ["eda", "photonics", "python"]
license = {file = "LICENSE"}
name = "gdsfactory"
readme = "README.md"
requires-python = ">=3.7"
version = "6.116.0"

[project.optional-dependencies]
cad = [
  "autograd",
  "bokeh",
  "freetype-py",
  "ipympl",
  "ipywidgets==7.7.3",
  "ipyevents",
  "ipykernel",
  "mapbox_earcut",
  "natsort",
  "networkx",
  "pyglet<2",
  "pygmsh",
  "scikit-fem",
  "scikit-image",
  "scikit-learn",
  "trimesh",
  "jupytext",
  "klayout",
  "ipytree",
  "rich-click",
  "ipycytoscape",
  "kweb==0.1.1",
  "jinja2",
  "python-multipart",
  "fastapi",
  "uvicorn[standard]"
]
database = [
  "sqlalchemy",
  "sqlalchemy-utils",
  "dagster",
  "dagit",
  "sqlmodel",
  "boto3",
  "pymysql"
]
dev = [
  "autotyping",
  "black>=21",
  "doc8",
  "ipykernel",
  "jsondiff",
  "mypy",
  "pre-commit",
  "pylsp-mypy",
  "pytest",
  "pytest-cov",
  "pytest_regressions",
  "types-PyYAML",
  "types-cachetools",
  "xdoctest"
]
devsim = [
  "devsim",
  "pyvista",
  "tidy3d"
]
docs = [
  "autodoc_pydantic",
  "jupytext",
  "jupyter-book==0.15.1",
  "pydata_sphinx_theme==0.13.1",
  "plotly"
]
femwell = [
  "femwell==0.1.5"
]
full = [
  "sqlalchemy",
  "sqlalchemy-utils",
  "dagster",
  "dagit",
  "sqlmodel",
  "boto3",
  "pymysql",
  # devsim
  "devsim",
  "pyvista",
  # docs
  "femwell==0.1.5",
  # cad
  "autograd",
  "bokeh",
  "freetype-py",
  "ipympl",
  "ipywidgets==7.7.3",
  "ipyevents",
  "mapbox_earcut",
  "natsort",
  "networkx",
  "pyglet<2",
  "scikit-fem",
  "scikit-image",
  "scikit-learn",
  "trimesh",
  "jupytext",
  "klayout",
  "ipytree",
  "rich-click",
  "ipycytoscape",
  "kweb==0.1.1",
  "jinja2",
  "python-multipart",
  "fastapi",
  "uvicorn[standard]",
  # gmsh
  "gmsh",
  "h5py",
  "mapbox_earcut",
  "meshio",
  "pygmsh",
  "pyvista",
  "trimesh",
  "shapely",
  "meshwell==0.0.9",
  # kfactory
  "kfactory[git,ipy]==0.7.5",
  "meow-sim==0.7.1",
  # ray
  "ray",
  "hyperopt",
  # sax
  "sax==0.8.8",
  "jaxlib",
  "jax",
  "tidy3d==2.3.2",
  # particle swarm implementation
  "pyswarms"
]
gmsh = [
  "gmsh",
  "h5py",
  "mapbox_earcut",
  "meshio",
  "pygmsh",
  "pyvista",
  "trimesh",
  "shapely"
]
kfactory = [
  "kfactory[git,ipy]==0.7.5"
]
meow = [
  "meow-sim==0.7.1"
]
meshwell = [
  "meshwell==0.0.9"
]
ray = [
  "ray[tune,air]",
  "hyperopt"
]
sax = [
  "sax==0.8.8",
  "jaxlib",
  "jax"
]
tidy3d = [
  "tidy3d==2.3.2"
]

[project.scripts]
gf = "gdsfactory.cli:cli"

[tool.black]
exclude = '''  # Specify the files/dirs that should be ignored by the black formatter
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | env
    | _build
    | buck-out
    | build
    | dist
 )/
'''
include = '\.pyi?$'
line-length = 88
target-version = ['py310']

[tool.codespell]
ignore-words-list = "te, te/tm, te, ba, fpr, fpr_spacing, ro, nd, donot, schem"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
version_files = ["pyproject.toml:version"]

[tool.flake8]
exclude = [
  ".git",
  "__pycache__",
  "lib",
  "docs/source/conf.py",
  "build",
  "dist",
  ".ipynb_checkpoints",
  ".tox",
  "extra",
  "deprecated",
  "gdslib",
  ".mypy_cache",
  "venv",
  "devsim"
]
extend-ignore = "RST303"
ignore = [
  "E501",
  "E503",
  "E722",
  "W503",
  "W503",
  "E203",
  "B950",
  "B305",
  "B018",
  "B902",
  "B020",
  "B905"
]
max-complexity = 57
max-line-length = 88
select = ["B", "C", "E", "F", "W", "T4", "B9"]

[tool.isort]
include_trailing_comma = true
line_length = 88
multi_line_output = 3
skip = "gdsfactory/__init__.py"

[tool.jupytext]
cell_metadata_filter = "-all"
notebook_metadata_filter = "-all"

[tool.mypy]
python_version = "3.10"
strict = true

[tool.pydocstyle]
add-ignore = ["D100", "D101", "D102", "D103", "D104", "D203", "D405", "D417"]
convention = "google"
inherit = false
match = "(?!test).*\\.py"

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

[tool.pytest.ini_options]
# addopts = --tb=no
addopts = '--tb=short --ignore=gdsfactory/schematic_editor.py --ignore=gdsfactory/klayout_tech.py --ignore=gdsfactory/geometry/maskprep_flat.py --ignore=gdsfactory/fill_klayout.py'
datadir = "test-data-regression"
norecursedirs = [
  "gdsfactory/samples/notebooks",
  "gdsfactory/plugins",
  "gdsfactory/simulation",
  "gdsfactory/geometry",
  "extra/*.py",
  "gdsfactory/watch.py",
  "gdsfactory/schematic_editor.py",
  "gdsfactory/database",
  "gdsfactory/generic_tech/klayout",
  "gdsfactory/simulation/simphony",
  "gdsfactory/tests/test_klayout"
]
python_files = ["gdsfactory/*.py", "tests/*.py"]
testpaths = ["gdsfactory/", "tests"]

[tool.ruff]
extend-exclude = ["docs/notebooks", "gdsfactory/samples/notebooks"]
ignore = [
  "E501",  # line too long, handled by black
  "B008",  # do not perform function calls in argument defaults
  "C901",  # too complex
  "B905",  # `zip()` without an explicit `strict=` parameter
  "C408",  # C408 Unnecessary `dict` call (rewrite as a literal)
  "B904",
  "B028"  # stacklevel
]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  # "I",  # isort
  "C",  # flake8-comprehensions
  "B"  # flake8-bugbear
]

[tool.setuptools.package-data]
mypkg = [
  "*.gds",
  "*.lym",
  "*.lyp",
  "*.lyt",
  "*.csv",
  "*.yaml",
  "*.md",
  "LICENSE"
]

[tool.setuptools.packages]
find = {}
